-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_rx_bram.vhd
-- Created: 2019-02-08 23:33:52
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_rx_bram
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/rx_bram
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ZynqBF_2t_ip_src_ZynqBF_2tx_fpga_pkg.ALL;

ENTITY ZynqBF_2t_ip_src_rx_bram IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_i                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        din_q                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        we                                :   IN    std_logic;
        re                                :   IN    std_logic;
        rd_addr                           :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        rst                               :   IN    std_logic;
        dout                              :   OUT   vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        valid                             :   OUT   std_logic;
        addr_out                          :   OUT   std_logic_vector(14 DOWNTO 0)  -- ufix15
        );
END ZynqBF_2t_ip_src_rx_bram;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_rx_bram IS

  -- Component Declarations
  COMPONENT ZynqBF_2t_ip_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ZynqBF_2t_ip_src_SimpleDualPortRAM_generic
    USE ENTITY work.ZynqBF_2t_ip_src_SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL din_i_signed                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL rd_addr_unsigned                 : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL rd_addr_1                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL rx_ram_i_out1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rx_ram_i_out1_signed             : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay6_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL din_q_signed                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL rx_ram_q_out1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rx_ram_q_out1_signed             : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay7_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Vector_Concatenate_out1          : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL reduced_reg                      : vector_of_unsigned15(0 TO 2);  -- ufix15 [3]
  SIGNAL rd_addr_2                        : unsigned(14 DOWNTO 0);  -- ufix15

BEGIN
  u_rx_ram_i : ZynqBF_2t_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Delay3_out1),
              wr_addr => std_logic_vector(HDL_Counter_out1),
              wr_en => Delay1_out1,
              rd_addr => std_logic_vector(rd_addr_1),
              rd_dout => rx_ram_i_out1
              );

  u_rx_ram_q : ZynqBF_2t_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Delay4_out1),
              wr_addr => std_logic_vector(HDL_Counter_out1),
              wr_en => Delay1_out1,
              rd_addr => std_logic_vector(rd_addr_1),
              rd_dout => rx_ram_q_out1
              );

  din_i_signed <= signed(din_i);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1 <= din_i_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= we;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 32767
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#0001#, 15);
      ELSIF enb = '1' THEN
        IF rst = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#0001#, 15);
        ELSIF Delay1_out1 = '1' THEN 
          IF HDL_Counter_out1 = to_unsigned(16#7FFF#, 15) THEN 
            HDL_Counter_out1 <= to_unsigned(16#0001#, 15);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#0001#, 15);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  rd_addr_unsigned <= unsigned(rd_addr);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rd_addr_1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        rd_addr_1 <= rd_addr_unsigned;
      END IF;
    END IF;
  END PROCESS reduced_process;


  rx_ram_i_out1_signed <= signed(rx_ram_i_out1);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay6_out1 <= rx_ram_i_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  din_q_signed <= signed(din_q);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay4_out1 <= din_q_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  rx_ram_q_out1_signed <= signed(rx_ram_q_out1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay7_out1 <= rx_ram_q_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Vector_Concatenate_out1(0) <= Delay6_out1;
  Vector_Concatenate_out1(1) <= Delay7_out1;

  outputgen: FOR k IN 0 TO 1 GENERATE
    dout(k) <= std_logic_vector(Vector_Concatenate_out1(k));
  END GENERATE;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= re;
        Delay5_reg(1 TO 3) <= Delay5_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(3);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_unsigned(16#0000#, 15));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= rd_addr_1;
        reduced_reg(1 TO 2) <= reduced_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  rd_addr_2 <= reduced_reg(2);

  addr_out <= std_logic_vector(rd_addr_2);

  valid <= Delay5_out1;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_calc_inverse.vhd
-- Created: 2019-02-08 23:33:52
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_calc_inverse
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/ch_est/calc_inverse
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ZynqBF_2t_ip_src_calc_inverse IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        en                                :   IN    std_logic;
        dout                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        dval                              :   OUT   std_logic
        );
END ZynqBF_2t_ip_src_calc_inverse;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_calc_inverse IS

  -- Component Declarations
  COMPONENT ZynqBF_2t_ip_src_HDL_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ZynqBF_2t_ip_src_HDL_Reciprocal
    USE ENTITY work.ZynqBF_2t_ip_src_HDL_Reciprocal(rtl);

  -- Signals
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL HDL_Reciprocal_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal_out1_signed       : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Switch1_out1                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Switch1_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Delay18_out1                     : std_logic;

BEGIN
  u_HDL_Reciprocal : ZynqBF_2t_ip_src_HDL_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din => din,  -- sfix32_En16
              dout => HDL_Reciprocal_out1  -- sfix32_En14
              );

  Logical_Operator2_out1 <=  NOT en;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 9
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF Logical_Operator2_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#00#, 8);
        ELSIF en = '1' THEN 
          IF HDL_Counter_out1 >= to_unsigned(16#09#, 8) THEN 
            HDL_Counter_out1 <= to_unsigned(16#00#, 8);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#04#, 8) ELSE
      '0';

  HDL_Reciprocal_out1_signed <= signed(HDL_Reciprocal_out1);

  
  Switch1_out1_1 <= Switch1_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      HDL_Reciprocal_out1_signed;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Switch1_out1 <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  dout <= std_logic_vector(Switch1_out1);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay18_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  dval <= Delay18_out1;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_ram_rd_counter.vhd
-- Created: 2019-02-08 23:33:51
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_ram_rd_counter
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/ram_rd_counter
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ZynqBF_2t_ip_src_ram_rd_counter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        addr1                             :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        addr2                             :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        gs_sel                            :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        rst                               :   IN    std_logic;
        load                              :   IN    std_logic;
        pd_init                           :   IN    std_logic;
        pd_step                           :   IN    std_logic;
        est_step                          :   IN    std_logic;
        rx_addr_out                       :   OUT   std_logic_vector(14 DOWNTO 0);  -- ufix15
        re                                :   OUT   std_logic;
        gs_addr_out                       :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
        );
END ZynqBF_2t_ip_src_ram_rd_counter;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_ram_rd_counter IS

  -- Component Declarations
  COMPONENT ZynqBF_2t_ip_src_select_inputs
    PORT( en1                             :   IN    std_logic;
          en2                             :   IN    std_logic;
          in1                             :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          in2                             :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          y                               :   OUT   std_logic_vector(14 DOWNTO 0)  -- ufix15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ZynqBF_2t_ip_src_select_inputs
    USE ENTITY work.ZynqBF_2t_ip_src_select_inputs(rtl);

  -- Signals
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL addr1_unsigned                   : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL addr2_unsigned                   : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay10_out1                     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay11_out1                     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL y                                : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL y_unsigned                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay3_out1                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL HDL_Counter2_out1                : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay6_out1                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay8_out1                      : unsigned(11 DOWNTO 0);  -- ufix12

BEGIN
  u_select_inputs : ZynqBF_2t_ip_src_select_inputs
    PORT MAP( en1 => Delay5_out1(0),
              en2 => Delay5_out1(1),
              in1 => std_logic_vector(Delay10_out1),  -- ufix15
              in2 => std_logic_vector(Delay11_out1),  -- ufix15
              y => y  -- ufix15
              );

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= rst;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= load;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay5_out1 <= gs_sel;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  addr1_unsigned <= unsigned(addr1);

  addr2_unsigned <= unsigned(addr2);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        Delay10_out1 <= addr1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        Delay11_out1 <= addr2_unsigned;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  y_unsigned <= unsigned(y);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        Delay3_out1 <= y_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= pd_step;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= est_step;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1 <= pd_init;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Logical_Operator_out1 <= Delay12_out1 OR (Delay4_out1 OR Delay9_out1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter2_out1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        IF Delay2_out1 = '1' THEN 
          HDL_Counter2_out1 <= to_unsigned(16#0000#, 15);
        ELSIF Delay1_out1 = '1' THEN 
          HDL_Counter2_out1 <= Delay3_out1;
        ELSIF Logical_Operator_out1 = '1' THEN 
          HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(16#0001#, 15);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        Delay6_out1 <= HDL_Counter2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  rx_addr_out <= std_logic_vector(Delay6_out1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4095
  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter1_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb = '1' THEN
        IF Delay2_out1 = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(16#000#, 12);
        ELSIF Delay1_out1 = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(16#FFF#, 12);
        ELSIF Delay9_out1 = '1' THEN 
          HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#001#, 12);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay8_out1 <= HDL_Counter1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  gs_addr_out <= std_logic_vector(Delay8_out1);

  re <= Delay7_out1;

END rtl;


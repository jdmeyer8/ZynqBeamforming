-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_shift_rx.vhd
-- Created: 2019-02-08 23:33:51
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_shift_rx
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/peakdetect_ch1/correlator1/shift_rx
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ZynqBF_2t_ip_src_ZynqBF_2tx_fpga_pkg.ALL;

ENTITY ZynqBF_2t_ip_src_shift_rx IS
  PORT( clk:                                in std_logic;
        reset:                              in std_logic;
        u                                 :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En15 [64]
        shift                             :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        y                                 :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En15 [64]
        );
END ZynqBF_2t_ip_src_shift_rx;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_shift_rx IS

  -- Signals
  SIGNAL u_signed                         : vector_of_signed16(0 TO 63);  -- sfix16_En15 [64]
  SIGNAL shift_unsigned                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL y_tmp                            : vector_of_signed16(0 TO 63);  -- sfix16_En15 [64]

BEGIN


shift_proc: process(clk,reset)
begin
  if clk'event and clk = '1' then
    if reset = '1' then
      for i in 0 to 63 loop
          y(i) <= x"0000";
      end loop;
    else
      -- if shift = "000000" then
          -- y <= u;
      -- else
          -- y(0 to (63 - shifti)) <= u(shifti to 63);
          -- y((64-shifti) to 63) <= u(0 to (shifti - 1));
      -- end if;
      case shift is
        when "000000" => y <= u;
        when "000001" => y(0 to 62) <= u( 1 to 63); y(63) <= u(0);
        when "000010" => y(0 to 61) <= u( 2 to 63); y(62 to 63) <= u(0 to  1);
        when "000011" => y(0 to 60) <= u( 3 to 63); y(61 to 63) <= u(0 to  2);
        when "000100" => y(0 to 59) <= u( 4 to 63); y(60 to 63) <= u(0 to  3);
        when "000101" => y(0 to 58) <= u( 5 to 63); y(59 to 63) <= u(0 to  4);
        when "000110" => y(0 to 57) <= u( 6 to 63); y(58 to 63) <= u(0 to  5);
        when "000111" => y(0 to 56) <= u( 7 to 63); y(57 to 63) <= u(0 to  6);
        when "001000" => y(0 to 55) <= u( 8 to 63); y(56 to 63) <= u(0 to  7);
        when "001001" => y(0 to 54) <= u( 9 to 63); y(55 to 63) <= u(0 to  8);
        when "001010" => y(0 to 53) <= u(10 to 63); y(54 to 63) <= u(0 to  9);
        when "001011" => y(0 to 52) <= u(11 to 63); y(53 to 63) <= u(0 to 10);
        when "001100" => y(0 to 51) <= u(12 to 63); y(52 to 63) <= u(0 to 11);
        when "001101" => y(0 to 50) <= u(13 to 63); y(51 to 63) <= u(0 to 12);
        when "001110" => y(0 to 49) <= u(14 to 63); y(50 to 63) <= u(0 to 13);
        when "001111" => y(0 to 48) <= u(15 to 63); y(49 to 63) <= u(0 to 14);
        when "010000" => y(0 to 47) <= u(16 to 63); y(48 to 63) <= u(0 to 15);
        when "010001" => y(0 to 46) <= u(17 to 63); y(47 to 63) <= u(0 to 16);
        when "010010" => y(0 to 45) <= u(18 to 63); y(46 to 63) <= u(0 to 17);
        when "010011" => y(0 to 44) <= u(19 to 63); y(45 to 63) <= u(0 to 18);
        when "010100" => y(0 to 43) <= u(20 to 63); y(44 to 63) <= u(0 to 19);
        when "010101" => y(0 to 42) <= u(21 to 63); y(43 to 63) <= u(0 to 20);
        when "010110" => y(0 to 41) <= u(22 to 63); y(42 to 63) <= u(0 to 21);
        when "010111" => y(0 to 40) <= u(23 to 63); y(41 to 63) <= u(0 to 22);
        when "011000" => y(0 to 39) <= u(24 to 63); y(40 to 63) <= u(0 to 23);
        when "011001" => y(0 to 38) <= u(25 to 63); y(39 to 63) <= u(0 to 24);
        when "011010" => y(0 to 37) <= u(26 to 63); y(38 to 63) <= u(0 to 25);
        when "011011" => y(0 to 36) <= u(27 to 63); y(37 to 63) <= u(0 to 26);
        when "011100" => y(0 to 35) <= u(28 to 63); y(36 to 63) <= u(0 to 27);
        when "011101" => y(0 to 34) <= u(29 to 63); y(35 to 63) <= u(0 to 28);
        when "011110" => y(0 to 33) <= u(30 to 63); y(34 to 63) <= u(0 to 29);
        when "011111" => y(0 to 32) <= u(31 to 63); y(33 to 63) <= u(0 to 30);
        when "100000" => y(0 to 31) <= u(32 to 63); y(32 to 63) <= u(0 to 31);
        when "100001" => y(0 to 30) <= u(33 to 63); y(31 to 63) <= u(0 to 32);
        when "100010" => y(0 to 29) <= u(34 to 63); y(30 to 63) <= u(0 to 33);
        when "100011" => y(0 to 28) <= u(35 to 63); y(29 to 63) <= u(0 to 34);
        when "100100" => y(0 to 27) <= u(36 to 63); y(28 to 63) <= u(0 to 35);
        when "100101" => y(0 to 26) <= u(37 to 63); y(27 to 63) <= u(0 to 36);
        when "100110" => y(0 to 25) <= u(38 to 63); y(26 to 63) <= u(0 to 37);
        when "100111" => y(0 to 24) <= u(39 to 63); y(25 to 63) <= u(0 to 38);
        when "101000" => y(0 to 23) <= u(40 to 63); y(24 to 63) <= u(0 to 39);
        when "101001" => y(0 to 22) <= u(41 to 63); y(23 to 63) <= u(0 to 40);
        when "101010" => y(0 to 21) <= u(42 to 63); y(22 to 63) <= u(0 to 41);
        when "101011" => y(0 to 20) <= u(43 to 63); y(21 to 63) <= u(0 to 42);
        when "101100" => y(0 to 19) <= u(44 to 63); y(20 to 63) <= u(0 to 43);
        when "101101" => y(0 to 18) <= u(45 to 63); y(19 to 63) <= u(0 to 44);
        when "101110" => y(0 to 17) <= u(46 to 63); y(18 to 63) <= u(0 to 45);
        when "101111" => y(0 to 16) <= u(47 to 63); y(17 to 63) <= u(0 to 46);
        when "110000" => y(0 to 15) <= u(48 to 63); y(16 to 63) <= u(0 to 47);
        when "110001" => y(0 to 14) <= u(49 to 63); y(15 to 63) <= u(0 to 48);
        when "110010" => y(0 to 13) <= u(50 to 63); y(14 to 63) <= u(0 to 49);
        when "110011" => y(0 to 12) <= u(51 to 63); y(13 to 63) <= u(0 to 50);
        when "110100" => y(0 to 11) <= u(52 to 63); y(12 to 63) <= u(0 to 51);
        when "110101" => y(0 to 10) <= u(53 to 63); y(11 to 63) <= u(0 to 52);
        when "110110" => y(0 to  9) <= u(54 to 63); y(10 to 63) <= u(0 to 53);
        when "110111" => y(0 to  8) <= u(55 to 63); y( 9 to 63) <= u(0 to 54);
        when "111000" => y(0 to  7) <= u(56 to 63); y( 8 to 63) <= u(0 to 55);
        when "111001" => y(0 to  6) <= u(57 to 63); y( 7 to 63) <= u(0 to 56);
        when "111010" => y(0 to  5) <= u(58 to 63); y( 6 to 63) <= u(0 to 57);
        when "111011" => y(0 to  4) <= u(59 to 63); y( 5 to 63) <= u(0 to 58);
        when "111100" => y(0 to  3) <= u(60 to 63); y( 4 to 63) <= u(0 to 59);
        when "111101" => y(0 to  2) <= u(61 to 63); y( 3 to 63) <= u(0 to 60);
        when "111110" => y(0 to  1) <= u(62 to 63); y( 2 to 63) <= u(0 to 61);
        when "111111" => y(0) <= u(63); y(1 to 63) <=  u(0 to 62);
        when others => y <= (others => x"0000");
      end case;
    end if;
  end if;
end process;

  -- outputgen1: FOR k1 IN 0 TO 63 GENERATE
    -- u_signed(k1) <= signed(u(k1));
  -- END GENERATE;

  -- shift_unsigned <= unsigned(shift);

  -- shift_rx_output : PROCESS (shift_unsigned, u_signed)
    -- VARIABLE ns : signed(31 DOWNTO 0);
    -- VARIABLE shiftright : std_logic;
    -- VARIABLE a : vector_of_signed16(0 TO 63);
    -- VARIABLE unusedU0 : vector_of_signed16(0 TO 31);
    -- VARIABLE cast : signed(31 DOWNTO 0);
    -- VARIABLE cast_0 : signed(32 DOWNTO 0);
    -- VARIABLE cast_1 : signed(7 DOWNTO 0);
    -- VARIABLE cast_2 : signed(31 DOWNTO 0);
    -- VARIABLE cast_3 : signed(32 DOWNTO 0);
    -- VARIABLE cast_4 : signed(7 DOWNTO 0);
    -- VARIABLE cast_5 : signed(32 DOWNTO 0);
  -- BEGIN
    -- --MATLAB Function 'channel_estimator/peakdetect_ch1/correlator1/shift_rx'
    -- -- y = zeros(64,1,'like',u);
    -- cast := signed(resize(shift_unsigned, 32));
    -- cast_0 :=  - (resize(cast, 33));
    -- cast_1 := cast_0(7 DOWNTO 0);
    -- IF cast_1 < to_signed(16#00000000#, 8) THEN 
      -- cast_2 := signed(resize(shift_unsigned, 32));
      -- cast_3 :=  - (resize(cast_2, 33));
      -- cast_4 := cast_3(7 DOWNTO 0);
      -- cast_5 :=  - (resize(cast_4, 33));
      -- ns := cast_5(31 DOWNTO 0);
      -- shiftright := '0';
    -- ELSE 
      -- ns := to_signed(16#00000000#, 32);
      -- shiftright := '1';
    -- END IF;
    -- IF ns > to_signed(16#00000020#, 32) THEN 
      -- ns := 64 - ns;
      -- shiftright :=  NOT shiftright;
    -- END IF;
    -- unusedU0 := (OTHERS => to_signed(16#0000#, 16));
    -- a := u_signed;
    -- IF ns > to_signed(16#00000000#, 32) THEN 
      -- IF shiftright = '1' THEN 

        -- FOR k_4 IN 0 TO 31 LOOP
          -- IF to_signed(k_4 + 1, 32) <= ns THEN 
            -- unusedU0(k_4) := u_signed(to_integer((to_signed(k_4, 32) - ns) + 64));
          -- END IF;
        -- END LOOP;


        -- FOR k_3 IN 62 DOWNTO 0 LOOP
          -- IF to_signed(k_3 + 2, 32) >= (ns + 1) THEN 
            -- a(k_3 + 1) := a(to_integer((to_signed(k_3, 32) - ns) + 1));
          -- END IF;
        -- END LOOP;


        -- FOR k_2 IN 0 TO 31 LOOP
          -- IF to_signed(k_2 + 1, 32) <= ns THEN 
            -- a(k_2) := unusedU0(k_2);
          -- END IF;
        -- END LOOP;

      -- ELSE 

        -- FOR k_1 IN 0 TO 31 LOOP
          -- IF to_signed(k_1 + 1, 32) <= ns THEN 
            -- unusedU0(k_1) := u_signed(k_1);
          -- END IF;
        -- END LOOP;


        -- FOR k_0 IN 0 TO 62 LOOP
          -- IF to_signed(k_0 + 1, 32) <= (64 - ns) THEN 
            -- a(k_0) := a(to_integer(to_signed(k_0, 32) + ns));
          -- END IF;
        -- END LOOP;


        -- FOR k IN 0 TO 31 LOOP
          -- IF to_signed(k + 1, 32) <= ns THEN 
            -- a(to_integer((to_signed(k, 32) - ns) + 64)) := unusedU0(k);
          -- END IF;
        -- END LOOP;

      -- END IF;
    -- END IF;
    -- y_tmp <= a;
  -- END PROCESS shift_rx_output;


  -- outputgen: FOR k1 IN 0 TO 63 GENERATE
    -- y(k1) <= std_logic_vector(y_tmp(k1));
  -- END GENERATE;

END rtl;


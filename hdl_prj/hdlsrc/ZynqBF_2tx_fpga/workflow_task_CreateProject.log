Task "Create Project" successful.
Generated logfile: 
Generating Xilinx Vivado with IP Integrator project: <a href="matlab:downstream.tool.openTargetTool('/opt/Xilinx/Vivado/2017.4/bin/vivado vivado_prj.xpr &','hdl_prj/vivado_ip_prj/vivado_prj.xpr',0);">hdl_prj/vivado_ip_prj/vivado_prj.xpr</a>
****** Vivado v2017.4 (64-bit)
  **** SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
  **** IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
    ** Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.

source vivado_create_prj.tcl
# create_project vivado_prj {} -part xc7z045ffg900-2 -force
# set_property board_part xilinx.com:zc706:part0:1.0 [current_project]
# set_property target_language VHDL [current_project]
# set defaultRepoPath {./ipcore}
# set_property ip_repo_paths $defaultRepoPath [current_fileset]
# update_ip_catalog
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/Xilinx/Vivado/2017.4/data/ip'.
# set ipList [glob -nocomplain -directory $defaultRepoPath *.zip]
# foreach ipCore $ipList {
#   set folderList [glob -nocomplain -directory $defaultRepoPath -type d *]
#   if {[lsearch -exact $folderList [file rootname $ipCore]] == -1} {
#     catch {update_ip_catalog -add_ip $ipCore -repo_path $defaultRepoPath}
#   }
# }
# update_ip_catalog
INFO: [IP_Flow 19-1839] IP Catalog is up to date.
# set boardName {zc706}
# set project {fmcomms2}
# set mw_hdl_dir {ipcore/mw}
# set ad_hdl_dir {ipcore/adi}
# set variant {rx}
# source vivado_custom_block_design.tcl
## source $mw_hdl_dir/common/scripts/xilinx/mw_project.tcl
### proc mw_project_create {project_name {boardName_in ""}} {
### 
###     if {$boardName_in == ""} {
###         puts "==> Deriving board name from project name"    
###         if [regexp "_zed$" $project_name] {
###             set boardName_in "zed"
###         }
###         if [regexp "_zc702$" $project_name] {
###             set boardName_in "zc702"
###         }
###         if [regexp "_zc706$" $project_name] {
###             set boardName_in "zc706"
###         }
### 
###         if [regexp "_uzed_7020$" $project_name] {
###             set boardName_in "uzed7020"
###         }
### 
###         if [regexp "_uzed_7010$" $project_name] {
###             set boardName_in "uzed7010"
###         }
###     
###         if [regexp "_mmp100$" $project_name] {
###             set boardName_in "mmp100"
###         }
###         
###         if [regexp "_mmp045$" $project_name] {
###             set boardName_in "mmp045"
###         }
### 
###         puts "==> Setting board name to $boardName_in"
###     }
### 
###     mw_load_board_tcl $boardName_in
###     mw_set_board_info $boardName_in
###     mw_init_project $project_name
###     mw_setup_libs
###     mw_config_project  
### }
### proc mw_config_project {} {
###     set buildAny [expr [mw_get_build_target "handoff"] || [mw_get_build_target "fsbl"]]
###     switch [mw_project_get cpu_type] {
###         kintex7_pcie {
###             mw_set_build_target "fsbl" 0
###             mw_set_build_target "handoff" 0
###         }
###         zynqmp_arm {
###            mw_set_build_target "fsbl" 0
###            mw_set_build_target "handoff" $buildAny
###            mw_project_set xsdk_proc "mw_create_zynqmp_fsbl"
###            mw_project_set xsdk_binaries [list fsbl/executable.elf pmufw/executable.elf pmufw/executable.bin]
###         }
###         zynq7_arm {
###            mw_set_build_target "fsbl" 0
###            mw_set_build_target "handoff" $buildAny
###            mw_project_set xsdk_proc "mw_create_zynq_fsbl"
###            mw_project_set xsdk_binaries [list fsbl/executable.elf]
###         }
###     }
### }
### proc mw_project_set {configItem value} {
###     global mw_project_info
###     if { ![info exists mw_project_info] } {
###         set mw_project_info [dict create]
###     }
###     
###     dict set mw_project_info $configItem $value
### }
### proc mw_project_get {configItem} {
###     global mw_project_info
###     if { ![info exists mw_project_info] } {
###         return ""
###     }
###     if { [dict exists $mw_project_info $configItem] } {
###         return [dict get $mw_project_info $configItem]
###     } else {
###         return ""
###     }
### }
### proc mw_set_board_info {boardName_in} {
###     # defaults
###     mw_project_set "mw_ip_baseaddr" 0x40010000
###     mw_project_set "boardName" $boardName_in 
###     mw_project_set "cpu_type" "zynq7_arm"
### 
###     if { [info procs board_set_board_info] == "board_set_board_info" } {
###         board_set_board_info
###     } else {
###         switch $boardName_in {
###             zed {
###                 mw_project_set project_part "xc7z020clg484-1"
###                 mw_project_set project_board "em.avnet.com:zed:part0:1.0"
###                 mw_project_set mw_ip_baseaddr 0x400D0000
###             }
###             zc702 {
###                 mw_project_set project_part "xc7z020clg484-1"
###                 mw_project_set project_board "xilinx.com:zc702:part0:1.0"
###             }
###             zc706 {
###                 mw_project_set project_part "xc7z045ffg900-2"
###                 mw_project_set project_board "xilinx.com:zc706:part0:1.0"
###             }
### 
###             uzed7020 {
###                 mw_project_set project_part "xc7z020clg400-1"
###                 mw_project_set project_board "em.avnet.com:MicroZed_7020:part0:1.0"
###             }
### 
###             uzed7010 {
###                 mw_project_set project_part "xc7z010clg400-1"
###                 mw_project_set project_board "em.avnet.com:MicroZed_7010:part0:1.1"
###             }
### 
###             mmp100 {
###                 mw_project_set project_part "xc7z100ffg900-2"
###                 mw_project_set project_board "em.avnet.com:mini_module_plus_7z100_rev_c:part0:1.0"
###             }
### 
###             mmp045 {
###                 mw_project_set project_part "xc7z045ffg900-1"
###                 mw_project_set project_board "em.avnet.com:mini_module_plus_7z045_rev_c:part0:1.0"
###             }
###             default {
###                 mw_error "Board not found: $boardName_in"
###             }
###         }
###     }
###     puts [format "==> Using Board %s" [mw_project_get boardName]]
### }
### proc mw_add_board_repo {repoPath} {
###     set repoPath [file normalize $repoPath]
###     set repoPaths [get_param board.repoPaths]
###     lappend repoPaths $repoPath
###     set repoPaths [lsort -unique $repoPaths]
###     set_param board.repoPaths $repoPaths
### }
### proc mw_init_project {project_name} {
###     global commonDir
###     
###     # Setup the build directory
###     set buildDir [file normalize ./build]
###     file delete -force -- $buildDir
###     file mkdir $buildDir
###     mw_project_set buildDir $buildDir
### 
###     # Add the board directory to the repo paths
###     mw_add_board_repo ${commonDir}/boards
### 
###     mw_project_set boardDir ${commonDir}/boards/[mw_project_get boardName]
### 
###     if { [mw_project_get project_part] == "" } {
###         if { [mw_project_get project_board] ne "" } {
###             # Set the part based on the board
###             mw_project_set project_part [get_property PART_NAME [get_board_parts [mw_project_get project_board]]]
###         } else {
###             mw_error "project_part or project_board must be defined"
###         }
###     }
### 
###     create_project $project_name $buildDir -part [mw_project_get project_part] -force
###     file mkdir [mw_get_output_dir]
### 
###      if {[mw_project_get project_board] ne ""} {
###         set_property board_part [mw_project_get project_board] [current_project]
###     }
### 
###     if { [info procs board_init_project] == "board_init_project" } {
###         board_init_project
###     }
### }
### proc mw_load_board_tcl {boardName_in} {
###     global commonDir
### 
###     set board_tcl $commonDir/boards/$boardName_in/tcl/board_project.tcl
###     if { [file exists $board_tcl] } {
###         source $board_tcl
###     }
### }
### proc mw_setup_libs {} {
###     global mw_hdl_dir
### 
###     # cleanup local lib
###     set local_lib [mw_get_proj_dir]/lib
###     file delete -force $local_lib
###     file mkdir $local_lib
### 
###     mw_add_libdir $local_lib
###     mw_add_libdir $mw_hdl_dir/library
###     
### }
### proc mw_add_libdir { libdir } {
###     set proj_libs [get_property ip_repo_paths [current_fileset]]
###     lappend proj_libs $libdir
###     set proj_libs [lsort -unique $proj_libs]
###     set_property ip_repo_paths $proj_libs [current_fileset]
###     update_ip_catalog
### }
### proc mw_create_wrapper { {makeTop true} } {
###     if {[mw_get_build_target "wrapper"]} {
###         set BDFILEPATH [get_files -quiet system.bd]
###         make_wrapper -files $BDFILEPATH -top
###         # Try adding Block design filepath to naviagate & generate top wrapper
###         regsub -all "system.bd" [get_files -quiet system.bd] "hdl" TOPFILEPATH
###         catch {
###             add_files -norecurse $TOPFILEPATH
###             update_compile_order -fileset sources_1
###             }
###         if { $makeTop } {
###             set_property top system_wrapper [current_fileset]
###         }
###     }
### }
### proc mw_build_all {} {
###     mw_create_wrapper
###     mw_project_run
### }
### proc mw_project_run {} {
###     if {[mw_get_build_target "bdgen"]} {
###         mw_bd_generate
###     }
###     if {[mw_get_build_target "handoff"]} {
###         mw_gen_ps_init
###     }
###     if {[mw_get_build_target "fsbl"]} {
###         mw_create_fsbl
###     }
###     if {[mw_get_build_target "bitstream"]} {
###         mw_build_bit
###     }
### }
### proc mw_bd_generate {} {
###     set BDFILEPATH [get_files -quiet system.bd]
###     generate_target all $BDFILEPATH
### }
### proc mw_build_bit {} {
### 
###     set curdir [pwd]
###     cd [mw_get_proj_dir]
###     set project_name [get_property name [current_project]]
###     set top [get_property top [current_fileset]]
###     set bit_file ./${project_name}.runs/impl_1/${top}.bit
### 
###     launch_runs synth_1
###     wait_on_run synth_1
###     open_run synth_1
###     report_timing_summary -file timing_synth.log
### 
###     launch_runs impl_1 -to_step write_bitstream
###     wait_on_run impl_1
###     open_run impl_1
###     report_timing_summary -file timing_impl.log
### 
###     if [expr [get_property SLACK [get_timing_paths -delay_type min_max]] < 0] {
###         mw_error "Timing Constraints NOT met."
###     } else {
###         puts "-----------------------------------------------"
###         puts "SUCCESS: Bitstream generation complete."
###         puts "-----------------------------------------------"    
###     }
### 
###     file copy -force $bit_file [mw_get_output_dir]/system.bit
###     cd $curdir
### }
### proc mw_create_hdf {} {
###     set project_dir [mw_get_proj_dir]
###     set project_name [get_property name [current_project]]
###     set workspace ${project_dir}/${project_name}.sdk/
###     set hwdef $workspace/system.hdf
### 
###     file delete -force -- $workspace
###     file mkdir $workspace
### 
###     write_hwdef  -file $hwdef
### 
###     return $hwdef
### }
### proc mw_gen_ps_init {} {
###     set curdir [pwd]
###     set handoff_dir [mw_get_output_dir]/handoff
### 
###     file delete -force -- $handoff_dir
###     file mkdir $handoff_dir
### 
###     set hdfpath [mw_create_hdf]
###     set workspace [file dirname $hdfpath]
###     set hdf [file tail $hdfpath]
### 
###     cd $workspace
### 
###     # Generate the ps init files
###     hsi::open_hw_design $hdf
###     hsi::close_hw_design [hsi::current_hw_design]
### 
###     cd $curdir
### 
###     # Copy to the handoff dir
###     file copy {*}[glob ${workspace}/*gpl*] $handoff_dir/
### }
### proc mw_create_fsbl {} {
### 
###     global commonDir  
### 
###     set hdfpath [mw_create_hdf]
###     set workspace [file dirname $hdfpath]
###     set hdf [file tail $hdfpath]
### 
###     set elf_file $workspace/fsbl/executable.elf
###     set XSDK_PATH $::env(XILINX_SDK)
###     
###     set curdir [pwd]
###     
###     cd $workspace
###     hsi::open_hw_design $hdf
###     hsi::set_repo_path ${XSDK_PATH}/data/embeddedsw
###     [mw_project_get xsdk_proc]
###     
###     cd $curdir
###     
###     
###     foreach bin [mw_project_get xsdk_binaries] {
###         set binFile ${workspace}/${bin}
###         set outFile [string map {/ _} $bin]
###         file copy -force $binFile [mw_get_output_dir]/${outFile}
###     }
### }
### proc mw_create_zynq_fsbl {} {
###     set procs [hsi::get_cells -filter {IP_TYPE==PROCESSOR}] 
###     hsi::generate_app -hw [hsi::current_hw_design] -proc [lindex $procs 0] -app zynq_fsbl -os standalone -sw fsbl -dir fsbl -compile
### }
### proc mw_create_zynqmp_fsbl {} {
###     set procs [hsi::get_cells -filter {IP_TYPE==PROCESSOR && NAME =~ "*a53*"}] 
###     hsi::generate_app -hw [hsi::current_hw_design] -proc [lindex $procs 0] -app zynqmp_fsbl -os standalone -sw fsbl -dir fsbl -compile
###     hsi::generate_app -hw [hsi::current_hw_design] -proc psu_pmu_0 -app zynqmp_pmufw -os standalone -sw pmufw -dir pmufw -compile
###     exec mb-objcopy -O binary pmufw/executable.elf pmufw/executable.bin
### }
### proc mw_env_path_var {varname envname} {
###     global $varname
###  
###     if { ! [info exist $varname] } {
###         if  { [info exists ::env($envname)] } {
###             set $varname $::env($envname)
###         } else {
###             mw_error "Neither tcl variable $varname or environment variable $envname are set"
###         }   
###     }
###     set $varname [file normalize [set $varname]]
### }
### proc mw_get_proj_dir {} {
###     return [get_property DIRECTORY [current_project]]
### }
### proc mw_get_output_dir {} {
###     return [mw_get_proj_dir]/output
### }
### proc mw_error { msg } {
###     puts "-----------------------------------------------"
###     puts "ERROR: ${msg}"
###     puts "-----------------------------------------------"
###     error_on_bad_command
### }
### global mw_hdl_dir
### global commonDir
### set commonDir [file normalize [file dirname [file dirname [file dirname [info script]]]]]
### set mw_hdl_dir [file normalize [file dirname $commonDir]]
### source $commonDir/scripts/xilinx/mw_project_config.tcl
#### package require cmdline
#### proc mw_parse_cmdline {} {
####     global mw_project_params
####     global mw_project_usage
####     global mw_project_options
#### 
####     if { [info exists mw_project_options] } {
####         return
####     }
#### 
####     set mw_targets [list "bitstream" "fsbl" "wrapper" "bd"]
####     set mw_targets_help_str [join [list "Choose the build target:" [join $mw_targets ","]]]
#### 
####     set tvar_help_str "Set tcl vars in the format VARNAME1:VALUE1 VARNAME2:VALUE2 ..."
####     
####     set mw_project_params [list \
####         [list "target.arg" "bitstream" $mw_targets_help_str] \
####         [list "tvar.arg" "" $tvar_help_str] \
####     ]
#### 
####     set mw_project_usage "MathWorks Vivado Build Options"
####     if {[catch {array set options [cmdline::getoptions ::argv $mw_project_params $mw_project_usage]}]} {
####         puts [cmdline::usage $mw_project_params $mw_project_usage]
####         exit 0
####     } 
####     
####     set mw_project_options [array get options]
####     mw_check_cmdline_arg "target" $mw_targets
####     mw_set_tcl_vars
#### }
#### proc mw_set_tcl_vars {} {
####     set varlist [split [mw_get_opt tvar] " "]
####     foreach var $varlist {
####         set avpair [split $var ":"]
####         set name [lindex $avpair 0]
####         set val [lindex $avpair 1]
####         global $name
####         set $name $val
####     }
#### }
#### proc mw_check_cmdline_arg {argname {legal_vals [list]}} {
####     global mw_project_params
####     global mw_project_usage
#### 
####     set arg_val [mw_get_opt $argname]
#### 
####     if {[llength $legal_vals] != 0} {
####         if {[lsearch -exact $legal_vals $arg_val] == -1 } {
####             puts "Error: Invalid setting for '$argname': $arg_val"
####             puts [cmdline::usage $mw_project_params $mw_project_usage]
####             exit -1
####         }
####     }
####     return $arg_val
#### }
#### proc mw_get_opt {option} {
####     global mw_project_options
####     return [dict get $mw_project_options $option]
#### }
#### proc mw_set_build_target {tgt mode} {
####     if { $mode } {
####         mw_project_set "build_target_${tgt}" 1
####     } else {
####         mw_project_set "build_target_${tgt}" 0
####     }
#### }
#### proc mw_get_build_target {tgt} {
####     return [mw_project_get "build_target_${tgt}"]
#### }
#### proc mw_init_build_target {} {
####     global mw_project_build_target
#### 
####     mw_set_build_target "bitstream" 0
####     mw_set_build_target "fsbl" 0
####     mw_set_build_target "wrapper" 0
####     mw_set_build_target "bdgen" 0
####     mw_set_build_target "handoff" 0
#### }
#### proc mw_config_build_target {} {
####     if  { [mw_get_build_target "bitstream"] == "" } {
####         mw_init_build_target
#### 
####         set tgt [mw_get_opt "target"]
####         switch $tgt {
####             "bitstream" {
####                 mw_set_build_target "bitstream" 1
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 1
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }    
####             "fsbl" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 1
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }    
####             "wrapper" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 0
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }
####             "bd" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 0
####                 mw_set_build_target "wrapper" 0
####                 mw_set_build_target "bdgen" 0
####             }        
####         }
####     }
#### }
#### mw_parse_cmdline
#### mw_config_build_target
### source $commonDir/scripts/xilinx/mw_bd.tcl
#### source $commonDir/scripts/xilinx/mw_bd_zynq.tcl
##### proc mw_default_bd_zynq { {core_freq 50.0} } {
#####     set curdir [pwd]
#####     cd [mw_get_proj_dir]
##### 
#####     # create board design
#####     create_bd_design "system"
##### 
#####     # GND and VCC nets    
#####     set const_vcc_inst [mw_create_const vcc 1 1]
##### 
#####     set const_gnd_inst [mw_create_const gnd 1 0]
##### 
#####     # Create the CPU interconnect
#####     set axi_cpu_interconnect [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* axi_cpu_interconnect]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $axi_cpu_interconnect
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $axi_cpu_interconnect
#####     mw_project_set axi_cpu_interconnect $axi_cpu_interconnect
#####     
#####     # instance: sys_cpu
#####     mw_zynq_add_cpu
##### 
#####     set core_clkwiz [mw_create_clockwiz core sys_100m_clk proc_100m_resetn $core_freq]
##### 
#####     set sys_core_clk_source [get_bd_pins core_clkwiz/clk_out1]
#####     connect_bd_net -net sys_core_clk $sys_core_clk_source
#####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
##### 
#####     set sys_core_rstgen [mw_rstsync sys_core sys_core_clk proc_100m_resetn core_clkwiz/locked]
#####     set sys_100m_rstgen [mw_rstsync sys_100m sys_100m_clk proc_100m_resetn]
#####     set sys_200m_rstgen [mw_rstsync sys_200m sys_200m_clk proc_200m_resetn]
#####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
#####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
#####     
#####     # interface connections
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins axi_cpu_interconnect/ACLK]
#####     connect_bd_net -net /sys_100m_resetn [get_bd_pins axi_cpu_interconnect/ARESETN]
##### 
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins axi_cpu_interconnect/S00_ACLK]
#####     connect_bd_net -net /sys_100m_resetn [get_bd_pins axi_cpu_interconnect/S00_ARESETN]
##### 
#####     connect_bd_net -net /sys_core_clk [get_bd_pins axi_cpu_interconnect/M00_ACLK]
#####     connect_bd_net -net /sys_core_resetn [get_bd_pins axi_cpu_interconnect/M00_ARESETN]
##### 
#####     
#####     cd $curdir
##### }
##### proc mw_zynq_add_cpu {} {
#####     switch [mw_project_get cpu_type] {
#####         zynqmp_arm {
#####             mw_zynqmp_add_ps
#####         }
#####         zynq7_arm {
#####             mw_zynq_add_ps7
#####         }
#####     }
##### }
##### proc mw_zynqmp_add_ps {} {
#####     
#####     set sys_cpu  [create_bd_cell -type ip -vlnv xilinx.com:ip:zynq_ultra_ps_e:* sys_cpu]
#####     apply_bd_automation -rule xilinx.com:bd_rule:zynq_ultra_ps_e -config {apply_board_preset "1"} $sys_cpu    
#####     set_property CONFIG.PSU__CRL_APB__PL0_REF_CTRL__FREQMHZ {100} $sys_cpu
#####     set_property CONFIG.PSU__USE__IRQ0 {1} $sys_cpu
#####     set_property CONFIG.PSU__USE__M_AXI_GP0 {1} $sys_cpu
#####     set_property CONFIG.PSU__USE__M_AXI_GP1 {0} $sys_cpu
#####     mw_project_set sys_cpu $sys_cpu
#####     
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {8}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 8} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net [get_bd_pins intr_concat/dout] [get_bd_pins sys_cpu/pl_ps_irq0]
#####     
#####     # system reset/clock definitions
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_cpu/pl_clk0]
#####     connect_bd_net -net proc_100m_resetn [get_bd_pins sys_cpu/pl_resetn0]
#####     
#####     
#####     set proc_clkwiz [mw_create_clockwiz proc sys_100m_clk proc_100m_resetn 200]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins proc_clkwiz/clk_out1]
#####     mw_rstsync proc_200m sys_200m_clk proc_100m_resetn proc_clkwiz/locked
#####     
#####     # Clocks and interconnects
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins sys_cpu/maxihpm0_fpd_aclk]
#####     connect_bd_intf_net -intf_net axi_cpu_interconnect_s00_axi [get_bd_intf_pins axi_cpu_interconnect/S00_AXI] [get_bd_intf_pins sys_cpu/M_AXI_HPM0_FPD]
#####     
#####     mw_project_set sys_addr_cntrl_space [get_bd_addr_spaces sys_cpu/Data]
#####     
##### }
##### proc mw_zynq_add_ps7 {} {
#####     
#####     set sys_cpu  [create_bd_cell -type ip -vlnv xilinx.com:ip:processing_system7:* sys_cpu]
#####     apply_bd_automation -rule xilinx.com:bd_rule:processing_system7 -config {make_external "FIXED_IO, DDR" apply_board_preset "1"} $sys_cpu
#####     mw_project_set sys_cpu $sys_cpu
#####     
#####     set_property -dict [list CONFIG.PCW_USE_M_AXI_GP0 {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_EN_CLK1_PORT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_EN_RST1_PORT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ {100.0}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_FPGA1_PERIPHERAL_FREQMHZ {200.0}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_USE_FABRIC_INTERRUPT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_IRQ_F2P_INTR {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_GPIO_EMIO_GPIO_ENABLE {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_GPIO_EMIO_GPIO_IO {32}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_TTC0_PERIPHERAL_ENABLE {0}] $sys_cpu
##### 
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {16}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 16} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net [get_bd_pins intr_concat/dout] [get_bd_pins sys_cpu/IRQ_F2P]
##### 
#####     # system reset/clock definitions
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_cpu/FCLK_CLK0]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins sys_cpu/FCLK_CLK1]
#####     connect_bd_net -net proc_100m_resetn [get_bd_pins sys_cpu/FCLK_RESET0_N]
#####     connect_bd_net -net proc_200m_resetn [get_bd_pins sys_cpu/FCLK_RESET1_N]
#####     
#####     # Clocks and interconnects
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins sys_cpu/M_AXI_GP0_ACLK]
#####     connect_bd_intf_net -intf_net axi_cpu_interconnect_s00_axi [get_bd_intf_pins axi_cpu_interconnect/S00_AXI] [get_bd_intf_pins sys_cpu/M_AXI_GP0]
#####     
#####     mw_project_set sys_addr_cntrl_space [get_bd_addr_spaces sys_cpu/Data]
##### }
##### proc mw_add_cpu_axi_slave {{port 0} {ic_name {}} {clk sys_core_clk} {rstn sys_core_resetn}} {
#####     set cpu_type [mw_project_get cpu_type]
#####     set cpu_name [get_property "name" [mw_get_cpu]]
#####     switch $cpu_type {
#####         zynqmp_arm {
#####             set gpport [expr {$port + 2}]
#####             set_property -dict [list CONFIG.PSU__USE__S_AXI_GP${gpport} {1}] [mw_get_cpu]
#####             set slave_clk_pin [get_bd_pins ${cpu_name}/saxihp${port}_fpd_aclk]
#####             set slave_intf_pin [get_bd_intf_pins ${cpu_name}/S_AXI_HP${port}_FPD]
#####             set slave_seg [get_bd_addr_segs ${cpu_name}/SAXIGP${gpport}/HP${port}_DDR_LOW]
#####         }
#####         zynq7_arm {
#####             set_property -dict [list CONFIG.PCW_USE_S_AXI_HP${port} {1}] [mw_get_cpu]
#####             set slave_clk_pin [get_bd_pins ${cpu_name}/S_AXI_HP${port}_ACLK]
#####             set slave_intf_pin [get_bd_intf_pins ${cpu_name}/S_AXI_HP${port}]
#####             set slave_seg [get_bd_addr_segs ${cpu_name}/S_AXI_HP${port}/HP${port}_DDR_LOWOCM]
#####         }
#####         default {
#####             mw_error "Unsupported CPU type: $cpu_type"
#####         }
#####     }
#####     
#####     mw_connect_pin $clk $slave_clk_pin
##### 
#####     if { [llength $ic_name] == 0 } {
#####         set ic_name axi_cpu_slave_ic_${port}
#####     }
##### 
#####     set ic [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* $ic_name]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $ic
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $ic
#####     set_property -dict [list CONFIG.M00_HAS_REGSLICE {4}] $ic
##### 
#####     mw_connect_pin ${clk} ${ic_name}/ACLK
#####     mw_connect_pin ${rstn} ${ic_name}/ARESETN
#####     
#####     mw_connect_pin ${clk} ${ic_name}/M00_ACLK
#####     mw_connect_pin ${rstn} ${ic_name}/M00_ARESETN
#####     mw_connect_pin ${ic_name}/M00_AXI $slave_intf_pin
#####     
#####     return [list $ic $slave_seg ]
##### }
#### source $commonDir/scripts/xilinx/mw_bd_fpga.tcl
##### proc mw_default_bd_pcie { {core_freq 50.0} } {
#####     set curdir [pwd]
#####     cd [mw_get_proj_dir]
#####     # create board design
#####     create_bd_design "system"
##### 
#####     global sys_pcie
##### 
#####     global pcie_int_input
#####     global pcie_core
#####     global pcie_perst_n
#####     global pcie_axi_clk
#####     global pcie_m_axi
#####     global pcie_s_axi
#####     global pcie_s_axi_ctl
##### 
#####     global commonDir
##### 	
##### 	global BOARD_DEBUG
#####     
#####     
#####     # Add the pcie contraints (if they exist)
#####     set pcie_constr [mw_project_get boardDir]/xdc/pcie.xdc
#####     if { [file exists $pcie_constr] } {
#####         add_files -norecurse -fileset sources_1 $pcie_constr
#####     }
#####     
#####     # load the board data
#####     source [mw_project_get boardDir]/tcl/board_bd.tcl
##### 
#####     # GND and VCC nets
#####     set const_vcc_inst [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* const_vcc_inst]
#####     connect_bd_net -net const_vcc [get_bd_pins const_vcc_inst/dout] 
##### 
#####     set const_gnd_inst [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* const_gnd_inst]
#####     set_property -dict [list CONFIG.CONST_VAL {0}] $const_gnd_inst
#####     connect_bd_net -net const_gnd [get_bd_pins const_gnd_inst/dout] 
##### 
#####     # Create PCIe core
##### 
#####     set sys_pcie [board_setup_pcie]
#####     
#####     mw_project_set sys_cpu $sys_pcie
#####     
#####     # Create the fixed 100/200 MHz clocks
#####     set sys_clkwiz [mw_create_clockwiz sys $pcie_axi_clk pcie_axi_resetn 100.0]
#####     set_property -dict [list CONFIG.CLKOUT2_USED {true}] $sys_clkwiz
#####     set_property -dict [list CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {200.0}] $sys_clkwiz
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_clkwiz/clk_out1]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins sys_clkwiz/clk_out2]
##### 
#####     set sys_100m_rstgen [mw_rstsync sys_100m sys_100m_clk $pcie_perst_n sys_clkwiz/locked]
#####     set sys_200m_rstgen [mw_rstsync sys_200m sys_200m_clk $pcie_perst_n sys_clkwiz/locked]
##### 
##### 
#####     # Create the core clock
#####     set core_clkwiz [mw_create_clockwiz core $pcie_axi_clk pcie_axi_resetn $core_freq]
#####     set sys_core_clk_source [get_bd_pins core_clkwiz/clk_out1]
#####     connect_bd_net -net sys_core_clk $sys_core_clk_source
#####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
##### 
#####     set sys_core_rstgen [mw_rstsync sys_core sys_core_clk $pcie_perst_n core_clkwiz/locked]
#####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
#####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
##### 
#####     # Create interrupt controller
#####     set axi_intc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:* axi_intc ]
#####     set_property -dict [ list CONFIG.C_IRQ_IS_LEVEL {0} ] $axi_intc
#####     set_property CONFIG.C_KIND_OF_EDGE.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_KIND_OF_LVL.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_KIND_OF_INTR.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_IRQ_CONNECTION 1 $axi_intc
##### 	connect_bd_net -net $pcie_int_input [get_bd_pins axi_intc/irq]
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins axi_intc/s_axi_aclk]
#####     connect_bd_net -net pcie_axi_resetn [get_bd_pins axi_intc/s_axi_aresetn]
##### 
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {32}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 32} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net -net intr_concat_dout [get_bd_pins axi_intc/intr] [get_bd_pins intr_concat/dout]
#####     mw_project_set intr_concat $intr_concat
#####     
#####     
#####     # Create the CPU Interconnect
#####     set axi_cpu_interconnect [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* axi_cpu_interconnect]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $axi_cpu_interconnect
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $axi_cpu_interconnect
#####     mw_project_set axi_cpu_interconnect $axi_cpu_interconnect
##### 
##### 
#####     # interface connections  
#####     board_connect
##### 
#####     connect_bd_net -net /sys_core_clk [get_bd_pins axi_cpu_interconnect/M00_ACLK]
#####     connect_bd_net -net /sys_core_resetn [get_bd_pins axi_cpu_interconnect/M00_ARESETN]
##### 
#####     mw_add_cpu_slave axi_intc 0x1000000
##### 
##### 	if { [info exists BOARD_DEBUG] && $BOARD_DEBUG } {
##### 		board_enable_debug
##### 	}
##### 	
#####     cd $curdir
##### }
##### proc mw_get_pcie_slave_ic {} {
#####     global pcie_s_axi
#####     global pcie_axi_clk
##### 
#####     set ic_name pcie_axi_slave_interconnect
#####     set ic [get_bd_cells -quiet $ic_name]
#####     if { [llength $ic] > 0 } {
#####         return $ic
#####     }
##### 
#####     set ic [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* $ic_name]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $ic
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $ic
#####     set_property -dict [list CONFIG.M00_HAS_REGSLICE {4}] $ic
##### 
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins ${ic_name}/ACLK] 
#####     connect_bd_net -net pcie_axi_interconnect_resetn [get_bd_pins ${ic_name}/ARESETN] 
##### 
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins ${ic_name}/M00_ACLK] 
#####     connect_bd_net -net pcie_axi_resetn [get_bd_pins ${ic_name}/M00_ARESETN]
##### 
#####     connect_bd_intf_net [get_bd_intf_pins ${ic_name}/M00_AXI] $pcie_s_axi
#####     
#####     return $ic
##### }
##### proc mw_get_pcie_axi_slave_ports { {num_ports 1} {clk_domain pcie_axi} } {
##### 
#####     set ic [mw_get_pcie_slave_ic]
#####     set ic_name [get_property NAME $ic]
#####     
#####     set ports []
#####     set found_ports 0
#####     set MAX_MASTER_PORTS 16
#####     
#####     for {set idx 0} {$idx < $MAX_MASTER_PORTS} {incr idx} {
#####         set SI_IDX [format %02d $idx]
#####         set NUM_SI [get_property CONFIG.NUM_SI $ic]
#####         set if_pin [get_bd_intf_pins -quiet ${ic_name}/S${SI_IDX}_AXI]
#####         if { [llength [get_bd_intf_nets -quiet -of_objects $if_pin]] == 0 } {
#####             lappend ports $if_pin
#####             incr found_ports
#####             mw_connect_pin [get_bd_pins ${ic_name}/S${SI_IDX}_ACLK] ${clk_domain}_clk
#####             mw_connect_pin [get_bd_pins ${ic_name}/S${SI_IDX}_ARESETN] ${clk_domain}_resetn
#####         }
#####         if {$found_ports == $num_ports} {
#####             break
#####         }
#####         if { $NUM_SI == [expr $SI_IDX + 1] } {
#####             mw_add_ic_slave_port $ic
#####         }
#####     }
#####     
#####     if { $found_ports != $num_ports } {
#####         mw_error "Could not find $num_ports slave ports"
#####     }
#####     return $ports
#####     
#####     return $ports
##### }
#### proc mw_default_bd { {core_freq 50.0} } {
####     switch [mw_project_get cpu_type] {
####         zynqmp_arm -
####         zynq7_arm {
####             mw_default_bd_zynq $core_freq
####         }
####         kintex7_pcie {
####             mw_default_bd_pcie $core_freq
####         }
####     }
#### }
#### proc mw_create_clockwiz { name srcclk srcrst clk_freq } {
####     set clkwiz_name "${name}_clkwiz"
####     set clkwiz [create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:* $clkwiz_name]
####     set_property -dict [list CONFIG.PRIM_SOURCE {Global_buffer}] $clkwiz
####     set_property -dict [list CONFIG.RESET_TYPE {ACTIVE_LOW}] $clkwiz
####     set_property -dict [list CONFIG.CLKOUT1_REQUESTED_OUT_FREQ $clk_freq] $clkwiz
####     connect_bd_net -net [mw_getnet $srcclk] [get_bd_pins $clkwiz_name/clk_in1]
####     connect_bd_net -net [mw_getnet $srcrst] [get_bd_pins $clkwiz_name/resetn]
#### 
####     return $clkwiz
#### 
#### }
#### proc mw_create_dummy_slave { {ic_port 0} } {
#### 
####     set dummy_name axi_gpio_dummy_0
####     set dummy_obj [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:* $dummy_name]
####     set_property -dict [list CONFIG.C_GPIO_WIDTH {1} CONFIG.C_ALL_OUTPUTS {1}] $dummy_obj
####     set_property -dict [list CONFIG.C_GPIO2_WIDTH {1} CONFIG.C_IS_DUAL {1} CONFIG.C_ALL_INPUTS_2 {1}] $dummy_obj
#### 
####     mw_connect_pin [mw_project_get ipcore_clk_net] $dummy_name/s_axi_aclk
####     mw_connect_pin [mw_project_get ipcore_rstn_net] $dummy_name/s_axi_aresetn
####     mw_connect_pin $dummy_name/gpio_io_o $dummy_name/gpio2_io_i
####     
####     mw_add_cpu_slave $dummy_name [mw_project_get mw_ip_baseaddr] $ic_port
####     
####     return $dummy_obj
#### }
#### proc mw_add_axi_dma {name {rd_en 1} {wr_en 1}} {
####     set axi_dma [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:* $name ]
####     set_property -dict [ list CONFIG.c_sg_include_stscntrl_strm {0}  ] $axi_dma
#### 
####     if {!$rd_en} {
####         set_property -dict [list CONFIG.c_include_mm2s {0}] $axi_dma
####     }
#### 
####     if {!$wr_en} {
####         set_property -dict [list CONFIG.c_include_s2mm {0}] $axi_dma
####     }
#### 
####     return $axi_dma
#### }
#### proc mw_get_sys_addr_cntrl_space {} {
####     set addr_space [mw_project_get sys_addr_cntrl_space]
####     
####     if { [llength $addr_space] == 0 } {
####         set sys_cpu [mw_get_cpu]
####         set addr_space [get_bd_addr_spaces -of_objects $sys_cpu]
####     }
####     
####     if { [llength $addr_space] == 0 } {
####         set addr_space [get_bd_addr_spaces -filter "PATH =~ [mw_get_cpu]/Data"]
####     }
####     
####     return $addr_space
#### }
#### proc mw_bd_export {filename} {
####     save_bd_design
####     #validate block design is commented since vivado 2017.4 error out unconnected AXI Master interface g1732687 
####     #validate_bd_design
#### 
####     write_bd_tcl [mw_get_output_dir]/$filename
#### }
#### proc mw_add_ic_slave_port { ic } {
####     set ic_name [get_property NAME $ic]
####     
####     set NUM_SI [get_property CONFIG.NUM_SI $ic]
####     set NUM_SI [expr $NUM_SI + 1]
####     set SI_IDX [format %02d [expr $NUM_SI -1]]
####     set_property -dict [list CONFIG.NUM_SI $NUM_SI] $ic
####     set_property -dict [list CONFIG.S${SI_IDX}_HAS_REGSLICE {4}] $ic
#### }
#### proc mw_add_interconnect_slave {ic_name bd_slave {ic_port "auto"} {regslice 4} {datafifo 0}} {
#### 
####     set ic_obj [get_bd_cells $ic_name]
####     set slave_info [mw_s_axi_info $bd_slave]
####     set dst_port [get_bd_intf_pins [lindex $slave_info 0]]
####     set clk_net [get_bd_nets -of_objects [lindex $slave_info 1]]
####     set rst_net [get_bd_nets -of_objects [lindex $slave_info 2]]
#### 
####     set NUM_MI [get_property CONFIG.NUM_MI $ic_obj]
####     if {$ic_port == "auto"} {
####         set ic_port $NUM_MI
####     }
####     if { $NUM_MI <= $ic_port } {
####         set NUM_MI [expr $ic_port + 1]
####         set_property -dict [list CONFIG.NUM_MI $NUM_MI] $ic_obj
####     }
####     set MI_IDX [format %02d $ic_port]
#### 
####     set_property -dict [list CONFIG.M${MI_IDX}_HAS_REGSLICE $regslice] $ic_obj
####     set_property -dict [list CONFIG.M${MI_IDX}_HAS_DATA_FIFO $datafifo] $ic_obj 
#### 
####     set m_clk_pin [get_bd_pins ${ic_name}/M${MI_IDX}_ACLK]
####     set m_rst_pin [get_bd_pins ${ic_name}/M${MI_IDX}_ARESETN]
#### 
####     mw_disconnect_pin ${ic_name}/M${MI_IDX}_AXI
####     mw_disconnect_pin $m_clk_pin
####     mw_disconnect_pin $m_rst_pin
####     connect_bd_net -net $clk_net $m_clk_pin
####     connect_bd_net -net $rst_net $m_rst_pin
####     
####     connect_bd_intf_net [get_bd_intf_pins ${ic_name}/M${MI_IDX}_AXI] $dst_port
#### 
#### }
#### proc mw_add_cpu_slave {bd_slave offset {ic_port "auto"} {regslice 4} {datafifo 0}} {
####     mw_add_interconnect_slave [mw_project_get axi_cpu_interconnect] $bd_slave $ic_port $regslice $datafifo 
####     
####     set slave_info [mw_s_axi_info $bd_slave]
####     set addr_seg [lindex $slave_info 3]
####     # Minimum range is 4k
####     set range [expr max([get_property RANGE $addr_seg],4096)]
####     create_bd_addr_seg -range $range -offset $offset [mw_get_sys_addr_cntrl_space]  $addr_seg  SEG_data_${bd_slave}
#### }
#### proc mw_s_axi_info {bd_cell_name} {
####     set bd_cell [get_bd_cells $bd_cell_name]
####     set s_axi [get_bd_intf_pins -filter \
####     "MODE == Slave  && VLNV == xilinx.com:interface:aximm_rtl:1.0" \
####     -of_objects $bd_cell]
####     set s_axi_pin [lrange [split $s_axi "/"] end end]
####     set s_axi_clk [get_bd_pins -filter "TYPE == clk && (CONFIG.ASSOCIATED_BUSIF == ${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ ${s_axi_pin}:* || CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin}:*)" -quiet -of_objects $bd_cell]
####     set s_axi_clk [get_bd_pins [mw_list_reduce $s_axi_clk ".*${s_axi_pin}.*"]]
####     set s_axi_rst [get_bd_pins -filter "TYPE == rst && (CONFIG.ASSOCIATED_BUSIF == ${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ ${s_axi_pin}:* || CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin}:*)" -quiet -of_objects $bd_cell]
####     if {($s_axi_clk ne "") && ($s_axi_rst eq "")} {
####         set s_axi_rst [get_property CONFIG.ASSOCIATED_RESET [get_bd_pins ${s_axi_clk}]]
####         if {$s_axi_rst ne ""} {
####             set s_axi_rst [get_bd_pins ${bd_cell_name}/$s_axi_rst]
####         }
####         if {$s_axi_rst eq ""} {
####             # Find a reset pin with the same root
####             set clkPin [lrange [split $s_axi_clk "/"] end end]
####             set clkRoot ""
####             regexp -all "(.*?)_?\[:alpha:\]*clk.*" $clkPin -> clkRoot
####             set s_axi_rst [get_bd_pins -of_objects $bd_cell -regexp -filter [subs -nobackslashes -nocommands {NAME =~ ".*${clkRoot}.*re?se?t.*"}]]
####         }
####     }
####     if {$s_axi_rst eq ""} {
####         # Find any reset pin
####         set s_axi_rst [get_bd_pins -of_objects $bd_cell -regexp -filter {NAME =~ ".*re?se?t.*"}]
####     }
####     set s_axi_rst [get_bd_pins [mw_list_reduce $s_axi_rst ".*${s_axi_pin}.*"]]
#### 
####     set s_addr_seg [get_bd_addr_segs -of_objects [get_bd_intf_pins $s_axi]]
#### 
####     return [list $s_axi $s_axi_clk $s_axi_rst $s_addr_seg]
#### }
#### proc mw_create_const {name width value} {
####     set const_name const_${name}
####     set const_block [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* $const_name]
####     set_property -dict [list CONFIG.CONST_WIDTH $width] $const_block
####     set_property -dict [list CONFIG.CONST_VAL $value] $const_block
####     connect_bd_net -net $const_name [get_bd_pins ${const_name}/dout]
####     
####     return $const_block
#### }
#### proc mw_logic {name op in1 {out {}} {in2 {}} {size 1} } {
####     set lname logic_${op}_${name}
####     
####     set logic_cell [create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:* $lname]
####     set_property -dict [list CONFIG.C_SIZE $size] $logic_cell
####     set_property -dict [list CONFIG.C_OPERATION $op] $logic_cell
####     connect_bd_net -net [mw_getnet $in1] [get_bd_pins $lname/Op1]
####     if { [llength $in2] > 0 } {
####         connect_bd_net -net [mw_getnet $in2] [get_bd_pins $lname/Op2]
####     }
####     if { [llength $out] > 0 } {
####         connect_bd_net -net [mw_getnet $out] [get_bd_pins $lname/Res]
####     } else {
####         connect_bd_net -net ${lname}_Res [get_bd_pins $lname/Res]
####     }
####     return [mw_getnet [get_bd_pins $lname/Res]]
#### }
#### proc mw_list_reduce {lst filter} {
####     if { [llength $lst] > 1 } {
####         set found_item [lsearch -inline -regexp $lst ${filter}]
####         if {[llength $found_item] > 0} {
####             set lst [lindex $found_item 0]
####         } else {
####             set lst [lindex $found_item 0]    
####         }
####     }
####     return $lst
#### }
#### proc mw_get_cpu {} {
####     set sys_cpu [mw_project_get sys_cpu]
####     if { [llength $sys_cpu] == 0 } {
####         set sys_cpu [get_bd_cells -hierarchical -filter {VLNV=~"xilinx.com:ip:processing_system7:*" || VLNV=~"xilinx.com:ip:zynq_ultra_ps_e:*"}]
####     }
####     return $sys_cpu
#### }
#### proc mw_get_intr_concat {{intr_num 0}} {
####     set intr_concat [mw_project_get intr_concat]
####     set cpu_type [mw_project_get cpu_type]
####     
####     if {[llength $intr_concat] == 0} {
####         # Find the INTC if needed
####         set cpu_name [get_property "name" [mw_get_cpu]]
####         switch $cpu_type {
####             zynqmp_arm {
####                 if { $intr_num < 8 } {
####                     set intr_ports ${cpu_name}/pl_ps_irq0
####                 } else {
####                     set intr_ports ${cpu_name}/pl_ps_irq1
####                 }
####             }
####             zynq7_arm {
####                 set intr_ports ${cpu_name}/IRQ_F2P
####             }
####             kintex7_pcie {
####                 set intr_ports 
####             }
####             default {
####                 mw_error "Unsupported CPU type: $cpu_type"
####             }
####         }
####         set irq_src [get_bd_pins -of_objects [mw_getnet $intr_ports] -filter {DIR == O}]
####         set intr_concat [get_bd_cells -of_objects $irq_src]
####     }
####     switch $cpu_type {
####         #Remap the interrupt number if needed
####         zynqmp_arm {
####             if { $intr_num >= 8 } {
####                 set intr_num [expr $intr_num - 8]
####             }
####         }
####     }
####     return [list $intr_concat $intr_num]
#### }
#### proc mw_connect_intr {src_pin intr_num} {
####     set intr_info [mw_get_intr_concat $intr_num]
####     set intr_concat [lindex $intr_info 0]
####     set intr_num [lindex $intr_info 1]
####     set intr_concat_name [get_property "name" $intr_concat]
####     
####     set intr_pin ${intr_concat_name}/In${intr_num}
####     mw_disconnect_pin $intr_pin
####     mw_connect_pin $src_pin $intr_pin
#### }
#### proc mw_rstsync {name sync_clk {ext_rst {} } {locked {} } } {
####     set rstgen_name ${name}_rstgen
####     set rstgen [create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:* $rstgen_name]
####     set_property -dict [list CONFIG.C_EXT_RST_WIDTH {1}] $rstgen
#### 
####     connect_bd_net -net [mw_getnet $sync_clk] [get_bd_pins ${rstgen_name}/slowest_sync_clk]
####     if { [llength $ext_rst] > 0 } {
####         connect_bd_net -net [mw_getnet $ext_rst] [get_bd_pins ${rstgen_name}/ext_reset_in]
####     }
####     if { [llength $locked] > 0 } {
####         connect_bd_net -net [mw_getnet $locked] [get_bd_pins ${rstgen_name}/dcm_locked]
####     }
#### 
####     connect_bd_net -net ${name}_resetn [get_bd_pins ${rstgen_name}/peripheral_aresetn]
####     connect_bd_net -net ${name}_interconnect_resetn [get_bd_pins ${rstgen_name}/interconnect_aresetn]
####     connect_bd_net -net ${name}_reset [get_bd_pins ${rstgen_name}/peripheral_reset]
#### 
####     return $rstgen
#### }
#### proc mw_getnet {pin_net {create_net true}} {
####     # check if its a pin or port
####     set pin [mw_get_pin_port $pin_net]
####     if { [llength $pin] == 0 } {
####         # check if its a net
####         set net [mw_get_net_from_name $pin_net]
####         if { [llength $net] == 0 } {
####             mw_error "Could not find pin/port/net: ${pin_net}"
####         } else {
####             return $net
####         }
####     }
####     # Found a pin or port, check if it's connected
####     set net [mw_get_net_of_pin $pin]    
####     # check if there's already a net attached
####     if { [llength $net] > 0 || ! $create_net} {
####         return $net
####     } else {
####         # create and attach a new net
####         
####         set netName [join [list [regsub {^[^[:alpha:]]} [regsub -all {/} $pin {_}] {}] "_net"] ""]
####         if { [mw_is_intf $pin] } {
####             set net [create_bd_intf_net ${netName}_intf]
####             connect_bd_intf_net -intf_net $net $pin
####         } else {
####             set net [create_bd_net $netName]
####             connect_bd_net -net $net $pin
####         }
####         return $net
####     }
#### }
#### proc mw_cleanup_orphans {{netlimit 1}} {
####     set cleaned 1
####     set iters 0
####     while {$cleaned > 0 && $iters < 5} {
####         set cleaned [mw_cleanup_orphan_cells]
####         incr cleaned [mw_cleanup_orphan_nets $netlimit]
####         incr iters
####     }
#### }
#### proc mw_cleanup_orphan_nets {{netlimit 1}} {
####     set netlimit [expr $netlimit + 1]
####     set allNets [get_bd_nets]
####     set cleaned 0
####     foreach net $allNets {
####         set pins [get_bd_pins -quiet -of_objects $net]
####         set ports [get_bd_ports -quiet -of_objects $net]
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections < $netlimit} {
####             puts "Deleting orphan net $net"
####             delete_bd_objs $net
####             incr cleaned
####         }
####     }
####     
####     set allNets [get_bd_intf_nets]
####     foreach net $allNets {
####         set pins [get_bd_intf_pins -quiet -of_objects $net]
####         set ports [get_bd_intf_ports -quiet -of_objects $net]
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections < $netlimit} {
####             puts "Deleting orphan net $net"
####             delete_bd_objs $net
####             incr cleaned
####         }
####     }
####     
####     return $cleaned
#### }
#### proc mw_cleanup_orphan_cells {} {
####     set allCells [get_bd_cells]
####     set cleaned 0
####     foreach cell $allCells {
####         if {[mw_cell_is_dangling $cell]} {
####             puts "Removing orphan cell $cell"
####             delete_bd_objs $cell
####             incr cleaned
####         }
####     }
####     return $cleaned
#### }
#### proc mw_cell_is_dangling {cell_name} {
####     set cell [get_bd_cells $cell_name]
####     set opins [get_bd_pins -of_objects $cell -filter {DIR == O} -quiet]
####     set onets [get_bd_nets -of_objects $opins -quiet]
####     set ipins [get_bd_pins -of_objects $onets -filter {DIR == I} -quiet]
####     
####     if {[llength $ipins] > 0} {
####         return false
####     }
####     
####     set ifpins [get_bd_intf_pins -of_objects $cell -quiet]
####     set ifnets [get_bd_intf_nets -of_objects $ifpins -quiet]
####     foreach ifn $ifnets {
####         set if_pins [get_bd_intf_pins -of_objects $ifn]
####         if {[llength $if_pins] > 1} {
####             return false
####         }
####     }
####     
####     return true
#### }
#### proc mw_is_intf {pin_net} {
####     set ipin [get_bd_intf_pins -quiet $pin_net]
####     set iports [get_bd_intf_ports -quiet $pin_net]
####     set inets [get_bd_intf_nets -quiet $pin_net]
####     set intf [expr [llength $ipin] + [llength $iports] + [llength $inets]]
####     if { $intf > 0 } {
####         return true 
####     } else {
####         return false
####     }
#### }
#### proc mw_get_net_of_pin {pin} {
####     set pin [mw_get_pin_port $pin]
####     set net [get_bd_nets -of_objects $pin -quiet]
####     if { [llength $net] == 0 } {
####         set net [get_bd_intf_nets -of_objects $pin -quiet]
####     }
####     return $net
#### }
#### proc mw_get_net_from_name {net_name} {    
####     set net [get_bd_nets -quiet $net_name]
####     if { [llength $net] == 0 } {
####         set net [get_bd_intf_nets -quiet $net_name]
####     }
####     return $net
#### }
#### proc mw_get_pin_port {pin_port} {
####     # check if its a port
####     set pin [get_bd_ports -quiet $pin_port]
####     if { [llength $pin] == 0 } {
####         # check if its a pin
####         set pin [get_bd_pins -quiet $pin_port]
####     }
####     
####     if { [llength $pin] == 0 } {
####         # check if its a intf pin
####         set pin [get_bd_intf_pins -quiet $pin_port]
####     }
####     
####     if { [llength $pin] == 0 } {
####         # check if its a intf port
####         set pin [get_bd_intf_ports -quiet $pin_port]
####     }
####     
####     return $pin
#### }
#### proc mw_is_input {pin_port} {
####     set pin [mw_get_pin_port $pin_port]
####     if { [llength $pin] == 0 } {
####         return 0
####     }
####     set dir [get_property DIR $pin]
####     if {$dir == "I"} {
####         return 1
####     } else {
####         return 0
####     }    
#### }
#### proc mw_is_net {pin_net} {
####     set net [mw_getnet $pin_net false]
####     if { [llength $net] > 0 } {
####         return true
####     } else {
####         return false
####     }
#### }
#### proc mw_connect_pin {pin_net1 pin_net2} {
####     
####     set isNet1 [mw_is_net $pin_net1]
####     set isNet2 [mw_is_net $pin_net2]
####     
####     if { $isNet1 && $isNet2 } {
####         mw_error "$pin_net1 and $pin_net2 both have existing nets"
####     }
####     
####     if { [mw_is_intf $pin_net1] } {
####         # Cannot have dangling nets on intf pins
####         connect_bd_intf_net [mw_get_pin_port $pin_net1] [mw_get_pin_port $pin_net2]
####         return
####     }
####     
####     if { ! ($isNet1 || $isNet2) } {
####         # No nets are attached, both are unconnected pins
####         if { [mw_is_input $pin_net1] } {
####             # Attach a net to the output pin
####             set netArg [mw_getnet $pin_net2]
####             # Connect to the input pin
####             set pinArg [mw_get_pin_port $pin_net1]
####         } else {
####             # Attach a net to the output pin
####             set netArg [mw_getnet $pin_net1]
####             # Connect to the input pin
####             set pinArg [mw_get_pin_port $pin_net2]
####         }
####     } elseif { $isNet1 } {
####         # Pin1 has a net attached
####         set netArg [mw_getnet $pin_net1]
####         # Connect to the other net
####         set pinArg [mw_get_pin_port $pin_net2]
####     } else {
####         # Pin2 has a net attached
####         set netArg [mw_getnet $pin_net2]
####         # Connect to the other net
####         set pinArg [mw_get_pin_port $pin_net1]
####     }
####     connect_bd_net -net $netArg $pinArg
#### }
#### proc mw_is_connected {pin} {
####     set pin_obj [mw_get_pin_port $pin]
####     set net [get_bd_nets -quiet -of_objects $pin_obj]
####     set intf_net [get_bd_intf_nets -quiet -of_objects $pin_obj]
####     set numConnections [expr [llength $net] + [llength $intf_net]]
####     if { $numConnections > 0 } {
####         return 1
####     } else {
####         return 0
####     }
#### }
#### proc mw_disconnect_pin {pin} {
####     set pin_obj [mw_get_pin_port $pin]
####     if { [mw_is_connected $pin_obj] } {
####         set net [mw_get_net_of_pin $pin_obj]
####         if {[mw_is_intf $pin_obj]} {
####             set pins [get_bd_intf_pins -quiet -of_objects $net]
####             set ports [get_bd_intf_ports -quiet -of_objects $net]
####         } else {
####             set pins [get_bd_pins -quiet -of_objects $net]
####             set ports [get_bd_ports -quiet -of_objects $net]
####         }
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections == 1 } {
####             delete_bd_objs $net
####         } else {
####             if {[mw_is_intf $pin_obj]} {
####                 disconnect_bd_intf_net $net $pin_obj
####             } else {
####                 disconnect_bd_net $net $pin_obj
####             }
####         }
####     }
#### }
#### proc mw_bd_set_project_defaults {} {
####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
####     mw_project_set axi_cpu_interconnect [get_bd_cells axi_cpu_interconnect]
####     mw_project_set sys_cpu [mw_get_cpu]
####     mw_project_set sys_addr_cntrl_space [mw_get_sys_addr_cntrl_space]
#### }
#### proc mw_bd_save {} {
####     regenerate_bd_layout
####     save_bd_design
####     #removing validate_bd_design for issues with Vivado 2017.4 regarding
####     #unconnected AXI4 master connnection
####     #validate_bd_design
####     save_bd_design
#### }
## source $commonDir/vendor/adi/xilinx/mw_adi_proj_helper.tcl
### set adi_xil_dir [file dirname [info script]]
### source $adi_xil_dir/mw_adi_env.tcl
#### mw_env_path_var ad_hdl_dir ADI_HDL_DIR
#### set ad_phdl_dir $ad_hdl_dir
#### set adi_xil_dir [file normalize [file dirname [info script]]]
#### set adi_vendor_dir [file dirname $adi_xil_dir]
### source $adi_xil_dir/mw_adi_ip_helper.tcl
#### set adi_xil_dir [file dirname [info script]]
#### source $adi_xil_dir/mw_adi_env.tcl
##### mw_env_path_var ad_hdl_dir ADI_HDL_DIR
##### set ad_phdl_dir $ad_hdl_dir
##### set adi_xil_dir [file normalize [file dirname [info script]]]
##### set adi_vendor_dir [file dirname $adi_xil_dir]
#### proc mw_adi_setup_libs {} {
####     global ad_hdl_dir
####     
####     mw_add_libdir $ad_hdl_dir/library
#### }
#### proc mw_adi_add_axi_dma {name {src_mode 0} {dst_mode 0}} {
####     set axi_dma [ create_bd_cell -type ip -vlnv analog.com:user:axi_dmac:* $name ]
####     set_property -dict [ list CONFIG.c_sg_include_stscntrl_strm {0}  ] $axi_dma
#### 
####     # Modes
####     # 0 = AXI MM
####     # 1 = AXIS
####     # 2 = FIFO
####     
####     set_property CONFIG.DMA_TYPE_DEST $dst_mode $axi_dma
####     set_property CONFIG.DMA_TYPE_SRC $src_mode $axi_dma
####     if { $dst_mode == 0} {
####         # Set to full AXI4 mode
####         set_property CONFIG.DMA_AXI_PROTOCOL_DEST {0} $axi_dma
####     }
####     if { $src_mode == 0} {
####         # Set to full AXI4 mode
####         set_property CONFIG.DMA_AXI_PROTOCOL_SRC {0} $axi_dma
####         set_property CONFIG.CYCLIC {true} $axi_dma
####     }
####     
####     return $axi_dma
#### }
#### proc setup_adi_dma {config} {
####     # Add the DMA Engine
#### 
####     set stream_width [dict get $config "stream_width"]
####     set direction [dict get $config "direction"]
####     set intr [dict get $config "intr"]
####     set addr_seg [dict get $config "addr_seg"]
####     set addr [dict get $config "addr"]
####     set ic_sg_port [dict get $config "ic_sg_port"]
####     set ic_mm_port [dict get $config "ic_mm_port"]
####     set m_clk [dict get $config "m_clk"]
####     set m_rstn [dict get $config "m_rstn"]
####     
####     if {$direction == "mm2s"} {
####         set src_mode 0
####         set dst_mode 1
####         set MM_direction src
####         set S_mode m
####     } else {
####         set src_mode 1
####         set dst_mode 0
####         set MM_direction dest
####         set S_mode s
####     }
#### 
####     set dma [mw_adi_add_axi_dma axi_dma_${direction} $src_mode $dst_mode]
####     set dma_name [get_property Name $dma]
####     # Connect the AXI4 Lite interface
####     mw_connect_pin $m_clk ${dma_name}/s_axi_aclk
####     mw_connect_pin $m_rstn ${dma_name}/s_axi_aresetn
####     mw_add_cpu_slave ${dma_name} $addr
####     
####     # Connect the MM interface
####     mw_connect_pin ${dma_name}/m_${MM_direction}_axi $ic_mm_port
####     mw_connect_pin $m_clk ${dma_name}/m_${MM_direction}_axi_aclk
####     mw_connect_pin $m_rstn ${dma_name}/m_${MM_direction}_axi_aresetn
####     # Connect the AXIS clock
####     mw_connect_pin $m_clk ${dma_name}/${S_mode}_axis_aclk
####     # Connect the interrupt
####     mw_connect_intr ${dma_name}/irq $intr
####     
####     #Configure the DMA Engine
####     if {$direction == "mm2s"} {
####         set_property CONFIG.DMA_DATA_WIDTH_DEST $stream_width $dma
####         set_property CONFIG.DMA_DATA_WIDTH_SRC 64 $dma
####     } else {
####         set_property CONFIG.DMA_DATA_WIDTH_DEST 64 $dma
####         set_property CONFIG.DMA_DATA_WIDTH_SRC $stream_width $dma
####     }
####     
####     set_property CONFIG.DMA_LENGTH_WIDTH 24 $dma
####     
####     # Assign the address space
####     assign_bd_address $addr_seg
#### 	return $dma_name
#### }
### set adi_board_has_hdmi true
### if { ![info exists mw_adi_boardname] } {
###     if { [info exists boardName] } {
###         set mw_adi_boardname $boardName
###     } else {
###         set mw_adi_boardname "NOBOARDSET"
###     }
### }
### source $ad_hdl_dir/projects/scripts/adi_project.tcl
#### variable p_board
#### variable p_device
#### variable sys_zynq
#### variable p_prcfg_init
#### variable p_prcfg_list
#### variable p_prcfg_status
#### if {![info exists REQUIRED_VIVADO_VERSION]} {
####   set REQUIRED_VIVADO_VERSION "2017.4.1"
#### }
#### if {[info exists ::env(ADI_IGNORE_VERSION_CHECK)]} {
####   set IGNORE_VERSION_CHECK 1
#### } elseif {![info exists IGNORE_VERSION_CHECK]} {
####   set IGNORE_VERSION_CHECK 0
#### }
#### set p_board "not-applicable"
#### set p_device "none"
#### set sys_zynq 1
#### set ADI_POWER_OPTIMIZATION 0
#### proc adi_project_xilinx {project_name {mode 0}} {
#### 
####   global ad_hdl_dir
####   global ad_phdl_dir
####   global p_board
####   global p_device
####   global sys_zynq
####   global REQUIRED_VIVADO_VERSION
####   global IGNORE_VERSION_CHECK
#### 
####   if [regexp "_ac701$" $project_name] {
####     set p_device "xc7a200tfbg676-2"
####     set p_board "xilinx.com:ac701:part0:1.0"
####     set sys_zynq 0
####   }
####   if [regexp "_kc705$" $project_name] {
####     set p_device "xc7k325tffg900-2"
####     set p_board "xilinx.com:kc705:part0:1.1"
####     set sys_zynq 0
####   }
####   if [regexp "_vc707$" $project_name] {
####     set p_device "xc7vx485tffg1761-2"
####     set p_board "xilinx.com:vc707:part0:1.1"
####     set sys_zynq 0
####   }
####   if [regexp "_kcu105$" $project_name] {
####     set p_device "xcku040-ffva1156-2-e"
####     set p_board "xilinx.com:kcu105:part0:1.1"
####     set sys_zynq 0
####   }
####   if [regexp "_zed$" $project_name] {
####     set p_device "xc7z020clg484-1"
####     set p_board "em.avnet.com:zed:part0:1.3"
####     set sys_zynq 1
####   }
####   if [regexp "_microzed$" $project_name] {
####     set p_device "xc7z010clg400-1"
####     set p_board "not-applicable"
####     set sys_zynq 1
####   }
####   if [regexp "_zc702$" $project_name] {
####     set p_device "xc7z020clg484-1"
####     set p_board "xilinx.com:zc702:part0:1.2"
####     set sys_zynq 1
####   }
####   if [regexp "_zc706$" $project_name] {
####     set p_device "xc7z045ffg900-2"
####     set p_board "xilinx.com:zc706:part0:1.2"
####     set sys_zynq 1
####   }
####   if [regexp "_mitx045$" $project_name] {
####     set p_device "xc7z045ffg900-2"
####     set p_board "not-applicable"
####     set sys_zynq 1
####   }
####   if [regexp "_zcu102$" $project_name] {
####     set p_device "xczu9eg-ffvb1156-2-e"
####     set p_board "xilinx.com:zcu102:part0:3.1"
####     set sys_zynq 2
####   }
#### 
####   set VIVADO_VERSION [version -short]
####   if {[string compare $VIVADO_VERSION $REQUIRED_VIVADO_VERSION] != 0} {
####     puts -nonewline "CRITICAL WARNING: vivado version mismatch; "
####     puts -nonewline "expected $REQUIRED_VIVADO_VERSION, "
####     puts -nonewline "got $VIVADO_VERSION.\n"
####   }
#### 
####   if {$mode == 0} {
####     set project_system_dir "./$project_name.srcs/sources_1/bd/system"
####     create_project $project_name . -part $p_device -force
####   } else {
####     set project_system_dir ".srcs/sources_1/bd/system"
####     create_project -in_memory -part $p_device
####   }
#### 
####   if {$mode == 1} {
####     file mkdir $project_name.data
####   }
#### 
####   if {$p_board ne "not-applicable"} {
####     set_property board_part $p_board [current_project]
####   }
#### 
####   set lib_dirs $ad_hdl_dir/library
####   if {$ad_hdl_dir ne $ad_phdl_dir} {
####     lappend lib_dirs $ad_phdl_dir/library
####   }
#### 
####   set_property ip_repo_paths $lib_dirs [current_fileset]
####   update_ip_catalog
#### 
####   ## Load custom message severity definitions
####   source $ad_hdl_dir/projects/scripts/adi_xilinx_msg.tcl
#### 
####   create_bd_design "system"
####   source system_bd.tcl
#### 
####   save_bd_design
####   validate_bd_design
#### 
####   set_property synth_checkpoint_mode None [get_files  $project_system_dir/system.bd]
####   generate_target {synthesis implementation} [get_files  $project_system_dir/system.bd]
####   make_wrapper -files [get_files $project_system_dir/system.bd] -top
#### 
####   if {$mode == 0} {
####     import_files -force -norecurse -fileset sources_1 $project_system_dir/hdl/system_wrapper.v
####   } else {
####     write_hwdef -file "$project_name.data/$project_name.hwdef"
####   }
#### }
#### proc adi_project_files {project_name project_files} {
#### 
####   add_files -norecurse -fileset sources_1 $project_files
####   set_property top system_top [current_fileset]
#### }
#### proc adi_project_run {project_name} {
####   global ADI_POWER_OPTIMIZATION
#### 
####   launch_runs synth_1
####   wait_on_run synth_1
####   open_run synth_1
####   report_timing_summary -file timing_synth.log
#### 
####   if {![info exists ::env(ADI_NO_BITSTREAM_COMPRESSION)] && ![info exists ADI_NO_BITSTREAM_COMPRESSION]} {
####     set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]
####   }
#### 
####   if {$ADI_POWER_OPTIMIZATION == 1} {
####   set_property STEPS.POWER_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]
####   set_property STEPS.POST_PLACE_POWER_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]
####   }
#### 
####   launch_runs impl_1 -to_step write_bitstream
####   wait_on_run impl_1
####   open_run impl_1
####   report_timing_summary -file timing_impl.log
#### 
####   file mkdir $project_name.sdk
#### 
####   if [expr [get_property SLACK [get_timing_paths]] < 0] {
####     file copy -force $project_name.runs/impl_1/system_top.sysdef $project_name.sdk/system_top_bad_timing.hdf
####   } else {
####     file copy -force $project_name.runs/impl_1/system_top.sysdef $project_name.sdk/system_top.hdf
####   }
#### 
####   if [expr [get_property SLACK [get_timing_paths]] < 0] {
####     return -code error [format "ERROR: Timing Constraints NOT met!"]
####   }
#### }
#### proc adi_project_synth {project_name prcfg_name hdl_files {xdc_files ""}} {
#### 
####   global p_device
#### 
####   set p_prefix "$project_name.data/$project_name"
#### 
####   if {$prcfg_name eq ""} {
#### 
####     read_verilog .srcs/sources_1/bd/system/hdl/system_wrapper.v
####     read_verilog $hdl_files
####     read_xdc $xdc_files
#### 
####     synth_design -mode default -top system_top -part $p_device > $p_prefix.synth.rds
####     write_checkpoint -force $p_prefix.synth.dcp
####     close_project
#### 
####   } else {
#### 
####     create_project -in_memory -part $p_device
####     read_verilog $hdl_files
####     synth_design -mode out_of_context -top "prcfg" -part $p_device > $p_prefix.${prcfg_name}_synth.rds
####     write_checkpoint -force $p_prefix.${prcfg_name}_synth.dcp
####     close_project
####   }
#### }
#### proc adi_project_impl {project_name prcfg_name {xdc_files ""}} {
#### 
####   global p_device
####   global p_prcfg_init
####   global p_prcfg_list
####   global p_prcfg_status
#### 
####   set p_prefix "$project_name.data/$project_name"
#### 
####   if {$prcfg_name eq "default"} {
####     set p_prcfg_status 0
####     set p_prcfg_list ""
####     set p_prcfg_init "$p_prefix.${prcfg_name}_impl.dcp"
####     file mkdir $project_name.sdk
####   }
#### 
####   if {$prcfg_name eq "default"} {
#### 
####     open_checkpoint $p_prefix.synth.dcp -part $p_device
####     read_xdc $xdc_files
####     read_checkpoint -cell i_prcfg $p_prefix.${prcfg_name}_synth.dcp
####     set_property HD.RECONFIGURABLE 1 [get_cells i_prcfg]
####     opt_design > $p_prefix.${prcfg_name}_opt.rds
####     write_debug_probes -force $p_prefix.${prcfg_name}_debug_nets.ltx
####     place_design > $p_prefix.${prcfg_name}_place.rds
####     route_design > $p_prefix.${prcfg_name}_route.rds
#### 
####   } else {
#### 
####     open_checkpoint $p_prefix.default_impl_bb.dcp -part $p_device
####     lock_design -level routing
####     read_checkpoint -cell i_prcfg $p_prefix.${prcfg_name}_synth.dcp
####     read_xdc $xdc_files
####     opt_design > $p_prefix.${prcfg_name}_opt.rds
####     place_design > $p_prefix.${prcfg_name}_place.rds
####     route_design > $p_prefix.${prcfg_name}_route.rds
####   }
#### 
####   write_checkpoint -force $p_prefix.${prcfg_name}_impl.dcp
####   report_utilization -pblocks pb_prcfg -file $p_prefix.${prcfg_name}_utilization.rpt
####   report_timing_summary -file $p_prefix.${prcfg_name}_timing_summary.rpt
#### 
####   if [expr [get_property SLACK [get_timing_paths]] < 0] {
####     set p_prcfg_status 1
####     puts "CRITICAL WARNING: Timing Constraints NOT met ($prcfg_name)!"
####   }
#### 
####   write_checkpoint -force -cell i_prcfg $p_prefix.${prcfg_name}_prcfg_impl.dcp
####   update_design -cell i_prcfg -black_box
####   write_checkpoint -force $p_prefix.${prcfg_name}_impl_bb.dcp
####   open_checkpoint $p_prefix.${prcfg_name}_impl.dcp -part $p_device
####   write_bitstream -force -bin_file -file $p_prefix.${prcfg_name}.bit
####   write_sysdef -hwdef $p_prefix.hwdef -bitfile $p_prefix.${prcfg_name}.bit -file $p_prefix.${prcfg_name}.hdf
####   file copy -force $p_prefix.${prcfg_name}.hdf $project_name.sdk/system_top.${prcfg_name}.hdf
#### 
####   if {$prcfg_name ne "default"} {
####     lappend p_prcfg_list "$p_prefix.${prcfg_name}_impl.dcp"
####   }
#### 
####   if {$prcfg_name eq "default"} {
####     file copy -force $p_prefix.${prcfg_name}.hdf $project_name.sdk/system_top.hdf
####   }
#### }
#### proc adi_project_verify {project_name} {
#### 
####   global p_prcfg_init
####   global p_prcfg_list
####   global p_prcfg_status
#### 
####   set p_prefix "$project_name.data/$project_name"
#### 
####   pr_verify -full_check -initial $p_prcfg_init \
####     -additional $p_prcfg_list \
####     -file $p_prefix.prcfg_verify.log
#### 
####   if {$p_prcfg_status == 1} {
####     return -code error [format "ERROR: Timing Constraints NOT met!"]
####   }
#### }
### source $ad_hdl_dir/projects/scripts/adi_board.tcl
#### variable sys_cpu_interconnect_index
#### variable sys_hp0_interconnect_index
#### variable sys_hp1_interconnect_index
#### variable sys_hp2_interconnect_index
#### variable sys_hp3_interconnect_index
#### variable sys_mem_interconnect_index
#### variable xcvr_index
#### variable xcvr_tx_index
#### variable xcvr_rx_index
#### variable xcvr_instance
#### set sys_cpu_interconnect_index 0
#### set sys_hp0_interconnect_index -1
#### set sys_hp1_interconnect_index -1
#### set sys_hp2_interconnect_index -1
#### set sys_hp3_interconnect_index -1
#### set sys_mem_interconnect_index -1
#### set xcvr_index -1
#### set xcvr_tx_index 0
#### set xcvr_rx_index 0
#### set xcvr_instance NONE
#### proc ad_ip_instance {i_ip i_name} {
#### 
####   create_bd_cell -type ip -vlnv [get_ipdefs -all -filter "VLNV =~ *:${i_ip}:* && \
####     design_tool_contexts =~ *IPI* && UPGRADE_VERSIONS == \"\""] ${i_name}
#### }
#### proc ad_ip_parameter {i_name i_param i_value} {
#### 
####   set_property ${i_param} ${i_value} [get_bd_cells ${i_name}]
#### }
#### proc ad_connect_type {p_name} {
#### 
####   set m_name ""
#### 
####   if {$m_name eq ""} {set m_name [get_bd_intf_pins  -quiet $p_name]}
####   if {$m_name eq ""} {set m_name [get_bd_pins       -quiet $p_name]}
####   if {$m_name eq ""} {set m_name [get_bd_intf_ports -quiet $p_name]}
####   if {$m_name eq ""} {set m_name [get_bd_ports      -quiet $p_name]}
####   if {$m_name eq ""} {set m_name [get_bd_intf_nets  -quiet $p_name]}
####   if {$m_name eq ""} {set m_name [get_bd_nets       -quiet $p_name]}
#### 
####   return $m_name
#### }
#### proc ad_connect {p_name_1 p_name_2} {
#### 
####   if {($p_name_2 eq "GND") || ($p_name_2 eq "VCC")} {
####     set p_size 1
####     set p_msb [get_property left [get_bd_pins $p_name_1]]
####     set p_lsb [get_property right [get_bd_pins $p_name_1]]
####     if {($p_msb ne "") && ($p_lsb ne "")} {
####       set p_size [expr (($p_msb + 1) - $p_lsb)]
####     }
####     set p_cell_name [regsub -all {/} $p_name_1 "_"]
####     set p_cell_name "${p_cell_name}_${p_name_2}"
####     if {$p_name_2 eq "VCC"} {
####       set p_value -1
####     } else {
####       set p_value 0
####     }
####     ad_ip_instance xlconstant $p_cell_name
####     set_property CONFIG.CONST_WIDTH $p_size [get_bd_cells $p_cell_name]
####     set_property CONFIG.CONST_VAL $p_value [get_bd_cells $p_cell_name]
####     puts "connect_bd_net $p_cell_name/dout $p_name_1"
####     connect_bd_net [get_bd_pins $p_cell_name/dout] [get_bd_pins $p_name_1]
####     return
####   }
#### 
####   set m_name_1 [ad_connect_type $p_name_1]
####   set m_name_2 [ad_connect_type $p_name_2]
#### 
####   if {$m_name_1 eq ""} {
####     if {[get_property CLASS $m_name_2] eq "bd_intf_pin"} {
####       puts "create_bd_intf_net $p_name_1"
####       create_bd_intf_net $p_name_1
####     }
####     if {[get_property CLASS $m_name_2] eq "bd_pin"} {
####       puts "create_bd_net $p_name_1"
####       create_bd_net $p_name_1
####     }
####     set m_name_1 [ad_connect_type $p_name_1]
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_intf_pin"} {
####     puts "connect_bd_intf_net $m_name_1 $m_name_2"
####     connect_bd_intf_net $m_name_1 $m_name_2
####     return
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_pin"} {
####     puts "connect_bd_net $m_name_1 $m_name_2"
####     connect_bd_net $m_name_1 $m_name_2
####     return
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_net"} {
####     puts "connect_bd_net -net $m_name_1 $m_name_2"
####     connect_bd_net -net $m_name_1 $m_name_2
####     return
####   }
#### }
#### proc ad_disconnect {p_name_1 p_name_2} {
#### 
####   set m_name_1 [ad_connect_type $p_name_1]
####   set m_name_2 [ad_connect_type $p_name_2]
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_net"} {
####     disconnect_bd_net $m_name_1 $m_name_2
####     return
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_port"} {
####     delete_bd_objs -quiet [get_bd_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_1]]
####     delete_bd_objs -quiet $m_name_1
####     return
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_pin"} {
####     delete_bd_objs -quiet [get_bd_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_1]]
####     delete_bd_objs -quiet $m_name_1
####     return
####   }
#### }
#### proc ad_reconct {p_name_1 p_name_2} {
#### 
####   set m_name_1 [ad_connect_type $p_name_1]
####   set m_name_2 [ad_connect_type $p_name_2]
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_pin"} {
####     delete_bd_objs -quiet [get_bd_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_1]]
####     delete_bd_objs -quiet [get_bd_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_2]]
####   }
#### 
####   if {[get_property CLASS $m_name_1] eq "bd_intf_pin"} {
####     delete_bd_objs -quiet [get_bd_intf_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_1]]
####     delete_bd_objs -quiet [get_bd_intf_nets -quiet -of_objects \
####       [find_bd_objs -relation connected_to $m_name_2]]
####   }
#### 
####   ad_connect $p_name_1 $p_name_2
#### }
#### proc ad_xcvrcon {u_xcvr a_xcvr a_jesd {lane_map {}}} {
####   
####   global xcvr_index
####   global xcvr_tx_index
####   global xcvr_rx_index
####   global xcvr_instance
#### 
####   set no_of_lanes [get_property CONFIG.NUM_OF_LANES [get_bd_cells $a_xcvr]]
####   set qpll_enable [get_property CONFIG.QPLL_ENABLE [get_bd_cells $a_xcvr]]
####   set tx_or_rx_n [get_property CONFIG.TX_OR_RX_N [get_bd_cells $a_xcvr]]
#### 
#### #  set jesd204_vlnv [get_property VLNV $a_jesd]
#### #
#### #  if {[string first "analog.com" $jesd204_vlnv] == 0} {
#### #    set jesd204_type 0
#### #  } elseif {[string first "xilinx.com" $jesd204_vlnv] == 0} {
#### #    set jesd204_type 1
#### #  } else {
#### #    return -code 1 "Unsupported JESD204 core type."
#### #  }
#### 
####   set jesd204_bd_type [get_property TYPE [get_bd_cells $a_jesd]]
#### 
####   if {$jesd204_bd_type == "hier"} {
####     set jesd204_type 0
####   } else {
####     set jesd204_type 1
####   }
#### 
####   if {$xcvr_instance ne $u_xcvr} {
####     set xcvr_index [expr ($xcvr_index + 1)]
####     set xcvr_tx_index 0
####     set xcvr_rx_index 0
####     set xcvr_instance $u_xcvr
####   }
#### 
####   set txrx "rx"
####   set data_dir "I"
####   set ctrl_dir "O"
####   set index $xcvr_rx_index
#### 
####   if {$tx_or_rx_n == 1} {
#### 
####     set txrx "tx"
####     set data_dir "O"
####     set ctrl_dir "I"
####     set index $xcvr_tx_index
####   }
#### 
####   set m_sysref ${txrx}_sysref_${index}
####   set m_sync ${txrx}_sync_${index}
####   set m_data ${txrx}_data
#### 
####   if {$xcvr_index >= 1} {
#### 
####     set m_sysref ${txrx}_sysref_${xcvr_index}_${index}
####     set m_sync ${txrx}_sync_${xcvr_index}_${index}
####     set m_data ${txrx}_data_${xcvr_index}
####   }
#### 
####   create_bd_port -dir I $m_sysref
####   create_bd_port -dir ${ctrl_dir} $m_sync
####   ad_ip_instance proc_sys_reset ${a_jesd}_rstgen
#### 
####   for {set n 0} {$n < $no_of_lanes} {incr n} {
#### 
####     set m [expr ($n + $index)]
#### 
####     if {$tx_or_rx_n == 0} {
####       ad_connect  ${a_xcvr}/up_es_${n} ${u_xcvr}/up_es_${m}
####       if {$jesd204_type == 0} {
####         ad_connect  ${a_jesd}/phy_en_char_align ${u_xcvr}/${txrx}_calign_${m}
####       } else {
####         ad_connect  ${a_jesd}/rxencommaalign_out ${u_xcvr}/${txrx}_calign_${m}
####       }
####     }
#### 
####     if {(($m%4) == 0) && ($qpll_enable == 1)} {
####       ad_connect  ${a_xcvr}/up_cm_${n} ${u_xcvr}/up_cm_${m}
####     }
#### 
####     if {$lane_map != {}} {
####       set phys_lane [expr [lindex $lane_map $n] + $index]
####     } else {
####       set phys_lane $m
####     }
#### 
####     ad_connect  ${a_xcvr}/up_ch_${n} ${u_xcvr}/up_${txrx}_${m}
####     ad_connect  ${u_xcvr}/${txrx}_out_clk_${index} ${u_xcvr}/${txrx}_clk_${m}
####     if {$jesd204_type == 0} {
####       ad_connect  ${u_xcvr}/${txrx}_${phys_lane} ${a_jesd}/${txrx}_phy${n}
####     } else {
####       ad_connect  ${u_xcvr}/${txrx}_${phys_lane} ${a_jesd}/gt${n}_${txrx}
####     }
#### 
####     create_bd_port -dir ${data_dir} ${m_data}_${m}_p
####     create_bd_port -dir ${data_dir} ${m_data}_${m}_n
####     ad_connect  ${u_xcvr}/${txrx}_${m}_p ${m_data}_${m}_p
####     ad_connect  ${u_xcvr}/${txrx}_${m}_n ${m_data}_${m}_n
####   }
#### 
####   if {$jesd204_type == 0} {
####     ad_connect  ${a_jesd}/sysref $m_sysref
####     ad_connect  ${a_jesd}/sync $m_sync
####     ad_connect  ${u_xcvr}/${txrx}_out_clk_${index} ${a_jesd}/device_clk
#### #    if {$tx_or_rx_n == 0} {
#### #      ad_connect  ${a_xcvr}/up_status ${a_jesd}/phy_ready
#### #    }
####   } else {
####     ad_connect  ${a_jesd}/${txrx}_sysref $m_sysref
####     ad_connect  ${a_jesd}/${txrx}_sync $m_sync
####     ad_connect  ${u_xcvr}/${txrx}_out_clk_${index} ${a_jesd}/${txrx}_core_clk
####     ad_connect  ${a_xcvr}/up_status ${a_jesd}/${txrx}_reset_done
####     ad_connect  ${a_jesd}_rstgen/peripheral_reset ${a_jesd}/${txrx}_reset
####   }
#### 
####   ad_connect  ${u_xcvr}/${txrx}_out_clk_${index} ${a_jesd}_rstgen/slowest_sync_clk
####   ad_connect  sys_cpu_resetn ${a_jesd}_rstgen/ext_reset_in
#### 
####   if {$tx_or_rx_n == 0} {
####     set xcvr_rx_index [expr ($xcvr_rx_index + $no_of_lanes)]
####   }
#### 
####   if {$tx_or_rx_n == 1} {
####     set xcvr_tx_index [expr ($xcvr_tx_index + $no_of_lanes)]
####   }
#### }
#### proc ad_xcvrpll {m_src m_dst} {
#### 
####   foreach p_dst [get_bd_pins -quiet $m_dst] {
####     connect_bd_net [ad_connect_type $m_src] $p_dst
####   }
#### }
#### proc ad_mem_hp0_interconnect {p_clk p_name} {
#### 
####   global sys_zynq
#### 
####   if {($sys_zynq == 0) && ($p_name eq "sys_ps7/S_AXI_HP0")} {return}
####   if {$sys_zynq == 0} {ad_mem_hpx_interconnect "MEM" $p_clk $p_name}
####   if {$sys_zynq >= 1} {ad_mem_hpx_interconnect "HP0" $p_clk $p_name}
#### }
#### proc ad_mem_hp1_interconnect {p_clk p_name} {
#### 
####   global sys_zynq
#### 
####   if {($sys_zynq == 0) && ($p_name eq "sys_ps7/S_AXI_HP1")} {return}
####   if {$sys_zynq == 0} {ad_mem_hpx_interconnect "MEM" $p_clk $p_name}
####   if {$sys_zynq >= 1} {ad_mem_hpx_interconnect "HP1" $p_clk $p_name}
#### }
#### proc ad_mem_hp2_interconnect {p_clk p_name} {
#### 
####   global sys_zynq
#### 
####   if {($sys_zynq == 0) && ($p_name eq "sys_ps7/S_AXI_HP2")} {return}
####   if {$sys_zynq == 0} {ad_mem_hpx_interconnect "MEM" $p_clk $p_name}
####   if {$sys_zynq >= 1} {ad_mem_hpx_interconnect "HP2" $p_clk $p_name}
#### }
#### proc ad_mem_hp3_interconnect {p_clk p_name} {
#### 
####   global sys_zynq
#### 
####   if {($sys_zynq == 0) && ($p_name eq "sys_ps7/S_AXI_HP3")} {return}
####   if {$sys_zynq == 0} {ad_mem_hpx_interconnect "MEM" $p_clk $p_name}
####   if {$sys_zynq >= 1} {ad_mem_hpx_interconnect "HP3" $p_clk $p_name}
#### }
#### proc ad_mem_hpx_interconnect {p_sel p_clk p_name} {
#### 
####   global sys_zynq
####   global sys_ddr_addr_seg
####   global sys_hp0_interconnect_index
####   global sys_hp1_interconnect_index
####   global sys_hp2_interconnect_index
####   global sys_hp3_interconnect_index
####   global sys_mem_interconnect_index
#### 
####   set p_name_int $p_name
####   set p_clk_source [get_bd_pins -filter {DIR == O} -of_objects [get_bd_nets $p_clk]]
#### 
####   if {$p_sel eq "MEM"} {
####     if {$sys_mem_interconnect_index < 0} {
####       ad_ip_instance axi_interconnect axi_mem_interconnect
####     }
####     set m_interconnect_index $sys_mem_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_mem_interconnect]
####     set m_addr_seg [get_bd_addr_segs -of_objects [get_bd_cells axi_ddr_cntrl]]
####   }
#### 
####   if {($p_sel eq "HP0") && ($sys_zynq == 1)} {
####     if {$sys_hp0_interconnect_index < 0} {
####       set p_name_int sys_ps7/S_AXI_HP0
####       set_property CONFIG.PCW_USE_S_AXI_HP0 {1} [get_bd_cells sys_ps7]
####       ad_ip_instance axi_interconnect axi_hp0_interconnect
####     }
####     set m_interconnect_index $sys_hp0_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp0_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps7/S_AXI_HP0/HP0_DDR_LOWOCM]
####   }
#### 
####   if {($p_sel eq "HP1") && ($sys_zynq == 1)} {
####     if {$sys_hp1_interconnect_index < 0} {
####       set p_name_int sys_ps7/S_AXI_HP1
####       set_property CONFIG.PCW_USE_S_AXI_HP1 {1} [get_bd_cells sys_ps7]
####       ad_ip_instance axi_interconnect axi_hp1_interconnect
####     }
####     set m_interconnect_index $sys_hp1_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp1_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps7/S_AXI_HP1/HP1_DDR_LOWOCM]
####   }
#### 
####   if {($p_sel eq "HP2") && ($sys_zynq == 1)} {
####     if {$sys_hp2_interconnect_index < 0} {
####       set p_name_int sys_ps7/S_AXI_HP2
####       set_property CONFIG.PCW_USE_S_AXI_HP2 {1} [get_bd_cells sys_ps7]
####       ad_ip_instance axi_interconnect axi_hp2_interconnect
####     }
####     set m_interconnect_index $sys_hp2_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp2_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps7/S_AXI_HP2/HP2_DDR_LOWOCM]
####   }
#### 
####   if {($p_sel eq "HP3") && ($sys_zynq == 1)} {
####     if {$sys_hp3_interconnect_index < 0} {
####       set p_name_int sys_ps7/S_AXI_HP3
####       set_property CONFIG.PCW_USE_S_AXI_HP3 {1} [get_bd_cells sys_ps7]
####       ad_ip_instance axi_interconnect axi_hp3_interconnect
####     }
####     set m_interconnect_index $sys_hp3_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp3_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps7/S_AXI_HP3/HP3_DDR_LOWOCM]
####   }
#### 
####   if {($p_sel eq "HP0") && ($sys_zynq == 2)} {
####     if {$sys_hp0_interconnect_index < 0} {
####       set p_name_int sys_ps8/S_AXI_HP0_FPD
####       set_property CONFIG.PSU__USE__S_AXI_GP2 {1} [get_bd_cells sys_ps8]
####       ad_ip_instance axi_interconnect axi_hp0_interconnect
####     }
####     set m_interconnect_index $sys_hp0_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp0_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps8/S_AXI_HP0_FPD/PLLPD_DDR_LOW]
####   }
#### 
####   if {($p_sel eq "HP1") && ($sys_zynq == 2)} {
####     if {$sys_hp1_interconnect_index < 0} {
####       set p_name_int sys_ps8/S_AXI_HP1_FPD
####       set_property CONFIG.PSU__USE__S_AXI_GP3 {1} [get_bd_cells sys_ps8]
####       ad_ip_instance axi_interconnect axi_hp1_interconnect
####     }
####     set m_interconnect_index $sys_hp1_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp1_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps8/S_AXI_HP1_FPD/HP0_DDR_LOW]
####   }
#### 
####   if {($p_sel eq "HP2") && ($sys_zynq == 2)} {
####     if {$sys_hp2_interconnect_index < 0} {
####       set p_name_int sys_ps8/S_AXI_HP2_FPD
####       set_property CONFIG.PSU__USE__S_AXI_GP4 {1} [get_bd_cells sys_ps8]
####       ad_ip_instance axi_interconnect axi_hp2_interconnect
####     }
####     set m_interconnect_index $sys_hp2_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp2_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps8/S_AXI_HP2_FPD/HP1_DDR_LOW]
####   }
#### 
####   if {($p_sel eq "HP3") && ($sys_zynq == 2)} {
####     if {$sys_hp3_interconnect_index < 0} {
####       set p_name_int sys_ps8/S_AXI_HP3_FPD
####       set_property CONFIG.PSU__USE__S_AXI_GP5 {1} [get_bd_cells sys_ps8]
####       ad_ip_instance axi_interconnect axi_hp3_interconnect
####     }
####     set m_interconnect_index $sys_hp3_interconnect_index
####     set m_interconnect_cell [get_bd_cells axi_hp3_interconnect]
####     set m_addr_seg [get_bd_addr_segs sys_ps8/S_AXI_HP3_FPD/HP2_DDR_LOW]
####   }
#### 
####   set i_str "S$m_interconnect_index"
####   if {$m_interconnect_index < 10} {
####     set i_str "S0$m_interconnect_index"
####   }
#### 
####   set m_interconnect_index [expr $m_interconnect_index + 1]
#### 
####   set p_intf_name [lrange [split $p_name_int "/"] end end]
####   set p_cell_name [lrange [split $p_name_int "/"] 0 0]
####   set p_intf_clock [get_bd_pins -filter "TYPE == clk && (CONFIG.ASSOCIATED_BUSIF == ${p_intf_name} || \
####     CONFIG.ASSOCIATED_BUSIF =~ ${p_intf_name}:* || CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name} || \
####     CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name}:*)" -quiet -of_objects [get_bd_cells $p_cell_name]]
####   if {[find_bd_objs -quiet -relation connected_to $p_intf_clock] ne "" ||
####       $p_intf_clock eq $p_clk_source} {
####     set p_intf_clock ""
####   }
#### 
####   regsub clk $p_clk resetn p_rst
####   if {[get_bd_nets -quiet $p_rst] eq ""} {
####     set p_rst sys_cpu_resetn
####   }
#### 
####   if {$m_interconnect_index == 0} {
####     set_property CONFIG.NUM_MI 1 $m_interconnect_cell
####     set_property CONFIG.NUM_SI 1 $m_interconnect_cell
####     ad_connect $p_rst $m_interconnect_cell/ARESETN
####     ad_connect $p_clk $m_interconnect_cell/ACLK
####     ad_connect $p_rst $m_interconnect_cell/M00_ARESETN
####     ad_connect $p_clk $m_interconnect_cell/M00_ACLK
####     ad_connect $m_interconnect_cell/M00_AXI $p_name_int
####     if {$p_intf_clock ne ""} {
####       ad_connect $p_clk $p_intf_clock
####     }
####   } else {
####     set_property CONFIG.NUM_SI $m_interconnect_index $m_interconnect_cell
####     ad_connect $p_rst $m_interconnect_cell/${i_str}_ARESETN
####     ad_connect $p_clk $m_interconnect_cell/${i_str}_ACLK
####     ad_connect $m_interconnect_cell/${i_str}_AXI $p_name_int
####     if {$p_intf_clock ne ""} {
####       ad_connect $p_clk $p_intf_clock
####     }
####     assign_bd_address $m_addr_seg
####   }
#### 
####   if {$m_interconnect_index > 1} {
####     set_property CONFIG.STRATEGY {2} $m_interconnect_cell
####   }
#### 
####   if {$p_sel eq "MEM"} {set sys_mem_interconnect_index $m_interconnect_index}
####   if {$p_sel eq "HP0"} {set sys_hp0_interconnect_index $m_interconnect_index}
####   if {$p_sel eq "HP1"} {set sys_hp1_interconnect_index $m_interconnect_index}
####   if {$p_sel eq "HP2"} {set sys_hp2_interconnect_index $m_interconnect_index}
####   if {$p_sel eq "HP3"} {set sys_hp3_interconnect_index $m_interconnect_index}
#### 
#### }
#### proc ad_cpu_interconnect {p_address p_name} {
#### 
####   global sys_zynq
####   global sys_cpu_interconnect_index
#### 
####   set i_str "M$sys_cpu_interconnect_index"
####   if {$sys_cpu_interconnect_index < 10} {
####     set i_str "M0$sys_cpu_interconnect_index"
####   }
#### 
####   if {$sys_cpu_interconnect_index == 0} {
####     ad_ip_instance axi_interconnect axi_cpu_interconnect
####     if {$sys_zynq == 2} {
####       ad_connect sys_cpu_clk sys_ps8/maxihpm0_lpd_aclk
####       ad_connect sys_cpu_clk axi_cpu_interconnect/ACLK
####       ad_connect sys_cpu_clk axi_cpu_interconnect/S00_ACLK
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/ARESETN
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/S00_ARESETN
####       ad_connect axi_cpu_interconnect/S00_AXI sys_ps8/M_AXI_HPM0_LPD
####     }
####     if {$sys_zynq == 1} {
####       ad_connect sys_cpu_clk sys_ps7/M_AXI_GP0_ACLK
####       ad_connect sys_cpu_clk axi_cpu_interconnect/ACLK
####       ad_connect sys_cpu_clk axi_cpu_interconnect/S00_ACLK
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/ARESETN
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/S00_ARESETN
####       ad_connect axi_cpu_interconnect/S00_AXI sys_ps7/M_AXI_GP0
####     }
####     if {$sys_zynq == 0} {
####       ad_connect sys_cpu_clk axi_cpu_interconnect/ACLK
####       ad_connect sys_cpu_clk axi_cpu_interconnect/S00_ACLK
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/ARESETN
####       ad_connect sys_cpu_resetn axi_cpu_interconnect/S00_ARESETN
####       ad_connect axi_cpu_interconnect/S00_AXI sys_mb/M_AXI_DP
####     }
####   }
#### 
####   if {$sys_zynq == 2} {
####     set sys_addr_cntrl_space [get_bd_addr_spaces sys_ps8/Data]
####   }
####   if {$sys_zynq == 1} {
####     set sys_addr_cntrl_space [get_bd_addr_spaces sys_ps7/Data]
####   }
####   if {$sys_zynq == 0} {
####     set sys_addr_cntrl_space [get_bd_addr_spaces sys_mb/Data]
####   }
#### 
####   set sys_cpu_interconnect_index [expr $sys_cpu_interconnect_index + 1]
#### 
#### 
####   set p_cell [get_bd_cells $p_name]
####   set p_intf [get_bd_intf_pins -filter "MODE == Slave && VLNV == xilinx.com:interface:aximm_rtl:1.0"\
####     -of_objects $p_cell]
#### 
####   set p_hier_cell $p_cell
####   set p_hier_intf $p_intf
#### 
####   while {$p_hier_intf != "" && [get_property TYPE $p_hier_cell] == "hier"} {
####     set p_hier_intf [find_bd_objs -boundary_type lower \
####       -relation connected_to $p_hier_intf]
####     if {$p_hier_intf != {}} {
####       set p_hier_cell [get_bd_cells -of_objects $p_hier_intf]
####     } else {
####       set p_hier_cell {}
####     }
####   }
#### 
####   set p_intf_clock ""
####   set p_intf_reset ""
#### 
####   if {$p_hier_cell != {}} {
####     set p_intf_name [lrange [split $p_hier_intf "/"] end end]
#### 
####     set p_intf_clock [get_bd_pins -filter "TYPE == clk && \
####       (CONFIG.ASSOCIATED_BUSIF == ${p_intf_name} || \
####       CONFIG.ASSOCIATED_BUSIF =~ ${p_intf_name}:* || \
####       CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name} || \
####       CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name}:*)" \
####       -quiet -of_objects $p_hier_cell]
####     set p_intf_reset [get_bd_pins -filter "TYPE == rst && \
####       (CONFIG.ASSOCIATED_BUSIF == ${p_intf_name} || \
####        CONFIG.ASSOCIATED_BUSIF =~ ${p_intf_name}:* ||
####        CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name} || \
####        CONFIG.ASSOCIATED_BUSIF =~ *:${p_intf_name}:*)" \
####        -quiet -of_objects $p_hier_cell]
#### 
####     if {($p_intf_clock ne "") && ($p_intf_reset eq "")} {
####       set p_intf_reset [get_property CONFIG.ASSOCIATED_RESET [get_bd_pins ${p_intf_clock}]]
####       if {$p_intf_reset ne ""} {
####         set p_intf_reset [get_bd_pins -filter "NAME == $p_intf_reset" -of_objects $p_hier_cell]
####       }
####     }
#### 
####     # Trace back up
####     set p_hier_cell2 $p_hier_cell
#### 
####     while {$p_intf_clock != {} && $p_hier_cell2 != $p_cell && $p_hier_cell2 != {}} {
####       puts $p_intf_clock
####       puts $p_hier_cell2
####       set p_intf_clock [find_bd_objs -boundary_type upper \
####         -relation connected_to $p_intf_clock]
####       if {$p_intf_clock != {}} {
####         set p_intf_clock [get_bd_pins [get_property PATH $p_intf_clock]]
####         set p_hier_cell2 [get_bd_cells -of_objects $p_intf_clock]
####       }
####     }
#### 
####     set p_hier_cell2 $p_hier_cell
#### 
####     while {$p_intf_reset != {} && $p_hier_cell2 != $p_cell && $p_hier_cell2 != {}} {
####       set p_intf_reset [find_bd_objs -boundary_type upper \
####         -relation connected_to $p_intf_reset]
####       if {$p_intf_reset != {}} {
####         set p_intf_reset [get_bd_pins [get_property PATH $p_intf_reset]]
####         set p_hier_cell2 [get_bd_cells -of_objects $p_intf_reset]
####       }
####     }
####   }
#### 
#### 
####   if {[find_bd_objs -quiet -relation connected_to $p_intf_clock] ne ""} {
####     set p_intf_clock ""
####   }
####   if {$p_intf_reset ne ""} {
####     if {[find_bd_objs -quiet -relation connected_to $p_intf_reset] ne ""} {
####       set p_intf_reset ""
####     }
####   }
#### 
####   set_property CONFIG.NUM_MI $sys_cpu_interconnect_index [get_bd_cells axi_cpu_interconnect]
#### 
####   ad_connect sys_cpu_clk axi_cpu_interconnect/${i_str}_ACLK
####   if {$p_intf_clock ne ""} {
####     ad_connect sys_cpu_clk ${p_intf_clock}
####   }
####   ad_connect sys_cpu_resetn axi_cpu_interconnect/${i_str}_ARESETN
####   if {$p_intf_reset ne ""} {
####     ad_connect sys_cpu_resetn ${p_intf_reset}
####   }
####   ad_connect axi_cpu_interconnect/${i_str}_AXI ${p_intf}
#### 
####   set p_seg [get_bd_addr_segs -of_objects $p_hier_cell]
####   set p_index 0
####   foreach p_seg_name $p_seg {
####     if {$p_index == 0} {
####       set p_seg_range [get_property range $p_seg_name]
####       if {$p_seg_range < 0x1000} {
####         set p_seg_range 0x1000
####       }
####       if {$sys_zynq == 2} {
####         if {($p_address >= 0x40000000) && ($p_address <= 0x4fffffff)} {
####           set p_address [expr ($p_address + 0x40000000)]
####         }
####         if {($p_address >= 0x70000000) && ($p_address <= 0x7fffffff)} {
####           set p_address [expr ($p_address + 0x20000000)]
####         }
####       }
####       create_bd_addr_seg -range $p_seg_range \
####         -offset $p_address $sys_addr_cntrl_space \
####         $p_seg_name "SEG_data_${p_name}"
####     } else {
####       assign_bd_address $p_seg_name
####     }
####     incr p_index
####   }
#### }
#### proc ad_cpu_interrupt {p_ps_index p_mb_index p_name} {
#### 
####   global sys_zynq
#### 
####   if {$sys_zynq == 0} {set p_index_int $p_mb_index}
####   if {$sys_zynq >= 1} {set p_index_int $p_ps_index}
#### 
####   set p_index [regsub -all {[^0-9]} $p_index_int ""]
####   set m_index [expr ($p_index - 8)]
#### 
####   if {($sys_zynq == 2) && ($p_index <= 7)} {
####     set p_net [get_bd_nets -of_objects [get_bd_pins sys_concat_intc_0/In$p_index]]
####     set p_pin [find_bd_objs -relation connected_to [get_bd_pins sys_concat_intc_0/In$p_index]]
#### 
####     puts "delete_bd_objs $p_net $p_pin"
####     delete_bd_objs $p_net $p_pin
####     ad_connect sys_concat_intc_0/In$p_index $p_name
####   }
#### 
####   if {($sys_zynq == 2) && ($p_index >= 8)} {
####     set p_net [get_bd_nets -of_objects [get_bd_pins sys_concat_intc_1/In$m_index]]
####     set p_pin [find_bd_objs -relation connected_to [get_bd_pins sys_concat_intc_1/In$m_index]]
#### 
####     puts "delete_bd_objs $p_net $p_pin"
####     delete_bd_objs $p_net $p_pin
####     ad_connect sys_concat_intc_1/In$m_index $p_name
####   }
#### 
####   if {$sys_zynq <= 1} {
#### 
####     set p_net [get_bd_nets -of_objects [get_bd_pins sys_concat_intc/In$p_index]]
####     set p_pin [find_bd_objs -relation connected_to [get_bd_pins sys_concat_intc/In$p_index]]
#### 
####     puts "delete_bd_objs $p_net $p_pin"
####     delete_bd_objs $p_net $p_pin
####     ad_connect sys_concat_intc/In$p_index $p_name
####   }
#### }
### if { [file exists $adi_vendor_dir/boards/$mw_adi_boardname/system_bd.tcl] } {
###     source $adi_vendor_dir/boards/$mw_adi_boardname/system_bd.tcl
### }
#### proc mw_adi_bd_board_cleanup {} {
####     delete_bd_objs [get_bd_cells sys_audio_clkgen]
#### }
### proc mw_adi_proj {} {
###     
###     global adi_vendor_dir
###     global mw_adi_boardname
###     
###     add_files -norecurse -fileset sources_1 $adi_vendor_dir/boards/$mw_adi_boardname/system_constr.xdc
###     set_property target_language Verilog [current_project]
###     
### }
### proc mw_adi_bd_cleanup {} {
###     global adi_board_has_hdmi
###     
###     if { $adi_board_has_hdmi == true } {
###         # Remove the HDMI components
###         delete_bd_objs [get_bd_cells axi_hdmi_dma] \
###             [get_bd_cells axi_hdmi_core] \
###             [get_bd_cells axi_hdmi_clkgen] \
###             [get_bd_cells axi_spdif_tx_core] \
###             [get_bd_cells axi_hp0_interconnect] \
###             [get_bd_ports hdmi_hsync] \
###             [get_bd_ports hdmi_vsync] \
###             [get_bd_ports hdmi_data_e] \
###             [get_bd_ports hdmi_out_clk] \
###             [get_bd_ports hdmi_data] \
###             [get_bd_ports spdif]
###             
###         mw_create_const "intr_concat_gnd" 1 0
###         mw_disconnect_pin sys_concat_intc/In15
###         mw_connect_pin const_intr_concat_gnd sys_concat_intc/In15
###         
###         mw_disconnect_pin sys_ps7/S_AXI_HP0_ACLK
###         set_property CONFIG.PCW_USE_S_AXI_HP0 0 [get_bd_cells sys_ps7]
###     }
###         
###     mw_adi_bd_board_cleanup
### }
### proc mw_adi_add_status_led {} { 
###     set led_driver_name led_driver
###     set port [ create_bd_port -dir O -from 0 -to 0 STATUS_LED]
###     set $led_driver_name [ create_bd_cell -type ip -vlnv mathworks.com:user:util_mw_led_driver:1.0 led_driver]
###     mw_connect_pin $led_driver_name/led $port
###     mw_connect_pin $led_driver_name/clk_ps7 sys_ps7/FCLK_CLK0
###     mw_connect_pin $led_driver_name/clk_rf util_mw_clkconstr/clk_out
###     mw_connect_pin $led_driver_name/rst util_ad9361_divclk_reset/peripheral_reset
### }
## set mw_ad9361     $mw_hdl_dir/projects/ad9361
## set adi_prj_dir   $ad_hdl_dir/projects/$project
## set mwIPScriptDir $mw_hdl_dir/library/scripts/ip
## mw_adi_setup_libs
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'.
WARNING: [IP_Flow 19-3685] Ignored loading user repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore/adi/library'. The path is contained within another repository.
## source ${mw_ad9361}/board/${project}/${boardName}/system_project.tcl
### set project_files [list \
###   "${adi_prj_dir}/${boardName}/system_constr.xdc" \
###   "${ad_hdl_dir}/library/xilinx/common/ad_iobuf.v"]
### add_files -norecurse -fileset sources_1 $project_files
### set system_bd_script ${ad_hdl_dir}/projects/fmcomms2/zc706/system_bd.tcl
### set IP_AXIM 1
## if { ! [info exist mw_board_name] } {
##     set mw_board_name $boardName
## }
## if { ! [info exist DUT_DATA_RATE_MHZ] } {
##     set DUT_DATA_RATE_MHZ 62.5
## }
## mw_load_board_tcl $mw_board_name
## mw_set_board_info $mw_board_name
==> Using Board zc706
## mw_adi_proj
## set curdir [pwd]
## cd [mw_get_proj_dir]
## create_bd_design "system"
Wrote  : </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd> 
## cd $curdir
## set olddir [pwd]
## cd [file dirname [file normalize ${system_bd_script}]]
## source ${system_bd_script}
### source $ad_hdl_dir/projects/common/zc706/zc706_system_bd.tcl
#### create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 ddr
#### create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic_main
#### create_bd_intf_port -mode Master -vlnv xilinx.com:display_processing_system7:fixedio_rtl:1.0 fixed_io
#### create_bd_port -dir O spi0_csn_2_o
#### create_bd_port -dir O spi0_csn_1_o
#### create_bd_port -dir O spi0_csn_0_o
#### create_bd_port -dir I spi0_csn_i
#### create_bd_port -dir I spi0_clk_i
#### create_bd_port -dir O spi0_clk_o
#### create_bd_port -dir I spi0_sdo_i
#### create_bd_port -dir O spi0_sdo_o
#### create_bd_port -dir I spi0_sdi_i
#### create_bd_port -dir O spi1_csn_2_o
#### create_bd_port -dir O spi1_csn_1_o
#### create_bd_port -dir O spi1_csn_0_o
#### create_bd_port -dir I spi1_csn_i
#### create_bd_port -dir I spi1_clk_i
#### create_bd_port -dir O spi1_clk_o
#### create_bd_port -dir I spi1_sdo_i
#### create_bd_port -dir O spi1_sdo_o
#### create_bd_port -dir I spi1_sdi_i
#### create_bd_port -dir I -from 63 -to 0 gpio_i
#### create_bd_port -dir O -from 63 -to 0 gpio_o
#### create_bd_port -dir O -from 63 -to 0 gpio_t
#### create_bd_port -dir O hdmi_out_clk
#### create_bd_port -dir O hdmi_hsync
#### create_bd_port -dir O hdmi_vsync
#### create_bd_port -dir O hdmi_data_e
#### create_bd_port -dir O -from 23 -to 0 hdmi_data
#### create_bd_port -dir O spdif
#### create_bd_port -dir I -type intr ps_intr_00
#### create_bd_port -dir I -type intr ps_intr_01
#### create_bd_port -dir I -type intr ps_intr_02
#### create_bd_port -dir I -type intr ps_intr_03
#### create_bd_port -dir I -type intr ps_intr_04
#### create_bd_port -dir I -type intr ps_intr_05
#### create_bd_port -dir I -type intr ps_intr_06
#### create_bd_port -dir I -type intr ps_intr_07
#### create_bd_port -dir I -type intr ps_intr_08
#### create_bd_port -dir I -type intr ps_intr_09
#### create_bd_port -dir I -type intr ps_intr_10
#### create_bd_port -dir I -type intr ps_intr_11
#### create_bd_port -dir I -type intr ps_intr_12
#### create_bd_port -dir I -type intr ps_intr_13
#### ad_ip_instance processing_system7 sys_ps7
#### ad_ip_parameter sys_ps7 CONFIG.preset ZC706
#### ad_ip_parameter sys_ps7 CONFIG.PCW_TTC0_PERIPHERAL_ENABLE 0
#### ad_ip_parameter sys_ps7 CONFIG.PCW_EN_CLK1_PORT 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_EN_RST1_PORT 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_EN_CLK2_PORT 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_EN_RST2_PORT 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ 100.0
#### ad_ip_parameter sys_ps7 CONFIG.PCW_FPGA1_PERIPHERAL_FREQMHZ 200.0
#### ad_ip_parameter sys_ps7 CONFIG.PCW_USE_FABRIC_INTERRUPT 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_IRQ_F2P_INTR 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_GPIO_EMIO_GPIO_ENABLE 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_GPIO_EMIO_GPIO_IO 64
#### ad_ip_parameter sys_ps7 CONFIG.PCW_USE_DMA0 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_IRQ_F2P_MODE REVERSE
#### ad_ip_parameter sys_ps7 CONFIG.PCW_SPI0_PERIPHERAL_ENABLE 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_SPI0_SPI0_IO EMIO
#### ad_ip_parameter sys_ps7 CONFIG.PCW_SPI1_PERIPHERAL_ENABLE 1
#### ad_ip_parameter sys_ps7 CONFIG.PCW_SPI1_SPI1_IO EMIO
#### ad_ip_instance axi_iic axi_iic_main
#### ad_ip_parameter axi_iic_main CONFIG.USE_BOARD_FLOW true
#### ad_ip_parameter axi_iic_main CONFIG.IIC_BOARD_INTERFACE Custom
#### ad_ip_instance xlconcat sys_concat_intc
#### ad_ip_parameter sys_concat_intc CONFIG.NUM_PORTS 16
#### ad_ip_instance proc_sys_reset sys_rstgen
#### ad_ip_parameter sys_rstgen CONFIG.C_EXT_RST_WIDTH 1
#### ad_ip_instance axi_clkgen axi_hdmi_clkgen
#### ad_ip_instance axi_hdmi_tx axi_hdmi_core
#### ad_ip_instance axi_vdma axi_hdmi_dma
#### ad_ip_parameter axi_hdmi_dma CONFIG.C_M_AXIS_MM2S_TDATA_WIDTH 64
#### ad_ip_parameter axi_hdmi_dma CONFIG.C_USE_MM2S_FSYNC 1
#### ad_ip_parameter axi_hdmi_dma CONFIG.C_INCLUDE_S2MM 0
#### ad_ip_instance clk_wiz sys_audio_clkgen
create_bd_cell: Time (s): cpu = 00:00:06 ; elapsed = 00:00:15 . Memory (MB): peak = 1511.293 ; gain = 176.508 ; free physical = 183 ; free virtual = 9493
#### ad_ip_parameter sys_audio_clkgen CONFIG.CLKOUT1_REQUESTED_OUT_FREQ 12.288
#### ad_ip_parameter sys_audio_clkgen CONFIG.USE_LOCKED false
#### ad_ip_parameter sys_audio_clkgen CONFIG.USE_RESET true
#### ad_ip_parameter sys_audio_clkgen CONFIG.USE_PHASE_ALIGNMENT false
#### ad_ip_parameter sys_audio_clkgen CONFIG.RESET_TYPE ACTIVE_LOW
#### ad_ip_parameter sys_audio_clkgen CONFIG.PRIM_SOURCE No_buffer
#### ad_ip_instance axi_spdif_tx axi_spdif_tx_core
#### ad_ip_parameter axi_spdif_tx_core CONFIG.DMA_TYPE 1
#### ad_ip_parameter axi_spdif_tx_core CONFIG.S_AXI_ADDRESS_WIDTH 16
#### ad_connect  sys_cpu_clk sys_ps7/FCLK_CLK0
create_bd_net sys_cpu_clk
connect_bd_net -net /sys_cpu_clk /sys_ps7/FCLK_CLK0
#### ad_connect  sys_200m_clk sys_ps7/FCLK_CLK1
create_bd_net sys_200m_clk
connect_bd_net -net /sys_200m_clk /sys_ps7/FCLK_CLK1
#### ad_connect  sys_cpu_reset sys_rstgen/peripheral_reset
create_bd_net sys_cpu_reset
connect_bd_net -net /sys_cpu_reset /sys_rstgen/peripheral_reset
#### ad_connect  sys_cpu_resetn sys_rstgen/peripheral_aresetn
create_bd_net sys_cpu_resetn
connect_bd_net -net /sys_cpu_resetn /sys_rstgen/peripheral_aresetn
#### ad_connect  sys_cpu_clk sys_rstgen/slowest_sync_clk
connect_bd_net -net /sys_cpu_clk /sys_rstgen/slowest_sync_clk
#### ad_connect  sys_rstgen/ext_reset_in sys_ps7/FCLK_RESET0_N
connect_bd_net /sys_rstgen/ext_reset_in /sys_ps7/FCLK_RESET0_N
#### ad_connect  ddr sys_ps7/DDR
connect_bd_intf_net /ddr /sys_ps7/DDR
#### ad_connect  gpio_i sys_ps7/GPIO_I
connect_bd_net /gpio_i /sys_ps7/GPIO_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_I is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
#### ad_connect  gpio_o sys_ps7/GPIO_O
connect_bd_net /gpio_o /sys_ps7/GPIO_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_O is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
#### ad_connect  gpio_t sys_ps7/GPIO_T
connect_bd_net /gpio_t /sys_ps7/GPIO_T
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_T is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
#### ad_connect  fixed_io sys_ps7/FIXED_IO
connect_bd_intf_net /fixed_io /sys_ps7/FIXED_IO
#### ad_connect  iic_main axi_iic_main/iic
connect_bd_intf_net /iic_main /axi_iic_main/IIC
#### ad_connect  sys_200m_clk axi_hdmi_clkgen/clk
connect_bd_net -net /sys_200m_clk /axi_hdmi_clkgen/clk
#### ad_connect  spi0_csn_2_o sys_ps7/SPI0_SS2_O
connect_bd_net /spi0_csn_2_o /sys_ps7/SPI0_SS2_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SS2_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_csn_1_o sys_ps7/SPI0_SS1_O
connect_bd_net /spi0_csn_1_o /sys_ps7/SPI0_SS1_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SS1_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_csn_0_o sys_ps7/SPI0_SS_O
connect_bd_net /spi0_csn_0_o /sys_ps7/SPI0_SS_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SS_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_csn_i sys_ps7/SPI0_SS_I
connect_bd_net /spi0_csn_i /sys_ps7/SPI0_SS_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SS_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_clk_i sys_ps7/SPI0_SCLK_I
connect_bd_net /spi0_clk_i /sys_ps7/SPI0_SCLK_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SCLK_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_clk_o sys_ps7/SPI0_SCLK_O
connect_bd_net /spi0_clk_o /sys_ps7/SPI0_SCLK_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_SCLK_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_sdo_i sys_ps7/SPI0_MOSI_I
connect_bd_net /spi0_sdo_i /sys_ps7/SPI0_MOSI_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_MOSI_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_sdo_o sys_ps7/SPI0_MOSI_O
connect_bd_net /spi0_sdo_o /sys_ps7/SPI0_MOSI_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_MOSI_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi0_sdi_i sys_ps7/SPI0_MISO_I
connect_bd_net /spi0_sdi_i /sys_ps7/SPI0_MISO_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI0_MISO_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_0
#### ad_connect  spi1_csn_2_o sys_ps7/SPI1_SS2_O
connect_bd_net /spi1_csn_2_o /sys_ps7/SPI1_SS2_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SS2_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_csn_1_o sys_ps7/SPI1_SS1_O
connect_bd_net /spi1_csn_1_o /sys_ps7/SPI1_SS1_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SS1_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_csn_0_o sys_ps7/SPI1_SS_O
connect_bd_net /spi1_csn_0_o /sys_ps7/SPI1_SS_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SS_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_csn_i sys_ps7/SPI1_SS_I
connect_bd_net /spi1_csn_i /sys_ps7/SPI1_SS_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SS_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_clk_i sys_ps7/SPI1_SCLK_I
connect_bd_net /spi1_clk_i /sys_ps7/SPI1_SCLK_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SCLK_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_clk_o sys_ps7/SPI1_SCLK_O
connect_bd_net /spi1_clk_o /sys_ps7/SPI1_SCLK_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_SCLK_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_sdo_i sys_ps7/SPI1_MOSI_I
connect_bd_net /spi1_sdo_i /sys_ps7/SPI1_MOSI_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_MOSI_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_sdo_o sys_ps7/SPI1_MOSI_O
connect_bd_net /spi1_sdo_o /sys_ps7/SPI1_MOSI_O
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_MOSI_O is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  spi1_sdi_i sys_ps7/SPI1_MISO_I
connect_bd_net /spi1_sdi_i /sys_ps7/SPI1_MISO_I
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/SPI1_MISO_I is being overridden by the user. This pin will not be connected as a part of interface connection SPI_1
#### ad_connect  sys_cpu_clk axi_hdmi_core/vdma_clk
connect_bd_net -net /sys_cpu_clk /axi_hdmi_core/vdma_clk
#### ad_connect  sys_cpu_clk axi_hdmi_dma/m_axis_mm2s_aclk
connect_bd_net -net /sys_cpu_clk /axi_hdmi_dma/m_axis_mm2s_aclk
#### ad_connect  axi_hdmi_core/hdmi_clk axi_hdmi_clkgen/clk_0
connect_bd_net /axi_hdmi_core/hdmi_clk /axi_hdmi_clkgen/clk_0
#### ad_connect  axi_hdmi_core/hdmi_out_clk hdmi_out_clk
connect_bd_net /axi_hdmi_core/hdmi_out_clk /hdmi_out_clk
#### ad_connect  axi_hdmi_core/hdmi_24_hsync hdmi_hsync
connect_bd_net /axi_hdmi_core/hdmi_24_hsync /hdmi_hsync
#### ad_connect  axi_hdmi_core/hdmi_24_vsync hdmi_vsync
connect_bd_net /axi_hdmi_core/hdmi_24_vsync /hdmi_vsync
#### ad_connect  axi_hdmi_core/hdmi_24_data_e hdmi_data_e
connect_bd_net /axi_hdmi_core/hdmi_24_data_e /hdmi_data_e
#### ad_connect  axi_hdmi_core/hdmi_24_data hdmi_data
connect_bd_net /axi_hdmi_core/hdmi_24_data /hdmi_data
#### ad_connect  axi_hdmi_core/vdma_valid axi_hdmi_dma/m_axis_mm2s_tvalid
connect_bd_net /axi_hdmi_core/vdma_valid /axi_hdmi_dma/m_axis_mm2s_tvalid
WARNING: [BD 41-1306] The connection to interface pin /axi_hdmi_dma/m_axis_mm2s_tvalid is being overridden by the user. This pin will not be connected as a part of interface connection M_AXIS_MM2S
#### ad_connect  axi_hdmi_core/vdma_data axi_hdmi_dma/m_axis_mm2s_tdata
connect_bd_net /axi_hdmi_core/vdma_data /axi_hdmi_dma/m_axis_mm2s_tdata
WARNING: [BD 41-1306] The connection to interface pin /axi_hdmi_dma/m_axis_mm2s_tdata is being overridden by the user. This pin will not be connected as a part of interface connection M_AXIS_MM2S
#### ad_connect  axi_hdmi_core/vdma_ready axi_hdmi_dma/m_axis_mm2s_tready
connect_bd_net /axi_hdmi_core/vdma_ready /axi_hdmi_dma/m_axis_mm2s_tready
WARNING: [BD 41-1306] The connection to interface pin /axi_hdmi_dma/m_axis_mm2s_tready is being overridden by the user. This pin will not be connected as a part of interface connection M_AXIS_MM2S
#### ad_connect  axi_hdmi_core/vdma_fs axi_hdmi_dma/mm2s_fsync
connect_bd_net /axi_hdmi_core/vdma_fs /axi_hdmi_dma/mm2s_fsync
#### ad_connect  axi_hdmi_core/vdma_fs axi_hdmi_core/vdma_fs_ret
connect_bd_net /axi_hdmi_core/vdma_fs /axi_hdmi_core/vdma_fs_ret
#### ad_connect  sys_cpu_clk axi_spdif_tx_core/DMA_REQ_ACLK
connect_bd_net -net /sys_cpu_clk /axi_spdif_tx_core/dma_req_aclk
#### ad_connect  sys_cpu_clk sys_ps7/DMA0_ACLK
connect_bd_net -net /sys_cpu_clk /sys_ps7/DMA0_ACLK
#### ad_connect  sys_cpu_resetn axi_spdif_tx_core/DMA_REQ_RSTN
connect_bd_net -net /sys_cpu_resetn /axi_spdif_tx_core/dma_req_rstn
#### ad_connect  sys_ps7/DMA0_REQ axi_spdif_tx_core/DMA_REQ
connect_bd_intf_net /sys_ps7/DMA0_REQ /axi_spdif_tx_core/dma_req
#### ad_connect  sys_ps7/DMA0_ACK axi_spdif_tx_core/DMA_ACK
connect_bd_intf_net /sys_ps7/DMA0_ACK /axi_spdif_tx_core/dma_ack
#### ad_connect  sys_200m_clk sys_audio_clkgen/clk_in1
connect_bd_net -net /sys_200m_clk /sys_audio_clkgen/clk_in1
#### ad_connect  sys_cpu_resetn sys_audio_clkgen/resetn
connect_bd_net -net /sys_cpu_resetn /sys_audio_clkgen/resetn
#### ad_connect  sys_audio_clkgen/clk_out1 axi_spdif_tx_core/spdif_data_clk
connect_bd_net /sys_audio_clkgen/clk_out1 /axi_spdif_tx_core/spdif_data_clk
#### ad_connect  spdif axi_spdif_tx_core/spdif_tx_o
connect_bd_net /spdif /axi_spdif_tx_core/spdif_tx_o
#### ad_connect  sys_concat_intc/dout sys_ps7/IRQ_F2P
connect_bd_net /sys_concat_intc/dout /sys_ps7/IRQ_F2P
#### ad_connect  sys_concat_intc/In15 axi_hdmi_dma/mm2s_introut
connect_bd_net /sys_concat_intc/In15 /axi_hdmi_dma/mm2s_introut
#### ad_connect  sys_concat_intc/In14 axi_iic_main/iic2intc_irpt
connect_bd_net /sys_concat_intc/In14 /axi_iic_main/iic2intc_irpt
#### ad_connect  sys_concat_intc/In13 ps_intr_13
connect_bd_net /sys_concat_intc/In13 /ps_intr_13
#### ad_connect  sys_concat_intc/In12 ps_intr_12
connect_bd_net /sys_concat_intc/In12 /ps_intr_12
#### ad_connect  sys_concat_intc/In11 ps_intr_11
connect_bd_net /sys_concat_intc/In11 /ps_intr_11
#### ad_connect  sys_concat_intc/In10 ps_intr_10
connect_bd_net /sys_concat_intc/In10 /ps_intr_10
#### ad_connect  sys_concat_intc/In9 ps_intr_09
connect_bd_net /sys_concat_intc/In9 /ps_intr_09
#### ad_connect  sys_concat_intc/In8 ps_intr_08
connect_bd_net /sys_concat_intc/In8 /ps_intr_08
#### ad_connect  sys_concat_intc/In7 ps_intr_07
connect_bd_net /sys_concat_intc/In7 /ps_intr_07
#### ad_connect  sys_concat_intc/In6 ps_intr_06
connect_bd_net /sys_concat_intc/In6 /ps_intr_06
#### ad_connect  sys_concat_intc/In5 ps_intr_05
connect_bd_net /sys_concat_intc/In5 /ps_intr_05
#### ad_connect  sys_concat_intc/In4 ps_intr_04
connect_bd_net /sys_concat_intc/In4 /ps_intr_04
#### ad_connect  sys_concat_intc/In3 ps_intr_03
connect_bd_net /sys_concat_intc/In3 /ps_intr_03
#### ad_connect  sys_concat_intc/In2 ps_intr_02
connect_bd_net /sys_concat_intc/In2 /ps_intr_02
#### ad_connect  sys_concat_intc/In1 ps_intr_01
connect_bd_net /sys_concat_intc/In1 /ps_intr_01
#### ad_connect  sys_concat_intc/In0 ps_intr_00
connect_bd_net /sys_concat_intc/In0 /ps_intr_00
#### ad_cpu_interconnect 0x41600000 axi_iic_main
connect_bd_net -net /sys_cpu_clk /sys_ps7/M_AXI_GP0_ACLK
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/ACLK
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/S00_ACLK
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/S00_ARESETN
connect_bd_intf_net /axi_cpu_interconnect/S00_AXI /sys_ps7/M_AXI_GP0
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M00_ACLK
connect_bd_net -net /sys_cpu_clk /axi_iic_main/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M00_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_iic_main/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M00_AXI /axi_iic_main/S_AXI
#### ad_cpu_interconnect 0x79000000 axi_hdmi_clkgen
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M01_ACLK
connect_bd_net -net /sys_cpu_clk /axi_hdmi_clkgen/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M01_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_hdmi_clkgen/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M01_AXI /axi_hdmi_clkgen/s_axi
#### ad_cpu_interconnect 0x43000000 axi_hdmi_dma
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M02_ACLK
connect_bd_net -net /sys_cpu_clk /axi_hdmi_dma/s_axi_lite_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M02_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_hdmi_dma/axi_resetn
connect_bd_intf_net /axi_cpu_interconnect/M02_AXI /axi_hdmi_dma/S_AXI_LITE
#### ad_cpu_interconnect 0x70e00000 axi_hdmi_core
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M03_ACLK
connect_bd_net -net /sys_cpu_clk /axi_hdmi_core/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M03_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_hdmi_core/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M03_AXI /axi_hdmi_core/s_axi
#### ad_cpu_interconnect 0x75c00000 axi_spdif_tx_core
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M04_ACLK
connect_bd_net -net /sys_cpu_clk /axi_spdif_tx_core/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M04_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_spdif_tx_core/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M04_AXI /axi_spdif_tx_core/s_axi
#### ad_mem_hp0_interconnect sys_cpu_clk sys_ps7/S_AXI_HP0
connect_bd_net -net /sys_cpu_resetn /axi_hp0_interconnect/ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp0_interconnect/ACLK
connect_bd_net -net /sys_cpu_resetn /axi_hp0_interconnect/M00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp0_interconnect/M00_ACLK
connect_bd_intf_net /axi_hp0_interconnect/M00_AXI /sys_ps7/S_AXI_HP0
connect_bd_net -net /sys_cpu_clk /sys_ps7/S_AXI_HP0_ACLK
#### ad_mem_hp0_interconnect sys_cpu_clk axi_hdmi_dma/M_AXI_MM2S
connect_bd_net -net /sys_cpu_resetn /axi_hp0_interconnect/S00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp0_interconnect/S00_ACLK
connect_bd_intf_net /axi_hp0_interconnect/S00_AXI /axi_hdmi_dma/M_AXI_MM2S
connect_bd_net -net /sys_cpu_clk /axi_hdmi_dma/m_axi_mm2s_aclk
</sys_ps7/S_AXI_HP0/HP0_DDR_LOWOCM> is being mapped into </axi_hdmi_dma/Data_MM2S> at <0x00000000 [ 1G ]>
### source ../common/fmcomms2_bd.tcl
#### create_bd_port -dir I rx_clk_in_p
#### create_bd_port -dir I rx_clk_in_n
#### create_bd_port -dir I rx_frame_in_p
#### create_bd_port -dir I rx_frame_in_n
#### create_bd_port -dir I -from 5 -to 0 rx_data_in_p
#### create_bd_port -dir I -from 5 -to 0 rx_data_in_n
#### create_bd_port -dir O tx_clk_out_p
#### create_bd_port -dir O tx_clk_out_n
#### create_bd_port -dir O tx_frame_out_p
#### create_bd_port -dir O tx_frame_out_n
#### create_bd_port -dir O -from 5 -to 0 tx_data_out_p
#### create_bd_port -dir O -from 5 -to 0 tx_data_out_n
#### create_bd_port -dir O enable
#### create_bd_port -dir O txnrx
#### create_bd_port -dir I up_enable
#### create_bd_port -dir I up_txnrx
#### create_bd_port -dir O tdd_sync_o
#### create_bd_port -dir I tdd_sync_i
#### create_bd_port -dir O tdd_sync_t
#### ad_ip_instance axi_ad9361 axi_ad9361
#### ad_ip_parameter axi_ad9361 CONFIG.ID 0
#### ad_connect sys_200m_clk axi_ad9361/delay_clk
connect_bd_net -net /sys_200m_clk /axi_ad9361/delay_clk
#### ad_connect axi_ad9361/l_clk axi_ad9361/clk
connect_bd_net /axi_ad9361/l_clk /axi_ad9361/clk
#### ad_connect rx_clk_in_p axi_ad9361/rx_clk_in_p
connect_bd_net /rx_clk_in_p /axi_ad9361/rx_clk_in_p
#### ad_connect rx_clk_in_n axi_ad9361/rx_clk_in_n
connect_bd_net /rx_clk_in_n /axi_ad9361/rx_clk_in_n
#### ad_connect rx_frame_in_p axi_ad9361/rx_frame_in_p
connect_bd_net /rx_frame_in_p /axi_ad9361/rx_frame_in_p
#### ad_connect rx_frame_in_n axi_ad9361/rx_frame_in_n
connect_bd_net /rx_frame_in_n /axi_ad9361/rx_frame_in_n
#### ad_connect rx_data_in_p axi_ad9361/rx_data_in_p
connect_bd_net /rx_data_in_p /axi_ad9361/rx_data_in_p
#### ad_connect rx_data_in_n axi_ad9361/rx_data_in_n
connect_bd_net /rx_data_in_n /axi_ad9361/rx_data_in_n
#### ad_connect tx_clk_out_p axi_ad9361/tx_clk_out_p
connect_bd_net /tx_clk_out_p /axi_ad9361/tx_clk_out_p
#### ad_connect tx_clk_out_n axi_ad9361/tx_clk_out_n
connect_bd_net /tx_clk_out_n /axi_ad9361/tx_clk_out_n
#### ad_connect tx_frame_out_p axi_ad9361/tx_frame_out_p
connect_bd_net /tx_frame_out_p /axi_ad9361/tx_frame_out_p
#### ad_connect tx_frame_out_n axi_ad9361/tx_frame_out_n
connect_bd_net /tx_frame_out_n /axi_ad9361/tx_frame_out_n
#### ad_connect tx_data_out_p axi_ad9361/tx_data_out_p
connect_bd_net /tx_data_out_p /axi_ad9361/tx_data_out_p
#### ad_connect tx_data_out_n axi_ad9361/tx_data_out_n
connect_bd_net /tx_data_out_n /axi_ad9361/tx_data_out_n
#### ad_connect enable axi_ad9361/enable
connect_bd_net /enable /axi_ad9361/enable
#### ad_connect txnrx axi_ad9361/txnrx
connect_bd_net /txnrx /axi_ad9361/txnrx
#### ad_connect up_enable axi_ad9361/up_enable
connect_bd_net /up_enable /axi_ad9361/up_enable
#### ad_connect up_txnrx axi_ad9361/up_txnrx
connect_bd_net /up_txnrx /axi_ad9361/up_txnrx
#### ad_ip_instance util_tdd_sync util_ad9361_tdd_sync
#### ad_ip_parameter util_ad9361_tdd_sync CONFIG.TDD_SYNC_PERIOD 10000000
#### ad_connect sys_cpu_clk util_ad9361_tdd_sync/clk
connect_bd_net -net /sys_cpu_clk /util_ad9361_tdd_sync/clk
#### ad_connect sys_cpu_resetn util_ad9361_tdd_sync/rstn
connect_bd_net -net /sys_cpu_resetn /util_ad9361_tdd_sync/rstn
#### ad_connect util_ad9361_tdd_sync/sync_out axi_ad9361/tdd_sync
connect_bd_net /util_ad9361_tdd_sync/sync_out /axi_ad9361/tdd_sync
#### ad_connect util_ad9361_tdd_sync/sync_mode axi_ad9361/tdd_sync_cntr
connect_bd_net /util_ad9361_tdd_sync/sync_mode /axi_ad9361/tdd_sync_cntr
#### ad_connect tdd_sync_t axi_ad9361/tdd_sync_cntr
connect_bd_net /tdd_sync_t /axi_ad9361/tdd_sync_cntr
#### ad_connect tdd_sync_o util_ad9361_tdd_sync/sync_out
connect_bd_net /tdd_sync_o /util_ad9361_tdd_sync/sync_out
#### ad_connect tdd_sync_i util_ad9361_tdd_sync/sync_in
connect_bd_net /tdd_sync_i /util_ad9361_tdd_sync/sync_in
#### ad_ip_instance xlconcat util_ad9361_divclk_sel_concat
WARNING: [BD 41-1753] The name 'util_ad9361_divclk_sel_concat' you have specified is long. The Windows OS has path length limitations. It is recommended you use shorter names(less than 25 characters) to reduce the likelihood of issues when/if running on windows OS.
#### ad_ip_parameter util_ad9361_divclk_sel_concat CONFIG.NUM_PORTS 2
#### ad_connect axi_ad9361/adc_r1_mode util_ad9361_divclk_sel_concat/In0
connect_bd_net /axi_ad9361/adc_r1_mode /util_ad9361_divclk_sel_concat/In0
#### ad_connect axi_ad9361/dac_r1_mode util_ad9361_divclk_sel_concat/In1
connect_bd_net /axi_ad9361/dac_r1_mode /util_ad9361_divclk_sel_concat/In1
#### ad_ip_instance util_reduced_logic util_ad9361_divclk_sel
#### ad_ip_parameter util_ad9361_divclk_sel CONFIG.C_SIZE 2
#### ad_connect util_ad9361_divclk_sel_concat/dout util_ad9361_divclk_sel/Op1
connect_bd_net /util_ad9361_divclk_sel_concat/dout /util_ad9361_divclk_sel/Op1
#### ad_ip_instance util_clkdiv util_ad9361_divclk
#### ad_connect util_ad9361_divclk_sel/Res util_ad9361_divclk/clk_sel 
connect_bd_net /util_ad9361_divclk_sel/Res /util_ad9361_divclk/clk_sel
#### ad_connect axi_ad9361/l_clk util_ad9361_divclk/clk
connect_bd_net /axi_ad9361/l_clk /util_ad9361_divclk/clk
#### ad_ip_instance proc_sys_reset util_ad9361_divclk_reset
#### ad_connect sys_rstgen/peripheral_aresetn util_ad9361_divclk_reset/ext_reset_in 
connect_bd_net /sys_rstgen/peripheral_aresetn /util_ad9361_divclk_reset/ext_reset_in
#### ad_connect util_ad9361_divclk/clk_out util_ad9361_divclk_reset/slowest_sync_clk
connect_bd_net /util_ad9361_divclk/clk_out /util_ad9361_divclk_reset/slowest_sync_clk
#### ad_ip_instance util_wfifo util_ad9361_adc_fifo
#### ad_ip_parameter util_ad9361_adc_fifo CONFIG.NUM_OF_CHANNELS 4
#### ad_ip_parameter util_ad9361_adc_fifo CONFIG.DIN_ADDRESS_WIDTH 4
#### ad_ip_parameter util_ad9361_adc_fifo CONFIG.DIN_DATA_WIDTH 16
#### ad_ip_parameter util_ad9361_adc_fifo CONFIG.DOUT_DATA_WIDTH 16
#### ad_connect axi_ad9361/l_clk util_ad9361_adc_fifo/din_clk
connect_bd_net /axi_ad9361/l_clk /util_ad9361_adc_fifo/din_clk
#### ad_connect axi_ad9361/rst util_ad9361_adc_fifo/din_rst
connect_bd_net /axi_ad9361/rst /util_ad9361_adc_fifo/din_rst
#### ad_connect util_ad9361_divclk/clk_out util_ad9361_adc_fifo/dout_clk
connect_bd_net /util_ad9361_divclk/clk_out /util_ad9361_adc_fifo/dout_clk
#### ad_connect util_ad9361_divclk_reset/peripheral_aresetn util_ad9361_adc_fifo/dout_rstn
connect_bd_net /util_ad9361_divclk_reset/peripheral_aresetn /util_ad9361_adc_fifo/dout_rstn
#### ad_connect axi_ad9361/adc_enable_i0 util_ad9361_adc_fifo/din_enable_0
connect_bd_net /axi_ad9361/adc_enable_i0 /util_ad9361_adc_fifo/din_enable_0
#### ad_connect axi_ad9361/adc_valid_i0 util_ad9361_adc_fifo/din_valid_0
connect_bd_net /axi_ad9361/adc_valid_i0 /util_ad9361_adc_fifo/din_valid_0
#### ad_connect axi_ad9361/adc_data_i0 util_ad9361_adc_fifo/din_data_0
connect_bd_net /axi_ad9361/adc_data_i0 /util_ad9361_adc_fifo/din_data_0
#### ad_connect axi_ad9361/adc_enable_q0 util_ad9361_adc_fifo/din_enable_1
connect_bd_net /axi_ad9361/adc_enable_q0 /util_ad9361_adc_fifo/din_enable_1
#### ad_connect axi_ad9361/adc_valid_q0 util_ad9361_adc_fifo/din_valid_1
connect_bd_net /axi_ad9361/adc_valid_q0 /util_ad9361_adc_fifo/din_valid_1
#### ad_connect axi_ad9361/adc_data_q0 util_ad9361_adc_fifo/din_data_1
connect_bd_net /axi_ad9361/adc_data_q0 /util_ad9361_adc_fifo/din_data_1
#### ad_connect axi_ad9361/adc_enable_i1 util_ad9361_adc_fifo/din_enable_2
connect_bd_net /axi_ad9361/adc_enable_i1 /util_ad9361_adc_fifo/din_enable_2
#### ad_connect axi_ad9361/adc_valid_i1 util_ad9361_adc_fifo/din_valid_2
connect_bd_net /axi_ad9361/adc_valid_i1 /util_ad9361_adc_fifo/din_valid_2
#### ad_connect axi_ad9361/adc_data_i1 util_ad9361_adc_fifo/din_data_2
connect_bd_net /axi_ad9361/adc_data_i1 /util_ad9361_adc_fifo/din_data_2
#### ad_connect axi_ad9361/adc_enable_q1 util_ad9361_adc_fifo/din_enable_3
connect_bd_net /axi_ad9361/adc_enable_q1 /util_ad9361_adc_fifo/din_enable_3
#### ad_connect axi_ad9361/adc_valid_q1 util_ad9361_adc_fifo/din_valid_3
connect_bd_net /axi_ad9361/adc_valid_q1 /util_ad9361_adc_fifo/din_valid_3
#### ad_connect axi_ad9361/adc_data_q1 util_ad9361_adc_fifo/din_data_3
connect_bd_net /axi_ad9361/adc_data_q1 /util_ad9361_adc_fifo/din_data_3
#### ad_connect util_ad9361_adc_fifo/din_ovf axi_ad9361/adc_dovf
connect_bd_net /util_ad9361_adc_fifo/din_ovf /axi_ad9361/adc_dovf
#### ad_ip_instance util_cpack util_ad9361_adc_pack
#### ad_ip_parameter util_ad9361_adc_pack CONFIG.NUM_OF_CHANNELS 4
#### ad_ip_parameter util_ad9361_adc_pack CONFIG.CHANNEL_DATA_WIDTH 16
#### ad_connect util_ad9361_divclk/clk_out util_ad9361_adc_pack/adc_clk
connect_bd_net /util_ad9361_divclk/clk_out /util_ad9361_adc_pack/adc_clk
#### ad_connect util_ad9361_divclk_reset/peripheral_reset util_ad9361_adc_pack/adc_rst
connect_bd_net /util_ad9361_divclk_reset/peripheral_reset /util_ad9361_adc_pack/adc_rst
#### ad_connect util_ad9361_adc_fifo/dout_enable_0 util_ad9361_adc_pack/adc_enable_0
connect_bd_net /util_ad9361_adc_fifo/dout_enable_0 /util_ad9361_adc_pack/adc_enable_0
#### ad_connect util_ad9361_adc_fifo/dout_valid_0 util_ad9361_adc_pack/adc_valid_0
connect_bd_net /util_ad9361_adc_fifo/dout_valid_0 /util_ad9361_adc_pack/adc_valid_0
#### ad_connect util_ad9361_adc_fifo/dout_data_0 util_ad9361_adc_pack/adc_data_0
connect_bd_net /util_ad9361_adc_fifo/dout_data_0 /util_ad9361_adc_pack/adc_data_0
#### ad_connect util_ad9361_adc_fifo/dout_enable_1 util_ad9361_adc_pack/adc_enable_1
connect_bd_net /util_ad9361_adc_fifo/dout_enable_1 /util_ad9361_adc_pack/adc_enable_1
#### ad_connect util_ad9361_adc_fifo/dout_valid_1 util_ad9361_adc_pack/adc_valid_1
connect_bd_net /util_ad9361_adc_fifo/dout_valid_1 /util_ad9361_adc_pack/adc_valid_1
#### ad_connect util_ad9361_adc_fifo/dout_data_1 util_ad9361_adc_pack/adc_data_1
connect_bd_net /util_ad9361_adc_fifo/dout_data_1 /util_ad9361_adc_pack/adc_data_1
#### ad_connect util_ad9361_adc_fifo/dout_enable_2 util_ad9361_adc_pack/adc_enable_2
connect_bd_net /util_ad9361_adc_fifo/dout_enable_2 /util_ad9361_adc_pack/adc_enable_2
#### ad_connect util_ad9361_adc_fifo/dout_valid_2 util_ad9361_adc_pack/adc_valid_2
connect_bd_net /util_ad9361_adc_fifo/dout_valid_2 /util_ad9361_adc_pack/adc_valid_2
#### ad_connect util_ad9361_adc_fifo/dout_data_2 util_ad9361_adc_pack/adc_data_2
connect_bd_net /util_ad9361_adc_fifo/dout_data_2 /util_ad9361_adc_pack/adc_data_2
#### ad_connect util_ad9361_adc_fifo/dout_enable_3 util_ad9361_adc_pack/adc_enable_3
connect_bd_net /util_ad9361_adc_fifo/dout_enable_3 /util_ad9361_adc_pack/adc_enable_3
#### ad_connect util_ad9361_adc_fifo/dout_valid_3 util_ad9361_adc_pack/adc_valid_3
connect_bd_net /util_ad9361_adc_fifo/dout_valid_3 /util_ad9361_adc_pack/adc_valid_3
#### ad_connect util_ad9361_adc_fifo/dout_data_3 util_ad9361_adc_pack/adc_data_3
connect_bd_net /util_ad9361_adc_fifo/dout_data_3 /util_ad9361_adc_pack/adc_data_3
#### ad_ip_instance axi_dmac axi_ad9361_adc_dma
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_TYPE_SRC 2
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_TYPE_DEST 0
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.CYCLIC 0
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.SYNC_TRANSFER_START 1
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.AXI_SLICE_SRC 0
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.AXI_SLICE_DEST 0
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_2D_TRANSFER 0
#### ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_DATA_WIDTH_SRC 64
#### ad_connect util_ad9361_divclk/clk_out axi_ad9361_adc_dma/fifo_wr_clk
connect_bd_net /util_ad9361_divclk/clk_out /axi_ad9361_adc_dma/fifo_wr_clk
#### ad_connect util_ad9361_adc_pack/adc_valid axi_ad9361_adc_dma/fifo_wr_en
connect_bd_net /util_ad9361_adc_pack/adc_valid /axi_ad9361_adc_dma/fifo_wr_en
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_adc_dma/fifo_wr_en is being overridden by the user. This pin will not be connected as a part of interface connection fifo_wr
#### ad_connect util_ad9361_adc_pack/adc_sync axi_ad9361_adc_dma/fifo_wr_sync
connect_bd_net /util_ad9361_adc_pack/adc_sync /axi_ad9361_adc_dma/fifo_wr_sync
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_adc_dma/fifo_wr_sync is being overridden by the user. This pin will not be connected as a part of interface connection fifo_wr
#### ad_connect util_ad9361_adc_pack/adc_data axi_ad9361_adc_dma/fifo_wr_din
connect_bd_net /util_ad9361_adc_pack/adc_data /axi_ad9361_adc_dma/fifo_wr_din
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_adc_dma/fifo_wr_din is being overridden by the user. This pin will not be connected as a part of interface connection fifo_wr
#### ad_connect axi_ad9361_adc_dma/fifo_wr_overflow util_ad9361_adc_fifo/dout_ovf
connect_bd_net /axi_ad9361_adc_dma/fifo_wr_overflow /util_ad9361_adc_fifo/dout_ovf
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_adc_dma/fifo_wr_overflow is being overridden by the user. This pin will not be connected as a part of interface connection fifo_wr
#### ad_connect sys_cpu_resetn axi_ad9361_adc_dma/m_dest_axi_aresetn
connect_bd_net -net /sys_cpu_resetn /axi_ad9361_adc_dma/m_dest_axi_aresetn
#### ad_ip_instance util_rfifo axi_ad9361_dac_fifo
#### ad_ip_parameter axi_ad9361_dac_fifo CONFIG.DIN_DATA_WIDTH 16
#### ad_ip_parameter axi_ad9361_dac_fifo CONFIG.DOUT_DATA_WIDTH 16
#### ad_ip_parameter axi_ad9361_dac_fifo CONFIG.DIN_ADDRESS_WIDTH 4
#### ad_connect axi_ad9361/l_clk axi_ad9361_dac_fifo/dout_clk
connect_bd_net /axi_ad9361/l_clk /axi_ad9361_dac_fifo/dout_clk
#### ad_connect axi_ad9361/rst axi_ad9361_dac_fifo/dout_rst
connect_bd_net /axi_ad9361/rst /axi_ad9361_dac_fifo/dout_rst
#### ad_connect util_ad9361_divclk/clk_out axi_ad9361_dac_fifo/din_clk
connect_bd_net /util_ad9361_divclk/clk_out /axi_ad9361_dac_fifo/din_clk
#### ad_connect util_ad9361_divclk_reset/peripheral_aresetn axi_ad9361_dac_fifo/din_rstn
connect_bd_net /util_ad9361_divclk_reset/peripheral_aresetn /axi_ad9361_dac_fifo/din_rstn
#### ad_connect axi_ad9361_dac_fifo/dout_enable_0 axi_ad9361/dac_enable_i0
connect_bd_net /axi_ad9361_dac_fifo/dout_enable_0 /axi_ad9361/dac_enable_i0
#### ad_connect axi_ad9361_dac_fifo/dout_valid_0 axi_ad9361/dac_valid_i0
connect_bd_net /axi_ad9361_dac_fifo/dout_valid_0 /axi_ad9361/dac_valid_i0
#### ad_connect axi_ad9361_dac_fifo/dout_data_0 axi_ad9361/dac_data_i0
connect_bd_net /axi_ad9361_dac_fifo/dout_data_0 /axi_ad9361/dac_data_i0
#### ad_connect axi_ad9361_dac_fifo/dout_enable_1 axi_ad9361/dac_enable_q0
connect_bd_net /axi_ad9361_dac_fifo/dout_enable_1 /axi_ad9361/dac_enable_q0
#### ad_connect axi_ad9361_dac_fifo/dout_valid_1 axi_ad9361/dac_valid_q0
connect_bd_net /axi_ad9361_dac_fifo/dout_valid_1 /axi_ad9361/dac_valid_q0
#### ad_connect axi_ad9361_dac_fifo/dout_data_1 axi_ad9361/dac_data_q0
connect_bd_net /axi_ad9361_dac_fifo/dout_data_1 /axi_ad9361/dac_data_q0
#### ad_connect axi_ad9361_dac_fifo/dout_enable_2 axi_ad9361/dac_enable_i1
connect_bd_net /axi_ad9361_dac_fifo/dout_enable_2 /axi_ad9361/dac_enable_i1
#### ad_connect axi_ad9361_dac_fifo/dout_valid_2 axi_ad9361/dac_valid_i1
connect_bd_net /axi_ad9361_dac_fifo/dout_valid_2 /axi_ad9361/dac_valid_i1
#### ad_connect axi_ad9361_dac_fifo/dout_data_2 axi_ad9361/dac_data_i1
connect_bd_net /axi_ad9361_dac_fifo/dout_data_2 /axi_ad9361/dac_data_i1
#### ad_connect axi_ad9361_dac_fifo/dout_enable_3 axi_ad9361/dac_enable_q1
connect_bd_net /axi_ad9361_dac_fifo/dout_enable_3 /axi_ad9361/dac_enable_q1
#### ad_connect axi_ad9361_dac_fifo/dout_valid_3 axi_ad9361/dac_valid_q1
connect_bd_net /axi_ad9361_dac_fifo/dout_valid_3 /axi_ad9361/dac_valid_q1
#### ad_connect axi_ad9361_dac_fifo/dout_data_3 axi_ad9361/dac_data_q1
connect_bd_net /axi_ad9361_dac_fifo/dout_data_3 /axi_ad9361/dac_data_q1
#### ad_connect axi_ad9361_dac_fifo/dout_unf axi_ad9361/dac_dunf
connect_bd_net /axi_ad9361_dac_fifo/dout_unf /axi_ad9361/dac_dunf
#### ad_ip_instance util_upack util_ad9361_dac_upack
#### ad_ip_parameter util_ad9361_dac_upack CONFIG.NUM_OF_CHANNELS 4
#### ad_ip_parameter util_ad9361_dac_upack CONFIG.CHANNEL_DATA_WIDTH 16
#### ad_connect util_ad9361_divclk/clk_out util_ad9361_dac_upack/dac_clk
connect_bd_net /util_ad9361_divclk/clk_out /util_ad9361_dac_upack/dac_clk
#### ad_connect util_ad9361_dac_upack/dac_enable_0 axi_ad9361_dac_fifo/din_enable_0
connect_bd_net /util_ad9361_dac_upack/dac_enable_0 /axi_ad9361_dac_fifo/din_enable_0
#### ad_connect util_ad9361_dac_upack/dac_valid_0 axi_ad9361_dac_fifo/din_valid_0
connect_bd_net /util_ad9361_dac_upack/dac_valid_0 /axi_ad9361_dac_fifo/din_valid_0
#### ad_connect util_ad9361_dac_upack/dac_valid_out_0 axi_ad9361_dac_fifo/din_valid_in_0
connect_bd_net /util_ad9361_dac_upack/dac_valid_out_0 /axi_ad9361_dac_fifo/din_valid_in_0
#### ad_connect util_ad9361_dac_upack/dac_data_0 axi_ad9361_dac_fifo/din_data_0
connect_bd_net /util_ad9361_dac_upack/dac_data_0 /axi_ad9361_dac_fifo/din_data_0
#### ad_connect util_ad9361_dac_upack/dac_enable_1 axi_ad9361_dac_fifo/din_enable_1
connect_bd_net /util_ad9361_dac_upack/dac_enable_1 /axi_ad9361_dac_fifo/din_enable_1
#### ad_connect util_ad9361_dac_upack/dac_valid_1 axi_ad9361_dac_fifo/din_valid_1
connect_bd_net /util_ad9361_dac_upack/dac_valid_1 /axi_ad9361_dac_fifo/din_valid_1
#### ad_connect util_ad9361_dac_upack/dac_valid_out_1 axi_ad9361_dac_fifo/din_valid_in_1
connect_bd_net /util_ad9361_dac_upack/dac_valid_out_1 /axi_ad9361_dac_fifo/din_valid_in_1
#### ad_connect util_ad9361_dac_upack/dac_data_1 axi_ad9361_dac_fifo/din_data_1
connect_bd_net /util_ad9361_dac_upack/dac_data_1 /axi_ad9361_dac_fifo/din_data_1
#### ad_connect util_ad9361_dac_upack/dac_enable_2 axi_ad9361_dac_fifo/din_enable_2
connect_bd_net /util_ad9361_dac_upack/dac_enable_2 /axi_ad9361_dac_fifo/din_enable_2
#### ad_connect util_ad9361_dac_upack/dac_valid_2 axi_ad9361_dac_fifo/din_valid_2
connect_bd_net /util_ad9361_dac_upack/dac_valid_2 /axi_ad9361_dac_fifo/din_valid_2
#### ad_connect util_ad9361_dac_upack/dac_valid_out_2 axi_ad9361_dac_fifo/din_valid_in_2
connect_bd_net /util_ad9361_dac_upack/dac_valid_out_2 /axi_ad9361_dac_fifo/din_valid_in_2
#### ad_connect util_ad9361_dac_upack/dac_data_2 axi_ad9361_dac_fifo/din_data_2
connect_bd_net /util_ad9361_dac_upack/dac_data_2 /axi_ad9361_dac_fifo/din_data_2
#### ad_connect util_ad9361_dac_upack/dac_enable_3 axi_ad9361_dac_fifo/din_enable_3
connect_bd_net /util_ad9361_dac_upack/dac_enable_3 /axi_ad9361_dac_fifo/din_enable_3
#### ad_connect util_ad9361_dac_upack/dac_valid_3 axi_ad9361_dac_fifo/din_valid_3
connect_bd_net /util_ad9361_dac_upack/dac_valid_3 /axi_ad9361_dac_fifo/din_valid_3
#### ad_connect util_ad9361_dac_upack/dac_valid_out_3 axi_ad9361_dac_fifo/din_valid_in_3
connect_bd_net /util_ad9361_dac_upack/dac_valid_out_3 /axi_ad9361_dac_fifo/din_valid_in_3
#### ad_connect util_ad9361_dac_upack/dac_data_3 axi_ad9361_dac_fifo/din_data_3
connect_bd_net /util_ad9361_dac_upack/dac_data_3 /axi_ad9361_dac_fifo/din_data_3
#### ad_ip_instance axi_dmac axi_ad9361_dac_dma
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_TYPE_SRC 0
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_TYPE_DEST 2
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.CYCLIC 1
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.SYNC_TRANSFER_START 0
WARNING: [BD 41-721] Attempt to set value '0' on disabled parameter 'SYNC_TRANSFER_START' of cell '/axi_ad9361_dac_dma' is ignored
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.AXI_SLICE_SRC 0
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.AXI_SLICE_DEST 1
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_2D_TRANSFER 0
#### ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_DATA_WIDTH_DEST 64
#### ad_connect util_ad9361_divclk/clk_out axi_ad9361_dac_dma/fifo_rd_clk
connect_bd_net /util_ad9361_divclk/clk_out /axi_ad9361_dac_dma/fifo_rd_clk
#### ad_connect axi_ad9361_dac_dma/fifo_rd_en util_ad9361_dac_upack/dac_valid
connect_bd_net /axi_ad9361_dac_dma/fifo_rd_en /util_ad9361_dac_upack/dac_valid
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_dac_dma/fifo_rd_en is being overridden by the user. This pin will not be connected as a part of interface connection fifo_rd
#### ad_connect axi_ad9361_dac_dma/fifo_rd_dout util_ad9361_dac_upack/dac_data
connect_bd_net /axi_ad9361_dac_dma/fifo_rd_dout /util_ad9361_dac_upack/dac_data
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_dac_dma/fifo_rd_dout is being overridden by the user. This pin will not be connected as a part of interface connection fifo_rd
#### ad_connect axi_ad9361_dac_dma/fifo_rd_underflow axi_ad9361_dac_fifo/din_unf
connect_bd_net /axi_ad9361_dac_dma/fifo_rd_underflow /axi_ad9361_dac_fifo/din_unf
WARNING: [BD 41-1306] The connection to interface pin /axi_ad9361_dac_dma/fifo_rd_underflow is being overridden by the user. This pin will not be connected as a part of interface connection fifo_rd
#### ad_connect sys_cpu_resetn axi_ad9361_dac_dma/m_src_axi_aresetn
connect_bd_net -net /sys_cpu_resetn /axi_ad9361_dac_dma/m_src_axi_aresetn
#### ad_cpu_interconnect 0x79020000 axi_ad9361
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M05_ACLK
connect_bd_net -net /sys_cpu_clk /axi_ad9361/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M05_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_ad9361/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M05_AXI /axi_ad9361/s_axi
#### ad_cpu_interconnect 0x7C400000 axi_ad9361_adc_dma
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M06_ACLK
connect_bd_net -net /sys_cpu_clk /axi_ad9361_adc_dma/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M06_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_ad9361_adc_dma/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M06_AXI /axi_ad9361_adc_dma/s_axi
#### ad_cpu_interconnect 0x7C420000 axi_ad9361_dac_dma
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M07_ACLK
connect_bd_net -net /sys_cpu_clk /axi_ad9361_dac_dma/s_axi_aclk
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M07_ARESETN
connect_bd_net -net /sys_cpu_resetn /axi_ad9361_dac_dma/s_axi_aresetn
connect_bd_intf_net /axi_cpu_interconnect/M07_AXI /axi_ad9361_dac_dma/s_axi
#### ad_mem_hp1_interconnect sys_cpu_clk sys_ps7/S_AXI_HP1
connect_bd_net -net /sys_cpu_resetn /axi_hp1_interconnect/ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp1_interconnect/ACLK
connect_bd_net -net /sys_cpu_resetn /axi_hp1_interconnect/M00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp1_interconnect/M00_ACLK
connect_bd_intf_net /axi_hp1_interconnect/M00_AXI /sys_ps7/S_AXI_HP1
connect_bd_net -net /sys_cpu_clk /sys_ps7/S_AXI_HP1_ACLK
#### ad_mem_hp1_interconnect sys_cpu_clk axi_ad9361_adc_dma/m_dest_axi
connect_bd_net -net /sys_cpu_resetn /axi_hp1_interconnect/S00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp1_interconnect/S00_ACLK
connect_bd_intf_net /axi_hp1_interconnect/S00_AXI /axi_ad9361_adc_dma/m_dest_axi
connect_bd_net -net /sys_cpu_clk /axi_ad9361_adc_dma/m_dest_axi_aclk
</sys_ps7/S_AXI_HP1/HP1_DDR_LOWOCM> is being mapped into </axi_ad9361_adc_dma/m_dest_axi> at <0x00000000 [ 1G ]>
#### ad_mem_hp2_interconnect sys_cpu_clk sys_ps7/S_AXI_HP2
connect_bd_net -net /sys_cpu_resetn /axi_hp2_interconnect/ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp2_interconnect/ACLK
connect_bd_net -net /sys_cpu_resetn /axi_hp2_interconnect/M00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp2_interconnect/M00_ACLK
connect_bd_intf_net /axi_hp2_interconnect/M00_AXI /sys_ps7/S_AXI_HP2
connect_bd_net -net /sys_cpu_clk /sys_ps7/S_AXI_HP2_ACLK
#### ad_mem_hp2_interconnect sys_cpu_clk axi_ad9361_dac_dma/m_src_axi
connect_bd_net -net /sys_cpu_resetn /axi_hp2_interconnect/S00_ARESETN
connect_bd_net -net /sys_cpu_clk /axi_hp2_interconnect/S00_ACLK
connect_bd_intf_net /axi_hp2_interconnect/S00_AXI /axi_ad9361_dac_dma/m_src_axi
connect_bd_net -net /sys_cpu_clk /axi_ad9361_dac_dma/m_src_axi_aclk
</sys_ps7/S_AXI_HP2/HP2_DDR_LOWOCM> is being mapped into </axi_ad9361_dac_dma/m_src_axi> at <0x00000000 [ 1G ]>
#### ad_cpu_interrupt ps-13 mb-12 axi_ad9361_adc_dma/irq
delete_bd_objs /ps_intr_13_1 /ps_intr_13
connect_bd_net /sys_concat_intc/In13 /axi_ad9361_adc_dma/irq
#### ad_cpu_interrupt ps-12 mb-13 axi_ad9361_dac_dma/irq
delete_bd_objs /ps_intr_12_1 /ps_intr_12
connect_bd_net /sys_concat_intc/In12 /axi_ad9361_dac_dma/irq
### ad_ip_parameter axi_ad9361 CONFIG.ADC_INIT_DELAY 20
## cd $olddir
## switch -- $project {
##     "fmcomms2" {
##         set HWNUMCHAN 4
##     }
##     "fmcomms5" {
##         set HWNUMCHAN 8
##     }
## }
## mw_adi_bd_cleanup
## source $mw_ad9361/common/mw_cleanup.tcl
### mw_project_set ipcore_clk_net [get_bd_nets util_ad9361_divclk_clk_out]
### mw_project_set ipcore_rstn_net [get_bd_nets util_ad9361_divclk_reset_peripheral_aresetn]
### mw_project_set ipcore_rst_net [get_bd_nets util_ad9361_divclk_reset_peripheral_reset]
### mw_project_set axi_cpu_interconnect [get_bd_cells axi_cpu_interconnect]
WARNING: [BD 41-1306] The connection to interface pin /axi_gpio_dummy_0/gpio_io_o is being overridden by the user. This pin will not be connected as a part of interface connection GPIO
WARNING: [BD 41-1306] The connection to interface pin /axi_gpio_dummy_0/gpio2_io_i is being overridden by the user. This pin will not be connected as a part of interface connection GPIO2
### set dummy_ip [mw_create_dummy_slave $IP_AXIM]
### delete_bd_objs $dummy_ip
### set STREAM_ENABLE false 
### switch -- [string tolower $variant] {
###     "rxtx_axis" -
###     "txrx_axis" {
###         set STREAM_ENABLE true
###     }
### }
### source $mw_ad9361/common/mw_cleanup_tx.tcl
#### set dac_upack_name util_ad9361_dac_upack
#### set dac_fifo_name axi_ad9361_dac_fifo
#### set HWNUMCHAN [get_property CONFIG.NUM_OF_CHANNELS [get_bd_cells ${dac_fifo_name}]]
#### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
####     mw_disconnect_pin ${dac_fifo_name}/din_data_${ch}
####     mw_disconnect_pin ${dac_fifo_name}/din_valid_in_${ch}
####     mw_disconnect_pin ${dac_upack_name}/dac_enable_${ch}
#### }
#### set dac_latch [create_bd_cell -type ip -vlnv mathworks.com:user:util_mw_dac_reg:1.0 dac_latch]
#### set bypass_tx [create_bd_cell -type ip -vlnv mathworks.com:user:util_mw_bypass_user_logic:1.0 bypass_tx]
#### ad_cpu_interconnect 0x43C20000 bypass_tx
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M08_ACLK
connect_bd_net -net /sys_cpu_clk /bypass_tx/AXI4_Lite_ACLK
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M08_ARESETN
connect_bd_net -net /sys_cpu_resetn /bypass_tx/AXI4_Lite_ARESETN
connect_bd_intf_net /axi_cpu_interconnect/M08_AXI /bypass_tx/AXI4_Lite
#### set_property CONFIG.NUM_CHAN $HWNUMCHAN $dac_latch
#### set_property CONFIG.NUM_CHAN $HWNUMCHAN $bypass_tx
#### mw_connect_pin dac_latch/clk [mw_project_get ipcore_clk_net]
#### mw_connect_pin dac_latch/rst [mw_project_get ipcore_rst_net]
#### mw_connect_pin bypass_tx/IPCORE_CLK [mw_project_get ipcore_clk_net]
#### mw_connect_pin bypass_tx/IPCORE_RESETN [mw_project_get ipcore_rstn_net]
#### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
####     mw_connect_pin dac_latch/dac_data_out_${ch} ${dac_fifo_name}/din_data_${ch}
#### 	mw_connect_pin bypass_tx/mux_data_out_${ch} ${dac_latch}/dac_data_in_${ch}
#### }
### source $mw_ad9361/common/mw_cleanup_rx.tcl
#### set adc_pack_name util_ad9361_adc_pack
#### set adc_fifo_name util_ad9361_adc_fifo
#### set HWNUMCHAN [get_property CONFIG.NUM_OF_CHANNELS [get_bd_cells ${adc_fifo_name}]]
#### set bypass_rx [create_bd_cell -type ip -vlnv mathworks.com:user:util_mw_bypass_user_logic:1.0 bypass_rx]
#### ad_cpu_interconnect 0x43C50000 bypass_rx
connect_bd_net -net /sys_cpu_clk /axi_cpu_interconnect/M09_ACLK
connect_bd_net -net /sys_cpu_clk /bypass_rx/AXI4_Lite_ACLK
connect_bd_net -net /sys_cpu_resetn /axi_cpu_interconnect/M09_ARESETN
connect_bd_net -net /sys_cpu_resetn /bypass_rx/AXI4_Lite_ARESETN
connect_bd_intf_net /axi_cpu_interconnect/M09_AXI /bypass_rx/AXI4_Lite
#### set_property CONFIG.NUM_CHAN $HWNUMCHAN $bypass_rx
#### mw_connect_pin bypass_rx/IPCORE_CLK [mw_project_get ipcore_clk_net]
#### mw_connect_pin bypass_rx/IPCORE_RESETN [mw_project_get ipcore_rstn_net]
#### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
####     mw_disconnect_pin ${adc_pack_name}/adc_data_${ch}
####     mw_disconnect_pin ${adc_pack_name}/adc_valid_${ch}
####     mw_disconnect_pin ${adc_pack_name}/adc_enable_${ch}
#### }
### if { $STREAM_ENABLE } {
###     source $mw_ad9361/common/mw_setup_axis.tcl
### }
### source $mw_ad9361/common/mw_cleanup_gpio.tcl
#### if { ![info exists MW_GPIO_WIDTH] } {
####     set MW_GPIO_WIDTH 64
#### }
#### if { ![info exists MW_GPIO_OFFSET_ENABLE] } {
####     set MW_GPIO_OFFSET_ENABLE 47
#### }
#### if { ![info exists MW_GPIO_OFFSET_TXNRX] } {
####     set MW_GPIO_OFFSET_TXNRX 48
#### }
#### if { ![info exists MW_GPIO_OFFSET_EN_AGC] } {
####     set MW_GPIO_OFFSET_EN_AGC 44
#### }
#### if { ![info exists MW_GPIO_OFFSET_STATUS] } {
####     set MW_GPIO_OFFSET_STATUS 32
#### }
#### if { ![info exists MW_GPIO_OFFSET_CTL] } {
####     set MW_GPIO_OFFSET_CTL 40
#### }
#### set MW_GPIO_STATIC_OUTPUT 1
#### set MW_GPIO_STATIC_INPUT 2
#### set cpu_name [get_property Name [mw_get_cpu]]
#### set gpio_mux [create_bd_cell -type ip -vlnv mathworks.com:user:util_mw_gpio_mux:* gpio_mux_0]
#### set_property CONFIG.GPIO_IO_WIDTH $MW_GPIO_WIDTH $gpio_mux
#### set_property CONFIG.NUM_PORTS {5} $gpio_mux
#### switch [mw_project_get cpu_type] {
####         zynq7_arm {
####             set cpu_gpio_i ${cpu_name}/GPIO_I
####             set cpu_gpio_o ${cpu_name}/GPIO_O
####             set cpu_gpio_t ${cpu_name}/GPIO_T
####         }
#### 		zynqmp_arm {
####             set cpu_gpio_i ${cpu_name}/emio_gpio_i
####             set cpu_gpio_o ${cpu_name}/emio_gpio_o
####             set cpu_gpio_t ${cpu_name}/emio_gpio_t
#### 		}
####     }
#### mw_disconnect_pin ${cpu_gpio_i}
#### mw_disconnect_pin ${cpu_gpio_o}
#### mw_disconnect_pin ${cpu_gpio_t}
#### mw_connect_pin gpio_i gpio_mux_0/GPIO_OUT_i
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_OUT_i is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_OUT
#### mw_connect_pin gpio_o gpio_mux_0/GPIO_OUT_o
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_OUT_o is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_OUT
#### mw_connect_pin gpio_t gpio_mux_0/GPIO_OUT_t
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_OUT_t is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_OUT
#### mw_connect_pin ${cpu_gpio_i} gpio_mux_0/GPIO_IN_i
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_IN_i is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_IN
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_I is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
#### mw_connect_pin ${cpu_gpio_o} gpio_mux_0/GPIO_IN_o
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_O is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_IN_o is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_IN
#### mw_connect_pin ${cpu_gpio_t} gpio_mux_0/GPIO_IN_t
WARNING: [BD 41-1306] The connection to interface pin /sys_ps7/GPIO_T is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_0
WARNING: [BD 41-1306] The connection to interface pin /gpio_mux_0/GPIO_IN_t is being overridden by the user. This pin will not be connected as a part of interface connection GPIO_IN
#### set_property CONFIG.PORT_0_WIDTH {1} $gpio_mux
#### set_property CONFIG.PORT_0_OFFSET $MW_GPIO_OFFSET_ENABLE $gpio_mux
#### set_property CONFIG.PORT_0_TYPE $MW_GPIO_STATIC_OUTPUT $gpio_mux
#### set_property CONFIG.PORT_1_WIDTH {1} $gpio_mux
#### set_property CONFIG.PORT_1_OFFSET $MW_GPIO_OFFSET_TXNRX $gpio_mux
#### set_property CONFIG.PORT_1_TYPE $MW_GPIO_STATIC_OUTPUT $gpio_mux
#### set_property CONFIG.PORT_2_WIDTH {1} $gpio_mux
#### set_property CONFIG.PORT_2_OFFSET $MW_GPIO_OFFSET_EN_AGC $gpio_mux
#### set_property CONFIG.PORT_2_TYPE $MW_GPIO_STATIC_OUTPUT $gpio_mux
#### set_property CONFIG.PORT_3_WIDTH {8} $gpio_mux
#### set_property CONFIG.PORT_3_OFFSET $MW_GPIO_OFFSET_STATUS $gpio_mux
#### set_property CONFIG.PORT_3_TYPE $MW_GPIO_STATIC_INPUT $gpio_mux
#### set_property CONFIG.PORT_4_WIDTH {4} $gpio_mux
#### set_property CONFIG.PORT_4_OFFSET $MW_GPIO_OFFSET_CTL $gpio_mux
#### set_property CONFIG.PORT_4_TYPE $MW_GPIO_STATIC_OUTPUT $gpio_mux
#### add_files -norecurse -fileset sources_1 $mw_ad9361/common/mw_gpio_timing.xdc
### source $mw_ad9361/common/mw_cleanup_clocking.tcl
#### set util_mw_clkconstr [create_bd_cell -type ip \
####     -vlnv mathworks.com:user:util_mw_clkconstr:* util_mw_clkconstr]
#### mw_disconnect_pin util_ad9361_divclk/clk_out
#### mw_connect_pin util_mw_clkconstr/clk_out util_ad9361_divclk_clk_out
#### mw_connect_pin util_mw_clkconstr/clk util_ad9361_divclk/clk_out
#### set_property CONFIG.CLKOUT0_REQUESTED_OUT_FREQ $DUT_DATA_RATE_MHZ $util_mw_clkconstr
#### set clk_tcl [add_files -norecurse -fileset sources_1 $mw_ad9361/common/mw_clk_constr.tcl]
#### set_property PROCESSING_ORDER LATE $clk_tcl
#### mw_cleanup_orphan_nets
Deleting orphan net /axi_ad9361_dac_fifo_din_enable_0
Deleting orphan net /axi_ad9361_dac_fifo_din_enable_1
Deleting orphan net /axi_ad9361_dac_fifo_din_enable_2
Deleting orphan net /axi_ad9361_dac_fifo_din_enable_3
Deleting orphan net /axi_hdmi_clkgen_clk_0
Deleting orphan net /axi_hdmi_core_hdmi_24_data
Deleting orphan net /axi_hdmi_core_hdmi_24_data_e
Deleting orphan net /axi_hdmi_core_hdmi_24_hsync
Deleting orphan net /axi_hdmi_core_hdmi_24_vsync
Deleting orphan net /axi_hdmi_core_hdmi_out_clk
Deleting orphan net /axi_hdmi_core_vdma_ready
Deleting orphan net /axi_hdmi_dma_m_axis_mm2s_tdata
Deleting orphan net /axi_hdmi_dma_m_axis_mm2s_tvalid
Deleting orphan net /axi_spdif_tx_core_spdif_tx_o
Deleting orphan net /sys_audio_clkgen_clk_out1
Deleting orphan net /sys_cpu_reset
Deleting orphan net /util_ad9361_adc_fifo_dout_data_0
Deleting orphan net /util_ad9361_adc_fifo_dout_data_1
Deleting orphan net /util_ad9361_adc_fifo_dout_data_2
Deleting orphan net /util_ad9361_adc_fifo_dout_data_3
Deleting orphan net /util_ad9361_adc_fifo_dout_enable_0
Deleting orphan net /util_ad9361_adc_fifo_dout_enable_1
Deleting orphan net /util_ad9361_adc_fifo_dout_enable_2
Deleting orphan net /util_ad9361_adc_fifo_dout_enable_3
Deleting orphan net /util_ad9361_adc_fifo_dout_valid_0
Deleting orphan net /util_ad9361_adc_fifo_dout_valid_1
Deleting orphan net /util_ad9361_adc_fifo_dout_valid_2
Deleting orphan net /util_ad9361_adc_fifo_dout_valid_3
Deleting orphan net /util_ad9361_dac_upack_dac_data_0
Deleting orphan net /util_ad9361_dac_upack_dac_data_1
Deleting orphan net /util_ad9361_dac_upack_dac_data_2
Deleting orphan net /util_ad9361_dac_upack_dac_data_3
Deleting orphan net /util_ad9361_dac_upack_dac_valid_out_0
Deleting orphan net /util_ad9361_dac_upack_dac_valid_out_1
Deleting orphan net /util_ad9361_dac_upack_dac_valid_out_2
Deleting orphan net /util_ad9361_dac_upack_dac_valid_out_3
Deleting orphan net /S00_AXI_2
Deleting orphan net /axi_cpu_interconnect_M01_AXI
Deleting orphan net /axi_cpu_interconnect_M02_AXI
Deleting orphan net /axi_cpu_interconnect_M03_AXI
Deleting orphan net /axi_cpu_interconnect_M04_AXI
Deleting orphan net /axi_hp0_interconnect_M00_AXI
Deleting orphan net /axi_spdif_tx_core_dma_req
Deleting orphan net /sys_ps7_DMA0_ACK
#### regenerate_bd_layout
### mw_adi_add_status_led
WARNING: [BD 41-1731] Type mismatch between connected pins: /sys_ps7/FCLK_CLK0(clk) and /led_driver/clk_ps7(undef)
WARNING: [BD 41-1731] Type mismatch between connected pins: /util_mw_clkconstr/clk_out(clk) and /led_driver/clk_rf(undef)
### mw_cleanup_orphan_nets
### regenerate_bd_layout
## save_bd_design
Wrote  : </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd> 
## validate_bd_design
WARNING: [#UNDEF] When using EMIO pins for SPI_0 tie SSIN High in the PL bitstream
WARNING: [#UNDEF] When using EMIO pins for SPI_1 tie SSIN High in the PL bitstream
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/l_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_divclk/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_ad9361_divclk_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_mw_clkconstr/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
CRITICAL WARNING: [BD 41-759] The input pins (listed below) are either not connected or do not have a source port, and they don't have a tie-off specified. These pins are tied-off to all 0's to avoid error in Implementation flow.
Please check your design and connect them as needed: 
/util_ad9361_adc_pack/adc_enable_0
/util_ad9361_adc_pack/adc_valid_0
/util_ad9361_adc_pack/adc_enable_1
/util_ad9361_adc_pack/adc_valid_1
/util_ad9361_adc_pack/adc_enable_2
/util_ad9361_adc_pack/adc_valid_2
/util_ad9361_adc_pack/adc_enable_3
/util_ad9361_adc_pack/adc_valid_3

## set_property STEPS.PHYS_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]
## set_property STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE Explore [get_runs impl_1]
## set_property STRATEGY "Performance_Explore" [get_runs impl_1]
# set_property synth_checkpoint_mode None [get_files system.bd]
# set_property -dict [list CONFIG.CLKOUT0_REQUESTED_OUT_FREQ {61.440}] [get_bd_cells util_mw_clkconstr]
# save_bd_design
Wrote  : </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd> 
# close_project
# exit
INFO: [Common 17-206] Exiting Vivado at Mon Feb 11 10:26:00 2019...

Elapsed time is 52.1189 seconds.

****** Vivado v2017.4 (64-bit)
  **** SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
  **** IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
    ** Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.

source vivado_insert_ip.tcl
# open_project vivado_prj.xpr
Scanning sources...
Finished scanning sources
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'.
WARNING: [IP_Flow 19-3685] Ignored loading user repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore/adi/library'. The path is contained within another repository.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/Xilinx/Vivado/2017.4/data/ip'.
# set boardName {zc706}
# set project {fmcomms2}
# set mw_hdl_dir {ipcore/mw}
# set ad_hdl_dir {ipcore/adi}
# set variant {rx}
# update_ip_catalog -delete_ip {./ipcore/ZynqBF_2t_ip_v1_0/component.xml} -repo_path {./ipcore} -quiet
# update_ip_catalog -add_ip {./ipcore/ZynqBF_2t_ip_v1_0.zip} -repo_path {./ipcore}
INFO: [IP_Flow 19-949] Unzipped './ipcore/ZynqBF_2t_ip_v1_0.zip' into repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'.
INFO: [IP_Flow 19-725] Reloaded user IP repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'
# update_ip_catalog
INFO: [IP_Flow 19-1839] IP Catalog is up to date.
# set HDLCODERIPVLNV [get_property VLNV [get_ipdefs -filter {NAME==ZynqBF_2t_ip && VERSION==1.0}]]
# set HDLCODERIPINST ZynqBF_2t_ip_0
# set BDFILEPATH [get_files -quiet system.bd]
# open_bd_design $BDFILEPATH
Adding cell -- xilinx.com:ip:processing_system7:5.5 - sys_ps7
Adding cell -- xilinx.com:ip:axi_iic:2.0 - axi_iic_main
Adding cell -- xilinx.com:ip:xlconcat:2.1 - sys_concat_intc
Adding cell -- xilinx.com:ip:proc_sys_reset:5.0 - sys_rstgen
Adding cell -- analog.com:user:axi_ad9361:1.0 - axi_ad9361
Adding cell -- analog.com:user:util_tdd_sync:1.0 - util_ad9361_tdd_sync
Adding cell -- xilinx.com:ip:xlconcat:2.1 - util_ad9361_divclk_sel_concat
Adding cell -- xilinx.com:ip:util_reduced_logic:2.0 - util_ad9361_divclk_sel
Adding cell -- analog.com:user:util_clkdiv:1.0 - util_ad9361_divclk
Adding cell -- xilinx.com:ip:proc_sys_reset:5.0 - util_ad9361_divclk_reset
Adding cell -- analog.com:user:util_wfifo:1.0 - util_ad9361_adc_fifo
Adding cell -- analog.com:user:util_cpack:1.0 - util_ad9361_adc_pack
Adding cell -- analog.com:user:axi_dmac:1.0 - axi_ad9361_adc_dma
WARNING: [BD 41-721] Attempt to set value '1' on disabled parameter 'DMA_AXI_PROTOCOL_SRC' of cell '/axi_ad9361_adc_dma' is ignored
Adding cell -- analog.com:user:util_rfifo:1.0 - axi_ad9361_dac_fifo
Adding cell -- analog.com:user:util_upack:1.0 - util_ad9361_dac_upack
Adding cell -- analog.com:user:axi_dmac:1.0 - axi_ad9361_dac_dma
WARNING: [BD 41-721] Attempt to set value '1' on disabled parameter 'DMA_AXI_PROTOCOL_DEST' of cell '/axi_ad9361_dac_dma' is ignored
Adding cell -- xilinx.com:ip:xlconstant:1.1 - const_intr_concat_gnd
Adding cell -- mathworks.com:user:util_mw_dac_reg:1.0 - dac_latch
Adding cell -- mathworks.com:user:util_mw_bypass_user_logic:1.0 - bypass_tx
Adding cell -- mathworks.com:user:util_mw_bypass_user_logic:1.0 - bypass_rx
Adding cell -- mathworks.com:user:util_mw_gpio_mux:1.0 - gpio_mux_0
Adding cell -- mathworks.com:user:util_mw_clkconstr:1.0 - util_mw_clkconstr
Adding cell -- mathworks.com:user:util_mw_led_driver:1.0 - led_driver
WARNING: [BD 41-1731] Type mismatch between connected pins: /sys_ps7/FCLK_CLK0(clk) and /led_driver/clk_ps7(undef)
WARNING: [BD 41-1731] Type mismatch between connected pins: /util_mw_clkconstr/clk_out(clk) and /led_driver/clk_rf(undef)
Adding cell -- xilinx.com:ip:axi_crossbar:2.1 - xbar
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_register_slice:2.1 - m01_regslice
Adding cell -- xilinx.com:ip:axi_clock_converter:2.1 - auto_cc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Successfully read diagram <system> from BD file </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd>
# create_bd_cell -type ip -vlnv $HDLCODERIPVLNV $HDLCODERIPINST
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_mw_clkconstr/clk_out]] [get_bd_pins $HDLCODERIPINST/AXI4_Lite_ACLK] [get_bd_pins util_mw_clkconstr/clk_out]
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_ad9361_divclk_reset/peripheral_aresetn]] [get_bd_pins $HDLCODERIPINST/AXI4_Lite_ARESETN] [get_bd_pins util_ad9361_divclk_reset/peripheral_aresetn]
# connect_bd_intf_net [get_bd_intf_pins $HDLCODERIPINST/AXI4_Lite] [get_bd_intf_pins axi_cpu_interconnect/M01_AXI]
# create_bd_addr_seg -range 0x10000 -offset 0x43C00000 [get_bd_addr_spaces sys_ps7/Data] [get_bd_addr_segs $HDLCODERIPINST/AXI4_Lite/reg0] SEG_${HDLCODERIPINST}_reg0
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /util_ad9361_adc_fifo/dout_data_0'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_ad9361_adc_fifo/dout_data_0]] [get_bd_pins $HDLCODERIPINST/baseband_rx0I_in] [get_bd_pins util_ad9361_adc_fifo/dout_data_0]
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /bypass_rx/dut_data_in_0'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins bypass_rx/dut_data_in_0]] [get_bd_pins $HDLCODERIPINST/dma_rx0I_out] [get_bd_pins bypass_rx/dut_data_in_0]
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /util_ad9361_adc_fifo/dout_data_1'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_ad9361_adc_fifo/dout_data_1]] [get_bd_pins $HDLCODERIPINST/baseband_rx0Q_in] [get_bd_pins util_ad9361_adc_fifo/dout_data_1]
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /bypass_rx/dut_data_in_1'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins bypass_rx/dut_data_in_1]] [get_bd_pins $HDLCODERIPINST/dma_rx0Q_out] [get_bd_pins bypass_rx/dut_data_in_1]
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /util_ad9361_adc_fifo/dout_valid_0'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_ad9361_adc_fifo/dout_valid_0]] [get_bd_pins $HDLCODERIPINST/baseband_rx_valid_in] [get_bd_pins util_ad9361_adc_fifo/dout_valid_0]
WARNING: [BD 5-234] No nets matched 'get_bd_nets -of_objects /bypass_rx/dut_valid_in'
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins bypass_rx/dut_valid_in]] [get_bd_pins $HDLCODERIPINST/dma_rx_valid_out] [get_bd_pins bypass_rx/dut_valid_in]
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_mw_clkconstr/clk_out]] [get_bd_pins $HDLCODERIPINST/IPCORE_CLK] [get_bd_pins util_mw_clkconstr/clk_out]
# connect_bd_net -net [get_bd_nets -of_objects [get_bd_pins util_ad9361_divclk_reset/peripheral_aresetn]] [get_bd_pins $HDLCODERIPINST/IPCORE_RESETN] [get_bd_pins util_ad9361_divclk_reset/peripheral_aresetn]
# add_files -norecurse {mw/projects/ad9361/board/fmcomms2/zc706/system_top.v}
# update_compile_order -fileset sources_1
# validate_bd_design
WARNING: [#UNDEF] When using EMIO pins for SPI_0 tie SSIN High in the PL bitstream
WARNING: [#UNDEF] When using EMIO pins for SPI_1 tie SSIN High in the PL bitstream
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/delay_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK1 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/l_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/s_axi_aclk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_tdd_sync/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_divclk/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_divclk/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_ad9361_divclk_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_fifo/din_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_fifo/dout_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_pack/adc_rst have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	POLARITY=ACTIVE_HIGH 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_pack/adc_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361_dac_fifo/din_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361_dac_fifo/dout_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_dac_upack/dac_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /dac_latch/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_tx/IPCORE_CLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_tx/AXI4_Lite_ACLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /bypass_rx/IPCORE_CLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_rx/AXI4_Lite_ACLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_mw_clkconstr/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_ad9361_divclk_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_mw_clkconstr/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /led_driver/rst have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	POLARITY=ACTIVE_HIGH 
CRITICAL WARNING: [BD 41-759] The input pins (listed below) are either not connected or do not have a source port, and they don't have a tie-off specified. These pins are tied-off to all 0's to avoid error in Implementation flow.
Please check your design and connect them as needed: 
/util_ad9361_adc_pack/adc_enable_0
/util_ad9361_adc_pack/adc_valid_0
/util_ad9361_adc_pack/adc_enable_1
/util_ad9361_adc_pack/adc_valid_1
/util_ad9361_adc_pack/adc_enable_2
/util_ad9361_adc_pack/adc_valid_2
/util_ad9361_adc_pack/adc_enable_3
/util_ad9361_adc_pack/adc_valid_3

# save_bd_design
Wrote  : </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd> 
# close_project
# exit
INFO: [Common 17-206] Exiting Vivado at Mon Feb 11 10:26:18 2019...

Elapsed time is 17.1713 seconds.

****** Vivado v2017.4 (64-bit)
  **** SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
  **** IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
    ** Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.

source vivado_update_prj.tcl
# open_project vivado_prj.xpr
Scanning sources...
Finished scanning sources
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore'.
WARNING: [IP_Flow 19-3685] Ignored loading user repository '/home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/ipcore/adi/library'. The path is contained within another repository.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/Xilinx/Vivado/2017.4/data/ip'.
# set boardName {zc706}
# set project {fmcomms2}
# set mw_hdl_dir {ipcore/mw}
# set ad_hdl_dir {ipcore/adi}
# set variant {rx}
# source vivado_custom_update_prj.tcl
## set thisDir [file normalize [file dirname [info script]]]
## if { ! [info exists mw_hdl_dir] } {
##     set mw_hdl_dir ${thisDir}/ipcore/mw
## }
## source $mw_hdl_dir/common/scripts/xilinx/mw_project.tcl
### proc mw_project_create {project_name {boardName_in ""}} {
### 
###     if {$boardName_in == ""} {
###         puts "==> Deriving board name from project name"    
###         if [regexp "_zed$" $project_name] {
###             set boardName_in "zed"
###         }
###         if [regexp "_zc702$" $project_name] {
###             set boardName_in "zc702"
###         }
###         if [regexp "_zc706$" $project_name] {
###             set boardName_in "zc706"
###         }
### 
###         if [regexp "_uzed_7020$" $project_name] {
###             set boardName_in "uzed7020"
###         }
### 
###         if [regexp "_uzed_7010$" $project_name] {
###             set boardName_in "uzed7010"
###         }
###     
###         if [regexp "_mmp100$" $project_name] {
###             set boardName_in "mmp100"
###         }
###         
###         if [regexp "_mmp045$" $project_name] {
###             set boardName_in "mmp045"
###         }
### 
###         puts "==> Setting board name to $boardName_in"
###     }
### 
###     mw_load_board_tcl $boardName_in
###     mw_set_board_info $boardName_in
###     mw_init_project $project_name
###     mw_setup_libs
###     mw_config_project  
### }
### proc mw_config_project {} {
###     set buildAny [expr [mw_get_build_target "handoff"] || [mw_get_build_target "fsbl"]]
###     switch [mw_project_get cpu_type] {
###         kintex7_pcie {
###             mw_set_build_target "fsbl" 0
###             mw_set_build_target "handoff" 0
###         }
###         zynqmp_arm {
###            mw_set_build_target "fsbl" 0
###            mw_set_build_target "handoff" $buildAny
###            mw_project_set xsdk_proc "mw_create_zynqmp_fsbl"
###            mw_project_set xsdk_binaries [list fsbl/executable.elf pmufw/executable.elf pmufw/executable.bin]
###         }
###         zynq7_arm {
###            mw_set_build_target "fsbl" 0
###            mw_set_build_target "handoff" $buildAny
###            mw_project_set xsdk_proc "mw_create_zynq_fsbl"
###            mw_project_set xsdk_binaries [list fsbl/executable.elf]
###         }
###     }
### }
### proc mw_project_set {configItem value} {
###     global mw_project_info
###     if { ![info exists mw_project_info] } {
###         set mw_project_info [dict create]
###     }
###     
###     dict set mw_project_info $configItem $value
### }
### proc mw_project_get {configItem} {
###     global mw_project_info
###     if { ![info exists mw_project_info] } {
###         return ""
###     }
###     if { [dict exists $mw_project_info $configItem] } {
###         return [dict get $mw_project_info $configItem]
###     } else {
###         return ""
###     }
### }
### proc mw_set_board_info {boardName_in} {
###     # defaults
###     mw_project_set "mw_ip_baseaddr" 0x40010000
###     mw_project_set "boardName" $boardName_in 
###     mw_project_set "cpu_type" "zynq7_arm"
### 
###     if { [info procs board_set_board_info] == "board_set_board_info" } {
###         board_set_board_info
###     } else {
###         switch $boardName_in {
###             zed {
###                 mw_project_set project_part "xc7z020clg484-1"
###                 mw_project_set project_board "em.avnet.com:zed:part0:1.0"
###                 mw_project_set mw_ip_baseaddr 0x400D0000
###             }
###             zc702 {
###                 mw_project_set project_part "xc7z020clg484-1"
###                 mw_project_set project_board "xilinx.com:zc702:part0:1.0"
###             }
###             zc706 {
###                 mw_project_set project_part "xc7z045ffg900-2"
###                 mw_project_set project_board "xilinx.com:zc706:part0:1.0"
###             }
### 
###             uzed7020 {
###                 mw_project_set project_part "xc7z020clg400-1"
###                 mw_project_set project_board "em.avnet.com:MicroZed_7020:part0:1.0"
###             }
### 
###             uzed7010 {
###                 mw_project_set project_part "xc7z010clg400-1"
###                 mw_project_set project_board "em.avnet.com:MicroZed_7010:part0:1.1"
###             }
### 
###             mmp100 {
###                 mw_project_set project_part "xc7z100ffg900-2"
###                 mw_project_set project_board "em.avnet.com:mini_module_plus_7z100_rev_c:part0:1.0"
###             }
### 
###             mmp045 {
###                 mw_project_set project_part "xc7z045ffg900-1"
###                 mw_project_set project_board "em.avnet.com:mini_module_plus_7z045_rev_c:part0:1.0"
###             }
###             default {
###                 mw_error "Board not found: $boardName_in"
###             }
###         }
###     }
###     puts [format "==> Using Board %s" [mw_project_get boardName]]
### }
### proc mw_add_board_repo {repoPath} {
###     set repoPath [file normalize $repoPath]
###     set repoPaths [get_param board.repoPaths]
###     lappend repoPaths $repoPath
###     set repoPaths [lsort -unique $repoPaths]
###     set_param board.repoPaths $repoPaths
### }
### proc mw_init_project {project_name} {
###     global commonDir
###     
###     # Setup the build directory
###     set buildDir [file normalize ./build]
###     file delete -force -- $buildDir
###     file mkdir $buildDir
###     mw_project_set buildDir $buildDir
### 
###     # Add the board directory to the repo paths
###     mw_add_board_repo ${commonDir}/boards
### 
###     mw_project_set boardDir ${commonDir}/boards/[mw_project_get boardName]
### 
###     if { [mw_project_get project_part] == "" } {
###         if { [mw_project_get project_board] ne "" } {
###             # Set the part based on the board
###             mw_project_set project_part [get_property PART_NAME [get_board_parts [mw_project_get project_board]]]
###         } else {
###             mw_error "project_part or project_board must be defined"
###         }
###     }
### 
###     create_project $project_name $buildDir -part [mw_project_get project_part] -force
###     file mkdir [mw_get_output_dir]
### 
###      if {[mw_project_get project_board] ne ""} {
###         set_property board_part [mw_project_get project_board] [current_project]
###     }
### 
###     if { [info procs board_init_project] == "board_init_project" } {
###         board_init_project
###     }
### }
### proc mw_load_board_tcl {boardName_in} {
###     global commonDir
### 
###     set board_tcl $commonDir/boards/$boardName_in/tcl/board_project.tcl
###     if { [file exists $board_tcl] } {
###         source $board_tcl
###     }
### }
### proc mw_setup_libs {} {
###     global mw_hdl_dir
### 
###     # cleanup local lib
###     set local_lib [mw_get_proj_dir]/lib
###     file delete -force $local_lib
###     file mkdir $local_lib
### 
###     mw_add_libdir $local_lib
###     mw_add_libdir $mw_hdl_dir/library
###     
### }
### proc mw_add_libdir { libdir } {
###     set proj_libs [get_property ip_repo_paths [current_fileset]]
###     lappend proj_libs $libdir
###     set proj_libs [lsort -unique $proj_libs]
###     set_property ip_repo_paths $proj_libs [current_fileset]
###     update_ip_catalog
### }
### proc mw_create_wrapper { {makeTop true} } {
###     if {[mw_get_build_target "wrapper"]} {
###         set BDFILEPATH [get_files -quiet system.bd]
###         make_wrapper -files $BDFILEPATH -top
###         # Try adding Block design filepath to naviagate & generate top wrapper
###         regsub -all "system.bd" [get_files -quiet system.bd] "hdl" TOPFILEPATH
###         catch {
###             add_files -norecurse $TOPFILEPATH
###             update_compile_order -fileset sources_1
###             }
###         if { $makeTop } {
###             set_property top system_wrapper [current_fileset]
###         }
###     }
### }
### proc mw_build_all {} {
###     mw_create_wrapper
###     mw_project_run
### }
### proc mw_project_run {} {
###     if {[mw_get_build_target "bdgen"]} {
###         mw_bd_generate
###     }
###     if {[mw_get_build_target "handoff"]} {
###         mw_gen_ps_init
###     }
###     if {[mw_get_build_target "fsbl"]} {
###         mw_create_fsbl
###     }
###     if {[mw_get_build_target "bitstream"]} {
###         mw_build_bit
###     }
### }
### proc mw_bd_generate {} {
###     set BDFILEPATH [get_files -quiet system.bd]
###     generate_target all $BDFILEPATH
### }
### proc mw_build_bit {} {
### 
###     set curdir [pwd]
###     cd [mw_get_proj_dir]
###     set project_name [get_property name [current_project]]
###     set top [get_property top [current_fileset]]
###     set bit_file ./${project_name}.runs/impl_1/${top}.bit
### 
###     launch_runs synth_1
###     wait_on_run synth_1
###     open_run synth_1
###     report_timing_summary -file timing_synth.log
### 
###     launch_runs impl_1 -to_step write_bitstream
###     wait_on_run impl_1
###     open_run impl_1
###     report_timing_summary -file timing_impl.log
### 
###     if [expr [get_property SLACK [get_timing_paths -delay_type min_max]] < 0] {
###         mw_error "Timing Constraints NOT met."
###     } else {
###         puts "-----------------------------------------------"
###         puts "SUCCESS: Bitstream generation complete."
###         puts "-----------------------------------------------"    
###     }
### 
###     file copy -force $bit_file [mw_get_output_dir]/system.bit
###     cd $curdir
### }
### proc mw_create_hdf {} {
###     set project_dir [mw_get_proj_dir]
###     set project_name [get_property name [current_project]]
###     set workspace ${project_dir}/${project_name}.sdk/
###     set hwdef $workspace/system.hdf
### 
###     file delete -force -- $workspace
###     file mkdir $workspace
### 
###     write_hwdef  -file $hwdef
### 
###     return $hwdef
### }
### proc mw_gen_ps_init {} {
###     set curdir [pwd]
###     set handoff_dir [mw_get_output_dir]/handoff
### 
###     file delete -force -- $handoff_dir
###     file mkdir $handoff_dir
### 
###     set hdfpath [mw_create_hdf]
###     set workspace [file dirname $hdfpath]
###     set hdf [file tail $hdfpath]
### 
###     cd $workspace
### 
###     # Generate the ps init files
###     hsi::open_hw_design $hdf
###     hsi::close_hw_design [hsi::current_hw_design]
### 
###     cd $curdir
### 
###     # Copy to the handoff dir
###     file copy {*}[glob ${workspace}/*gpl*] $handoff_dir/
### }
### proc mw_create_fsbl {} {
### 
###     global commonDir  
### 
###     set hdfpath [mw_create_hdf]
###     set workspace [file dirname $hdfpath]
###     set hdf [file tail $hdfpath]
### 
###     set elf_file $workspace/fsbl/executable.elf
###     set XSDK_PATH $::env(XILINX_SDK)
###     
###     set curdir [pwd]
###     
###     cd $workspace
###     hsi::open_hw_design $hdf
###     hsi::set_repo_path ${XSDK_PATH}/data/embeddedsw
###     [mw_project_get xsdk_proc]
###     
###     cd $curdir
###     
###     
###     foreach bin [mw_project_get xsdk_binaries] {
###         set binFile ${workspace}/${bin}
###         set outFile [string map {/ _} $bin]
###         file copy -force $binFile [mw_get_output_dir]/${outFile}
###     }
### }
### proc mw_create_zynq_fsbl {} {
###     set procs [hsi::get_cells -filter {IP_TYPE==PROCESSOR}] 
###     hsi::generate_app -hw [hsi::current_hw_design] -proc [lindex $procs 0] -app zynq_fsbl -os standalone -sw fsbl -dir fsbl -compile
### }
### proc mw_create_zynqmp_fsbl {} {
###     set procs [hsi::get_cells -filter {IP_TYPE==PROCESSOR && NAME =~ "*a53*"}] 
###     hsi::generate_app -hw [hsi::current_hw_design] -proc [lindex $procs 0] -app zynqmp_fsbl -os standalone -sw fsbl -dir fsbl -compile
###     hsi::generate_app -hw [hsi::current_hw_design] -proc psu_pmu_0 -app zynqmp_pmufw -os standalone -sw pmufw -dir pmufw -compile
###     exec mb-objcopy -O binary pmufw/executable.elf pmufw/executable.bin
### }
### proc mw_env_path_var {varname envname} {
###     global $varname
###  
###     if { ! [info exist $varname] } {
###         if  { [info exists ::env($envname)] } {
###             set $varname $::env($envname)
###         } else {
###             mw_error "Neither tcl variable $varname or environment variable $envname are set"
###         }   
###     }
###     set $varname [file normalize [set $varname]]
### }
### proc mw_get_proj_dir {} {
###     return [get_property DIRECTORY [current_project]]
### }
### proc mw_get_output_dir {} {
###     return [mw_get_proj_dir]/output
### }
### proc mw_error { msg } {
###     puts "-----------------------------------------------"
###     puts "ERROR: ${msg}"
###     puts "-----------------------------------------------"
###     error_on_bad_command
### }
### global mw_hdl_dir
### global commonDir
### set commonDir [file normalize [file dirname [file dirname [file dirname [info script]]]]]
### set mw_hdl_dir [file normalize [file dirname $commonDir]]
### source $commonDir/scripts/xilinx/mw_project_config.tcl
#### package require cmdline
#### proc mw_parse_cmdline {} {
####     global mw_project_params
####     global mw_project_usage
####     global mw_project_options
#### 
####     if { [info exists mw_project_options] } {
####         return
####     }
#### 
####     set mw_targets [list "bitstream" "fsbl" "wrapper" "bd"]
####     set mw_targets_help_str [join [list "Choose the build target:" [join $mw_targets ","]]]
#### 
####     set tvar_help_str "Set tcl vars in the format VARNAME1:VALUE1 VARNAME2:VALUE2 ..."
####     
####     set mw_project_params [list \
####         [list "target.arg" "bitstream" $mw_targets_help_str] \
####         [list "tvar.arg" "" $tvar_help_str] \
####     ]
#### 
####     set mw_project_usage "MathWorks Vivado Build Options"
####     if {[catch {array set options [cmdline::getoptions ::argv $mw_project_params $mw_project_usage]}]} {
####         puts [cmdline::usage $mw_project_params $mw_project_usage]
####         exit 0
####     } 
####     
####     set mw_project_options [array get options]
####     mw_check_cmdline_arg "target" $mw_targets
####     mw_set_tcl_vars
#### }
#### proc mw_set_tcl_vars {} {
####     set varlist [split [mw_get_opt tvar] " "]
####     foreach var $varlist {
####         set avpair [split $var ":"]
####         set name [lindex $avpair 0]
####         set val [lindex $avpair 1]
####         global $name
####         set $name $val
####     }
#### }
#### proc mw_check_cmdline_arg {argname {legal_vals [list]}} {
####     global mw_project_params
####     global mw_project_usage
#### 
####     set arg_val [mw_get_opt $argname]
#### 
####     if {[llength $legal_vals] != 0} {
####         if {[lsearch -exact $legal_vals $arg_val] == -1 } {
####             puts "Error: Invalid setting for '$argname': $arg_val"
####             puts [cmdline::usage $mw_project_params $mw_project_usage]
####             exit -1
####         }
####     }
####     return $arg_val
#### }
#### proc mw_get_opt {option} {
####     global mw_project_options
####     return [dict get $mw_project_options $option]
#### }
#### proc mw_set_build_target {tgt mode} {
####     if { $mode } {
####         mw_project_set "build_target_${tgt}" 1
####     } else {
####         mw_project_set "build_target_${tgt}" 0
####     }
#### }
#### proc mw_get_build_target {tgt} {
####     return [mw_project_get "build_target_${tgt}"]
#### }
#### proc mw_init_build_target {} {
####     global mw_project_build_target
#### 
####     mw_set_build_target "bitstream" 0
####     mw_set_build_target "fsbl" 0
####     mw_set_build_target "wrapper" 0
####     mw_set_build_target "bdgen" 0
####     mw_set_build_target "handoff" 0
#### }
#### proc mw_config_build_target {} {
####     if  { [mw_get_build_target "bitstream"] == "" } {
####         mw_init_build_target
#### 
####         set tgt [mw_get_opt "target"]
####         switch $tgt {
####             "bitstream" {
####                 mw_set_build_target "bitstream" 1
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 1
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }    
####             "fsbl" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 1
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }    
####             "wrapper" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 0
####                 mw_set_build_target "wrapper" 1
####                 mw_set_build_target "bdgen" 1
####             }
####             "bd" {
####                 mw_set_build_target "bitstream" 0
####                 mw_set_build_target "fsbl" 0
####                 mw_set_build_target "handoff" 0
####                 mw_set_build_target "wrapper" 0
####                 mw_set_build_target "bdgen" 0
####             }        
####         }
####     }
#### }
#### mw_parse_cmdline
#### mw_config_build_target
### source $commonDir/scripts/xilinx/mw_bd.tcl
#### source $commonDir/scripts/xilinx/mw_bd_zynq.tcl
##### proc mw_default_bd_zynq { {core_freq 50.0} } {
#####     set curdir [pwd]
#####     cd [mw_get_proj_dir]
##### 
#####     # create board design
#####     create_bd_design "system"
##### 
#####     # GND and VCC nets    
#####     set const_vcc_inst [mw_create_const vcc 1 1]
##### 
#####     set const_gnd_inst [mw_create_const gnd 1 0]
##### 
#####     # Create the CPU interconnect
#####     set axi_cpu_interconnect [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* axi_cpu_interconnect]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $axi_cpu_interconnect
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $axi_cpu_interconnect
#####     mw_project_set axi_cpu_interconnect $axi_cpu_interconnect
#####     
#####     # instance: sys_cpu
#####     mw_zynq_add_cpu
##### 
#####     set core_clkwiz [mw_create_clockwiz core sys_100m_clk proc_100m_resetn $core_freq]
##### 
#####     set sys_core_clk_source [get_bd_pins core_clkwiz/clk_out1]
#####     connect_bd_net -net sys_core_clk $sys_core_clk_source
#####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
##### 
#####     set sys_core_rstgen [mw_rstsync sys_core sys_core_clk proc_100m_resetn core_clkwiz/locked]
#####     set sys_100m_rstgen [mw_rstsync sys_100m sys_100m_clk proc_100m_resetn]
#####     set sys_200m_rstgen [mw_rstsync sys_200m sys_200m_clk proc_200m_resetn]
#####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
#####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
#####     
#####     # interface connections
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins axi_cpu_interconnect/ACLK]
#####     connect_bd_net -net /sys_100m_resetn [get_bd_pins axi_cpu_interconnect/ARESETN]
##### 
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins axi_cpu_interconnect/S00_ACLK]
#####     connect_bd_net -net /sys_100m_resetn [get_bd_pins axi_cpu_interconnect/S00_ARESETN]
##### 
#####     connect_bd_net -net /sys_core_clk [get_bd_pins axi_cpu_interconnect/M00_ACLK]
#####     connect_bd_net -net /sys_core_resetn [get_bd_pins axi_cpu_interconnect/M00_ARESETN]
##### 
#####     
#####     cd $curdir
##### }
##### proc mw_zynq_add_cpu {} {
#####     switch [mw_project_get cpu_type] {
#####         zynqmp_arm {
#####             mw_zynqmp_add_ps
#####         }
#####         zynq7_arm {
#####             mw_zynq_add_ps7
#####         }
#####     }
##### }
##### proc mw_zynqmp_add_ps {} {
#####     
#####     set sys_cpu  [create_bd_cell -type ip -vlnv xilinx.com:ip:zynq_ultra_ps_e:* sys_cpu]
#####     apply_bd_automation -rule xilinx.com:bd_rule:zynq_ultra_ps_e -config {apply_board_preset "1"} $sys_cpu    
#####     set_property CONFIG.PSU__CRL_APB__PL0_REF_CTRL__FREQMHZ {100} $sys_cpu
#####     set_property CONFIG.PSU__USE__IRQ0 {1} $sys_cpu
#####     set_property CONFIG.PSU__USE__M_AXI_GP0 {1} $sys_cpu
#####     set_property CONFIG.PSU__USE__M_AXI_GP1 {0} $sys_cpu
#####     mw_project_set sys_cpu $sys_cpu
#####     
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {8}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 8} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net [get_bd_pins intr_concat/dout] [get_bd_pins sys_cpu/pl_ps_irq0]
#####     
#####     # system reset/clock definitions
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_cpu/pl_clk0]
#####     connect_bd_net -net proc_100m_resetn [get_bd_pins sys_cpu/pl_resetn0]
#####     
#####     
#####     set proc_clkwiz [mw_create_clockwiz proc sys_100m_clk proc_100m_resetn 200]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins proc_clkwiz/clk_out1]
#####     mw_rstsync proc_200m sys_200m_clk proc_100m_resetn proc_clkwiz/locked
#####     
#####     # Clocks and interconnects
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins sys_cpu/maxihpm0_fpd_aclk]
#####     connect_bd_intf_net -intf_net axi_cpu_interconnect_s00_axi [get_bd_intf_pins axi_cpu_interconnect/S00_AXI] [get_bd_intf_pins sys_cpu/M_AXI_HPM0_FPD]
#####     
#####     mw_project_set sys_addr_cntrl_space [get_bd_addr_spaces sys_cpu/Data]
#####     
##### }
##### proc mw_zynq_add_ps7 {} {
#####     
#####     set sys_cpu  [create_bd_cell -type ip -vlnv xilinx.com:ip:processing_system7:* sys_cpu]
#####     apply_bd_automation -rule xilinx.com:bd_rule:processing_system7 -config {make_external "FIXED_IO, DDR" apply_board_preset "1"} $sys_cpu
#####     mw_project_set sys_cpu $sys_cpu
#####     
#####     set_property -dict [list CONFIG.PCW_USE_M_AXI_GP0 {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_EN_CLK1_PORT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_EN_RST1_PORT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ {100.0}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_FPGA1_PERIPHERAL_FREQMHZ {200.0}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_USE_FABRIC_INTERRUPT {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_IRQ_F2P_INTR {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_GPIO_EMIO_GPIO_ENABLE {1}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_GPIO_EMIO_GPIO_IO {32}] $sys_cpu
#####     set_property -dict [list CONFIG.PCW_TTC0_PERIPHERAL_ENABLE {0}] $sys_cpu
##### 
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {16}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 16} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net [get_bd_pins intr_concat/dout] [get_bd_pins sys_cpu/IRQ_F2P]
##### 
#####     # system reset/clock definitions
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_cpu/FCLK_CLK0]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins sys_cpu/FCLK_CLK1]
#####     connect_bd_net -net proc_100m_resetn [get_bd_pins sys_cpu/FCLK_RESET0_N]
#####     connect_bd_net -net proc_200m_resetn [get_bd_pins sys_cpu/FCLK_RESET1_N]
#####     
#####     # Clocks and interconnects
#####     connect_bd_net -net /sys_100m_clk [get_bd_pins sys_cpu/M_AXI_GP0_ACLK]
#####     connect_bd_intf_net -intf_net axi_cpu_interconnect_s00_axi [get_bd_intf_pins axi_cpu_interconnect/S00_AXI] [get_bd_intf_pins sys_cpu/M_AXI_GP0]
#####     
#####     mw_project_set sys_addr_cntrl_space [get_bd_addr_spaces sys_cpu/Data]
##### }
##### proc mw_add_cpu_axi_slave {{port 0} {ic_name {}} {clk sys_core_clk} {rstn sys_core_resetn}} {
#####     set cpu_type [mw_project_get cpu_type]
#####     set cpu_name [get_property "name" [mw_get_cpu]]
#####     switch $cpu_type {
#####         zynqmp_arm {
#####             set gpport [expr {$port + 2}]
#####             set_property -dict [list CONFIG.PSU__USE__S_AXI_GP${gpport} {1}] [mw_get_cpu]
#####             set slave_clk_pin [get_bd_pins ${cpu_name}/saxihp${port}_fpd_aclk]
#####             set slave_intf_pin [get_bd_intf_pins ${cpu_name}/S_AXI_HP${port}_FPD]
#####             set slave_seg [get_bd_addr_segs ${cpu_name}/SAXIGP${gpport}/HP${port}_DDR_LOW]
#####         }
#####         zynq7_arm {
#####             set_property -dict [list CONFIG.PCW_USE_S_AXI_HP${port} {1}] [mw_get_cpu]
#####             set slave_clk_pin [get_bd_pins ${cpu_name}/S_AXI_HP${port}_ACLK]
#####             set slave_intf_pin [get_bd_intf_pins ${cpu_name}/S_AXI_HP${port}]
#####             set slave_seg [get_bd_addr_segs ${cpu_name}/S_AXI_HP${port}/HP${port}_DDR_LOWOCM]
#####         }
#####         default {
#####             mw_error "Unsupported CPU type: $cpu_type"
#####         }
#####     }
#####     
#####     mw_connect_pin $clk $slave_clk_pin
##### 
#####     if { [llength $ic_name] == 0 } {
#####         set ic_name axi_cpu_slave_ic_${port}
#####     }
##### 
#####     set ic [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* $ic_name]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $ic
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $ic
#####     set_property -dict [list CONFIG.M00_HAS_REGSLICE {4}] $ic
##### 
#####     mw_connect_pin ${clk} ${ic_name}/ACLK
#####     mw_connect_pin ${rstn} ${ic_name}/ARESETN
#####     
#####     mw_connect_pin ${clk} ${ic_name}/M00_ACLK
#####     mw_connect_pin ${rstn} ${ic_name}/M00_ARESETN
#####     mw_connect_pin ${ic_name}/M00_AXI $slave_intf_pin
#####     
#####     return [list $ic $slave_seg ]
##### }
#### source $commonDir/scripts/xilinx/mw_bd_fpga.tcl
##### proc mw_default_bd_pcie { {core_freq 50.0} } {
#####     set curdir [pwd]
#####     cd [mw_get_proj_dir]
#####     # create board design
#####     create_bd_design "system"
##### 
#####     global sys_pcie
##### 
#####     global pcie_int_input
#####     global pcie_core
#####     global pcie_perst_n
#####     global pcie_axi_clk
#####     global pcie_m_axi
#####     global pcie_s_axi
#####     global pcie_s_axi_ctl
##### 
#####     global commonDir
##### 	
##### 	global BOARD_DEBUG
#####     
#####     
#####     # Add the pcie contraints (if they exist)
#####     set pcie_constr [mw_project_get boardDir]/xdc/pcie.xdc
#####     if { [file exists $pcie_constr] } {
#####         add_files -norecurse -fileset sources_1 $pcie_constr
#####     }
#####     
#####     # load the board data
#####     source [mw_project_get boardDir]/tcl/board_bd.tcl
##### 
#####     # GND and VCC nets
#####     set const_vcc_inst [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* const_vcc_inst]
#####     connect_bd_net -net const_vcc [get_bd_pins const_vcc_inst/dout] 
##### 
#####     set const_gnd_inst [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* const_gnd_inst]
#####     set_property -dict [list CONFIG.CONST_VAL {0}] $const_gnd_inst
#####     connect_bd_net -net const_gnd [get_bd_pins const_gnd_inst/dout] 
##### 
#####     # Create PCIe core
##### 
#####     set sys_pcie [board_setup_pcie]
#####     
#####     mw_project_set sys_cpu $sys_pcie
#####     
#####     # Create the fixed 100/200 MHz clocks
#####     set sys_clkwiz [mw_create_clockwiz sys $pcie_axi_clk pcie_axi_resetn 100.0]
#####     set_property -dict [list CONFIG.CLKOUT2_USED {true}] $sys_clkwiz
#####     set_property -dict [list CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {200.0}] $sys_clkwiz
#####     connect_bd_net -net sys_100m_clk [get_bd_pins sys_clkwiz/clk_out1]
#####     connect_bd_net -net sys_200m_clk [get_bd_pins sys_clkwiz/clk_out2]
##### 
#####     set sys_100m_rstgen [mw_rstsync sys_100m sys_100m_clk $pcie_perst_n sys_clkwiz/locked]
#####     set sys_200m_rstgen [mw_rstsync sys_200m sys_200m_clk $pcie_perst_n sys_clkwiz/locked]
##### 
##### 
#####     # Create the core clock
#####     set core_clkwiz [mw_create_clockwiz core $pcie_axi_clk pcie_axi_resetn $core_freq]
#####     set sys_core_clk_source [get_bd_pins core_clkwiz/clk_out1]
#####     connect_bd_net -net sys_core_clk $sys_core_clk_source
#####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
##### 
#####     set sys_core_rstgen [mw_rstsync sys_core sys_core_clk $pcie_perst_n core_clkwiz/locked]
#####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
#####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
##### 
#####     # Create interrupt controller
#####     set axi_intc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:* axi_intc ]
#####     set_property -dict [ list CONFIG.C_IRQ_IS_LEVEL {0} ] $axi_intc
#####     set_property CONFIG.C_KIND_OF_EDGE.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_KIND_OF_LVL.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_KIND_OF_INTR.VALUE_SRC PROPAGATED $axi_intc
##### 	set_property CONFIG.C_IRQ_CONNECTION 1 $axi_intc
##### 	connect_bd_net -net $pcie_int_input [get_bd_pins axi_intc/irq]
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins axi_intc/s_axi_aclk]
#####     connect_bd_net -net pcie_axi_resetn [get_bd_pins axi_intc/s_axi_aresetn]
##### 
#####     # interrupt concat
#####     set intr_concat [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:* intr_concat]
#####     set_property -dict [list CONFIG.NUM_PORTS {32}] $intr_concat
#####     mw_create_const "intr_concat_gnd" 1 0
#####     for {set i 0} {$i < 32} {incr i} {
#####         connect_bd_net -net const_intr_concat_gnd [get_bd_pins intr_concat/In${i}]
#####     }
#####     connect_bd_net -net intr_concat_dout [get_bd_pins axi_intc/intr] [get_bd_pins intr_concat/dout]
#####     mw_project_set intr_concat $intr_concat
#####     
#####     
#####     # Create the CPU Interconnect
#####     set axi_cpu_interconnect [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* axi_cpu_interconnect]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $axi_cpu_interconnect
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $axi_cpu_interconnect
#####     mw_project_set axi_cpu_interconnect $axi_cpu_interconnect
##### 
##### 
#####     # interface connections  
#####     board_connect
##### 
#####     connect_bd_net -net /sys_core_clk [get_bd_pins axi_cpu_interconnect/M00_ACLK]
#####     connect_bd_net -net /sys_core_resetn [get_bd_pins axi_cpu_interconnect/M00_ARESETN]
##### 
#####     mw_add_cpu_slave axi_intc 0x1000000
##### 
##### 	if { [info exists BOARD_DEBUG] && $BOARD_DEBUG } {
##### 		board_enable_debug
##### 	}
##### 	
#####     cd $curdir
##### }
##### proc mw_get_pcie_slave_ic {} {
#####     global pcie_s_axi
#####     global pcie_axi_clk
##### 
#####     set ic_name pcie_axi_slave_interconnect
#####     set ic [get_bd_cells -quiet $ic_name]
#####     if { [llength $ic] > 0 } {
#####         return $ic
#####     }
##### 
#####     set ic [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:* $ic_name]
#####     set_property -dict [list CONFIG.NUM_MI {1}] $ic
#####     set_property -dict [list CONFIG.S00_HAS_REGSLICE {4}] $ic
#####     set_property -dict [list CONFIG.M00_HAS_REGSLICE {4}] $ic
##### 
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins ${ic_name}/ACLK] 
#####     connect_bd_net -net pcie_axi_interconnect_resetn [get_bd_pins ${ic_name}/ARESETN] 
##### 
#####     connect_bd_net -net $pcie_axi_clk [get_bd_pins ${ic_name}/M00_ACLK] 
#####     connect_bd_net -net pcie_axi_resetn [get_bd_pins ${ic_name}/M00_ARESETN]
##### 
#####     connect_bd_intf_net [get_bd_intf_pins ${ic_name}/M00_AXI] $pcie_s_axi
#####     
#####     return $ic
##### }
##### proc mw_get_pcie_axi_slave_ports { {num_ports 1} {clk_domain pcie_axi} } {
##### 
#####     set ic [mw_get_pcie_slave_ic]
#####     set ic_name [get_property NAME $ic]
#####     
#####     set ports []
#####     set found_ports 0
#####     set MAX_MASTER_PORTS 16
#####     
#####     for {set idx 0} {$idx < $MAX_MASTER_PORTS} {incr idx} {
#####         set SI_IDX [format %02d $idx]
#####         set NUM_SI [get_property CONFIG.NUM_SI $ic]
#####         set if_pin [get_bd_intf_pins -quiet ${ic_name}/S${SI_IDX}_AXI]
#####         if { [llength [get_bd_intf_nets -quiet -of_objects $if_pin]] == 0 } {
#####             lappend ports $if_pin
#####             incr found_ports
#####             mw_connect_pin [get_bd_pins ${ic_name}/S${SI_IDX}_ACLK] ${clk_domain}_clk
#####             mw_connect_pin [get_bd_pins ${ic_name}/S${SI_IDX}_ARESETN] ${clk_domain}_resetn
#####         }
#####         if {$found_ports == $num_ports} {
#####             break
#####         }
#####         if { $NUM_SI == [expr $SI_IDX + 1] } {
#####             mw_add_ic_slave_port $ic
#####         }
#####     }
#####     
#####     if { $found_ports != $num_ports } {
#####         mw_error "Could not find $num_ports slave ports"
#####     }
#####     return $ports
#####     
#####     return $ports
##### }
#### proc mw_default_bd { {core_freq 50.0} } {
####     switch [mw_project_get cpu_type] {
####         zynqmp_arm -
####         zynq7_arm {
####             mw_default_bd_zynq $core_freq
####         }
####         kintex7_pcie {
####             mw_default_bd_pcie $core_freq
####         }
####     }
#### }
#### proc mw_create_clockwiz { name srcclk srcrst clk_freq } {
####     set clkwiz_name "${name}_clkwiz"
####     set clkwiz [create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:* $clkwiz_name]
####     set_property -dict [list CONFIG.PRIM_SOURCE {Global_buffer}] $clkwiz
####     set_property -dict [list CONFIG.RESET_TYPE {ACTIVE_LOW}] $clkwiz
####     set_property -dict [list CONFIG.CLKOUT1_REQUESTED_OUT_FREQ $clk_freq] $clkwiz
####     connect_bd_net -net [mw_getnet $srcclk] [get_bd_pins $clkwiz_name/clk_in1]
####     connect_bd_net -net [mw_getnet $srcrst] [get_bd_pins $clkwiz_name/resetn]
#### 
####     return $clkwiz
#### 
#### }
#### proc mw_create_dummy_slave { {ic_port 0} } {
#### 
####     set dummy_name axi_gpio_dummy_0
####     set dummy_obj [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:* $dummy_name]
####     set_property -dict [list CONFIG.C_GPIO_WIDTH {1} CONFIG.C_ALL_OUTPUTS {1}] $dummy_obj
####     set_property -dict [list CONFIG.C_GPIO2_WIDTH {1} CONFIG.C_IS_DUAL {1} CONFIG.C_ALL_INPUTS_2 {1}] $dummy_obj
#### 
####     mw_connect_pin [mw_project_get ipcore_clk_net] $dummy_name/s_axi_aclk
####     mw_connect_pin [mw_project_get ipcore_rstn_net] $dummy_name/s_axi_aresetn
####     mw_connect_pin $dummy_name/gpio_io_o $dummy_name/gpio2_io_i
####     
####     mw_add_cpu_slave $dummy_name [mw_project_get mw_ip_baseaddr] $ic_port
####     
####     return $dummy_obj
#### }
#### proc mw_add_axi_dma {name {rd_en 1} {wr_en 1}} {
####     set axi_dma [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:* $name ]
####     set_property -dict [ list CONFIG.c_sg_include_stscntrl_strm {0}  ] $axi_dma
#### 
####     if {!$rd_en} {
####         set_property -dict [list CONFIG.c_include_mm2s {0}] $axi_dma
####     }
#### 
####     if {!$wr_en} {
####         set_property -dict [list CONFIG.c_include_s2mm {0}] $axi_dma
####     }
#### 
####     return $axi_dma
#### }
#### proc mw_get_sys_addr_cntrl_space {} {
####     set addr_space [mw_project_get sys_addr_cntrl_space]
####     
####     if { [llength $addr_space] == 0 } {
####         set sys_cpu [mw_get_cpu]
####         set addr_space [get_bd_addr_spaces -of_objects $sys_cpu]
####     }
####     
####     if { [llength $addr_space] == 0 } {
####         set addr_space [get_bd_addr_spaces -filter "PATH =~ [mw_get_cpu]/Data"]
####     }
####     
####     return $addr_space
#### }
#### proc mw_bd_export {filename} {
####     save_bd_design
####     #validate block design is commented since vivado 2017.4 error out unconnected AXI Master interface g1732687 
####     #validate_bd_design
#### 
####     write_bd_tcl [mw_get_output_dir]/$filename
#### }
#### proc mw_add_ic_slave_port { ic } {
####     set ic_name [get_property NAME $ic]
####     
####     set NUM_SI [get_property CONFIG.NUM_SI $ic]
####     set NUM_SI [expr $NUM_SI + 1]
####     set SI_IDX [format %02d [expr $NUM_SI -1]]
####     set_property -dict [list CONFIG.NUM_SI $NUM_SI] $ic
####     set_property -dict [list CONFIG.S${SI_IDX}_HAS_REGSLICE {4}] $ic
#### }
#### proc mw_add_interconnect_slave {ic_name bd_slave {ic_port "auto"} {regslice 4} {datafifo 0}} {
#### 
####     set ic_obj [get_bd_cells $ic_name]
####     set slave_info [mw_s_axi_info $bd_slave]
####     set dst_port [get_bd_intf_pins [lindex $slave_info 0]]
####     set clk_net [get_bd_nets -of_objects [lindex $slave_info 1]]
####     set rst_net [get_bd_nets -of_objects [lindex $slave_info 2]]
#### 
####     set NUM_MI [get_property CONFIG.NUM_MI $ic_obj]
####     if {$ic_port == "auto"} {
####         set ic_port $NUM_MI
####     }
####     if { $NUM_MI <= $ic_port } {
####         set NUM_MI [expr $ic_port + 1]
####         set_property -dict [list CONFIG.NUM_MI $NUM_MI] $ic_obj
####     }
####     set MI_IDX [format %02d $ic_port]
#### 
####     set_property -dict [list CONFIG.M${MI_IDX}_HAS_REGSLICE $regslice] $ic_obj
####     set_property -dict [list CONFIG.M${MI_IDX}_HAS_DATA_FIFO $datafifo] $ic_obj 
#### 
####     set m_clk_pin [get_bd_pins ${ic_name}/M${MI_IDX}_ACLK]
####     set m_rst_pin [get_bd_pins ${ic_name}/M${MI_IDX}_ARESETN]
#### 
####     mw_disconnect_pin ${ic_name}/M${MI_IDX}_AXI
####     mw_disconnect_pin $m_clk_pin
####     mw_disconnect_pin $m_rst_pin
####     connect_bd_net -net $clk_net $m_clk_pin
####     connect_bd_net -net $rst_net $m_rst_pin
####     
####     connect_bd_intf_net [get_bd_intf_pins ${ic_name}/M${MI_IDX}_AXI] $dst_port
#### 
#### }
#### proc mw_add_cpu_slave {bd_slave offset {ic_port "auto"} {regslice 4} {datafifo 0}} {
####     mw_add_interconnect_slave [mw_project_get axi_cpu_interconnect] $bd_slave $ic_port $regslice $datafifo 
####     
####     set slave_info [mw_s_axi_info $bd_slave]
####     set addr_seg [lindex $slave_info 3]
####     # Minimum range is 4k
####     set range [expr max([get_property RANGE $addr_seg],4096)]
####     create_bd_addr_seg -range $range -offset $offset [mw_get_sys_addr_cntrl_space]  $addr_seg  SEG_data_${bd_slave}
#### }
#### proc mw_s_axi_info {bd_cell_name} {
####     set bd_cell [get_bd_cells $bd_cell_name]
####     set s_axi [get_bd_intf_pins -filter \
####     "MODE == Slave  && VLNV == xilinx.com:interface:aximm_rtl:1.0" \
####     -of_objects $bd_cell]
####     set s_axi_pin [lrange [split $s_axi "/"] end end]
####     set s_axi_clk [get_bd_pins -filter "TYPE == clk && (CONFIG.ASSOCIATED_BUSIF == ${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ ${s_axi_pin}:* || CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin}:*)" -quiet -of_objects $bd_cell]
####     set s_axi_clk [get_bd_pins [mw_list_reduce $s_axi_clk ".*${s_axi_pin}.*"]]
####     set s_axi_rst [get_bd_pins -filter "TYPE == rst && (CONFIG.ASSOCIATED_BUSIF == ${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ ${s_axi_pin}:* || CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin} || \
####     CONFIG.ASSOCIATED_BUSIF =~ *:${s_axi_pin}:*)" -quiet -of_objects $bd_cell]
####     if {($s_axi_clk ne "") && ($s_axi_rst eq "")} {
####         set s_axi_rst [get_property CONFIG.ASSOCIATED_RESET [get_bd_pins ${s_axi_clk}]]
####         if {$s_axi_rst ne ""} {
####             set s_axi_rst [get_bd_pins ${bd_cell_name}/$s_axi_rst]
####         }
####         if {$s_axi_rst eq ""} {
####             # Find a reset pin with the same root
####             set clkPin [lrange [split $s_axi_clk "/"] end end]
####             set clkRoot ""
####             regexp -all "(.*?)_?\[:alpha:\]*clk.*" $clkPin -> clkRoot
####             set s_axi_rst [get_bd_pins -of_objects $bd_cell -regexp -filter [subs -nobackslashes -nocommands {NAME =~ ".*${clkRoot}.*re?se?t.*"}]]
####         }
####     }
####     if {$s_axi_rst eq ""} {
####         # Find any reset pin
####         set s_axi_rst [get_bd_pins -of_objects $bd_cell -regexp -filter {NAME =~ ".*re?se?t.*"}]
####     }
####     set s_axi_rst [get_bd_pins [mw_list_reduce $s_axi_rst ".*${s_axi_pin}.*"]]
#### 
####     set s_addr_seg [get_bd_addr_segs -of_objects [get_bd_intf_pins $s_axi]]
#### 
####     return [list $s_axi $s_axi_clk $s_axi_rst $s_addr_seg]
#### }
#### proc mw_create_const {name width value} {
####     set const_name const_${name}
####     set const_block [create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:* $const_name]
####     set_property -dict [list CONFIG.CONST_WIDTH $width] $const_block
####     set_property -dict [list CONFIG.CONST_VAL $value] $const_block
####     connect_bd_net -net $const_name [get_bd_pins ${const_name}/dout]
####     
####     return $const_block
#### }
#### proc mw_logic {name op in1 {out {}} {in2 {}} {size 1} } {
####     set lname logic_${op}_${name}
####     
####     set logic_cell [create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:* $lname]
####     set_property -dict [list CONFIG.C_SIZE $size] $logic_cell
####     set_property -dict [list CONFIG.C_OPERATION $op] $logic_cell
####     connect_bd_net -net [mw_getnet $in1] [get_bd_pins $lname/Op1]
####     if { [llength $in2] > 0 } {
####         connect_bd_net -net [mw_getnet $in2] [get_bd_pins $lname/Op2]
####     }
####     if { [llength $out] > 0 } {
####         connect_bd_net -net [mw_getnet $out] [get_bd_pins $lname/Res]
####     } else {
####         connect_bd_net -net ${lname}_Res [get_bd_pins $lname/Res]
####     }
####     return [mw_getnet [get_bd_pins $lname/Res]]
#### }
#### proc mw_list_reduce {lst filter} {
####     if { [llength $lst] > 1 } {
####         set found_item [lsearch -inline -regexp $lst ${filter}]
####         if {[llength $found_item] > 0} {
####             set lst [lindex $found_item 0]
####         } else {
####             set lst [lindex $found_item 0]    
####         }
####     }
####     return $lst
#### }
#### proc mw_get_cpu {} {
####     set sys_cpu [mw_project_get sys_cpu]
####     if { [llength $sys_cpu] == 0 } {
####         set sys_cpu [get_bd_cells -hierarchical -filter {VLNV=~"xilinx.com:ip:processing_system7:*" || VLNV=~"xilinx.com:ip:zynq_ultra_ps_e:*"}]
####     }
####     return $sys_cpu
#### }
#### proc mw_get_intr_concat {{intr_num 0}} {
####     set intr_concat [mw_project_get intr_concat]
####     set cpu_type [mw_project_get cpu_type]
####     
####     if {[llength $intr_concat] == 0} {
####         # Find the INTC if needed
####         set cpu_name [get_property "name" [mw_get_cpu]]
####         switch $cpu_type {
####             zynqmp_arm {
####                 if { $intr_num < 8 } {
####                     set intr_ports ${cpu_name}/pl_ps_irq0
####                 } else {
####                     set intr_ports ${cpu_name}/pl_ps_irq1
####                 }
####             }
####             zynq7_arm {
####                 set intr_ports ${cpu_name}/IRQ_F2P
####             }
####             kintex7_pcie {
####                 set intr_ports 
####             }
####             default {
####                 mw_error "Unsupported CPU type: $cpu_type"
####             }
####         }
####         set irq_src [get_bd_pins -of_objects [mw_getnet $intr_ports] -filter {DIR == O}]
####         set intr_concat [get_bd_cells -of_objects $irq_src]
####     }
####     switch $cpu_type {
####         #Remap the interrupt number if needed
####         zynqmp_arm {
####             if { $intr_num >= 8 } {
####                 set intr_num [expr $intr_num - 8]
####             }
####         }
####     }
####     return [list $intr_concat $intr_num]
#### }
#### proc mw_connect_intr {src_pin intr_num} {
####     set intr_info [mw_get_intr_concat $intr_num]
####     set intr_concat [lindex $intr_info 0]
####     set intr_num [lindex $intr_info 1]
####     set intr_concat_name [get_property "name" $intr_concat]
####     
####     set intr_pin ${intr_concat_name}/In${intr_num}
####     mw_disconnect_pin $intr_pin
####     mw_connect_pin $src_pin $intr_pin
#### }
#### proc mw_rstsync {name sync_clk {ext_rst {} } {locked {} } } {
####     set rstgen_name ${name}_rstgen
####     set rstgen [create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:* $rstgen_name]
####     set_property -dict [list CONFIG.C_EXT_RST_WIDTH {1}] $rstgen
#### 
####     connect_bd_net -net [mw_getnet $sync_clk] [get_bd_pins ${rstgen_name}/slowest_sync_clk]
####     if { [llength $ext_rst] > 0 } {
####         connect_bd_net -net [mw_getnet $ext_rst] [get_bd_pins ${rstgen_name}/ext_reset_in]
####     }
####     if { [llength $locked] > 0 } {
####         connect_bd_net -net [mw_getnet $locked] [get_bd_pins ${rstgen_name}/dcm_locked]
####     }
#### 
####     connect_bd_net -net ${name}_resetn [get_bd_pins ${rstgen_name}/peripheral_aresetn]
####     connect_bd_net -net ${name}_interconnect_resetn [get_bd_pins ${rstgen_name}/interconnect_aresetn]
####     connect_bd_net -net ${name}_reset [get_bd_pins ${rstgen_name}/peripheral_reset]
#### 
####     return $rstgen
#### }
#### proc mw_getnet {pin_net {create_net true}} {
####     # check if its a pin or port
####     set pin [mw_get_pin_port $pin_net]
####     if { [llength $pin] == 0 } {
####         # check if its a net
####         set net [mw_get_net_from_name $pin_net]
####         if { [llength $net] == 0 } {
####             mw_error "Could not find pin/port/net: ${pin_net}"
####         } else {
####             return $net
####         }
####     }
####     # Found a pin or port, check if it's connected
####     set net [mw_get_net_of_pin $pin]    
####     # check if there's already a net attached
####     if { [llength $net] > 0 || ! $create_net} {
####         return $net
####     } else {
####         # create and attach a new net
####         
####         set netName [join [list [regsub {^[^[:alpha:]]} [regsub -all {/} $pin {_}] {}] "_net"] ""]
####         if { [mw_is_intf $pin] } {
####             set net [create_bd_intf_net ${netName}_intf]
####             connect_bd_intf_net -intf_net $net $pin
####         } else {
####             set net [create_bd_net $netName]
####             connect_bd_net -net $net $pin
####         }
####         return $net
####     }
#### }
#### proc mw_cleanup_orphans {{netlimit 1}} {
####     set cleaned 1
####     set iters 0
####     while {$cleaned > 0 && $iters < 5} {
####         set cleaned [mw_cleanup_orphan_cells]
####         incr cleaned [mw_cleanup_orphan_nets $netlimit]
####         incr iters
####     }
#### }
#### proc mw_cleanup_orphan_nets {{netlimit 1}} {
####     set netlimit [expr $netlimit + 1]
####     set allNets [get_bd_nets]
####     set cleaned 0
####     foreach net $allNets {
####         set pins [get_bd_pins -quiet -of_objects $net]
####         set ports [get_bd_ports -quiet -of_objects $net]
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections < $netlimit} {
####             puts "Deleting orphan net $net"
####             delete_bd_objs $net
####             incr cleaned
####         }
####     }
####     
####     set allNets [get_bd_intf_nets]
####     foreach net $allNets {
####         set pins [get_bd_intf_pins -quiet -of_objects $net]
####         set ports [get_bd_intf_ports -quiet -of_objects $net]
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections < $netlimit} {
####             puts "Deleting orphan net $net"
####             delete_bd_objs $net
####             incr cleaned
####         }
####     }
####     
####     return $cleaned
#### }
#### proc mw_cleanup_orphan_cells {} {
####     set allCells [get_bd_cells]
####     set cleaned 0
####     foreach cell $allCells {
####         if {[mw_cell_is_dangling $cell]} {
####             puts "Removing orphan cell $cell"
####             delete_bd_objs $cell
####             incr cleaned
####         }
####     }
####     return $cleaned
#### }
#### proc mw_cell_is_dangling {cell_name} {
####     set cell [get_bd_cells $cell_name]
####     set opins [get_bd_pins -of_objects $cell -filter {DIR == O} -quiet]
####     set onets [get_bd_nets -of_objects $opins -quiet]
####     set ipins [get_bd_pins -of_objects $onets -filter {DIR == I} -quiet]
####     
####     if {[llength $ipins] > 0} {
####         return false
####     }
####     
####     set ifpins [get_bd_intf_pins -of_objects $cell -quiet]
####     set ifnets [get_bd_intf_nets -of_objects $ifpins -quiet]
####     foreach ifn $ifnets {
####         set if_pins [get_bd_intf_pins -of_objects $ifn]
####         if {[llength $if_pins] > 1} {
####             return false
####         }
####     }
####     
####     return true
#### }
#### proc mw_is_intf {pin_net} {
####     set ipin [get_bd_intf_pins -quiet $pin_net]
####     set iports [get_bd_intf_ports -quiet $pin_net]
####     set inets [get_bd_intf_nets -quiet $pin_net]
####     set intf [expr [llength $ipin] + [llength $iports] + [llength $inets]]
####     if { $intf > 0 } {
####         return true 
####     } else {
####         return false
####     }
#### }
#### proc mw_get_net_of_pin {pin} {
####     set pin [mw_get_pin_port $pin]
####     set net [get_bd_nets -of_objects $pin -quiet]
####     if { [llength $net] == 0 } {
####         set net [get_bd_intf_nets -of_objects $pin -quiet]
####     }
####     return $net
#### }
#### proc mw_get_net_from_name {net_name} {    
####     set net [get_bd_nets -quiet $net_name]
####     if { [llength $net] == 0 } {
####         set net [get_bd_intf_nets -quiet $net_name]
####     }
####     return $net
#### }
#### proc mw_get_pin_port {pin_port} {
####     # check if its a port
####     set pin [get_bd_ports -quiet $pin_port]
####     if { [llength $pin] == 0 } {
####         # check if its a pin
####         set pin [get_bd_pins -quiet $pin_port]
####     }
####     
####     if { [llength $pin] == 0 } {
####         # check if its a intf pin
####         set pin [get_bd_intf_pins -quiet $pin_port]
####     }
####     
####     if { [llength $pin] == 0 } {
####         # check if its a intf port
####         set pin [get_bd_intf_ports -quiet $pin_port]
####     }
####     
####     return $pin
#### }
#### proc mw_is_input {pin_port} {
####     set pin [mw_get_pin_port $pin_port]
####     if { [llength $pin] == 0 } {
####         return 0
####     }
####     set dir [get_property DIR $pin]
####     if {$dir == "I"} {
####         return 1
####     } else {
####         return 0
####     }    
#### }
#### proc mw_is_net {pin_net} {
####     set net [mw_getnet $pin_net false]
####     if { [llength $net] > 0 } {
####         return true
####     } else {
####         return false
####     }
#### }
#### proc mw_connect_pin {pin_net1 pin_net2} {
####     
####     set isNet1 [mw_is_net $pin_net1]
####     set isNet2 [mw_is_net $pin_net2]
####     
####     if { $isNet1 && $isNet2 } {
####         mw_error "$pin_net1 and $pin_net2 both have existing nets"
####     }
####     
####     if { [mw_is_intf $pin_net1] } {
####         # Cannot have dangling nets on intf pins
####         connect_bd_intf_net [mw_get_pin_port $pin_net1] [mw_get_pin_port $pin_net2]
####         return
####     }
####     
####     if { ! ($isNet1 || $isNet2) } {
####         # No nets are attached, both are unconnected pins
####         if { [mw_is_input $pin_net1] } {
####             # Attach a net to the output pin
####             set netArg [mw_getnet $pin_net2]
####             # Connect to the input pin
####             set pinArg [mw_get_pin_port $pin_net1]
####         } else {
####             # Attach a net to the output pin
####             set netArg [mw_getnet $pin_net1]
####             # Connect to the input pin
####             set pinArg [mw_get_pin_port $pin_net2]
####         }
####     } elseif { $isNet1 } {
####         # Pin1 has a net attached
####         set netArg [mw_getnet $pin_net1]
####         # Connect to the other net
####         set pinArg [mw_get_pin_port $pin_net2]
####     } else {
####         # Pin2 has a net attached
####         set netArg [mw_getnet $pin_net2]
####         # Connect to the other net
####         set pinArg [mw_get_pin_port $pin_net1]
####     }
####     connect_bd_net -net $netArg $pinArg
#### }
#### proc mw_is_connected {pin} {
####     set pin_obj [mw_get_pin_port $pin]
####     set net [get_bd_nets -quiet -of_objects $pin_obj]
####     set intf_net [get_bd_intf_nets -quiet -of_objects $pin_obj]
####     set numConnections [expr [llength $net] + [llength $intf_net]]
####     if { $numConnections > 0 } {
####         return 1
####     } else {
####         return 0
####     }
#### }
#### proc mw_disconnect_pin {pin} {
####     set pin_obj [mw_get_pin_port $pin]
####     if { [mw_is_connected $pin_obj] } {
####         set net [mw_get_net_of_pin $pin_obj]
####         if {[mw_is_intf $pin_obj]} {
####             set pins [get_bd_intf_pins -quiet -of_objects $net]
####             set ports [get_bd_intf_ports -quiet -of_objects $net]
####         } else {
####             set pins [get_bd_pins -quiet -of_objects $net]
####             set ports [get_bd_ports -quiet -of_objects $net]
####         }
####         set numConnections [expr [llength $pins] + [llength $ports]]
####         if { $numConnections == 1 } {
####             delete_bd_objs $net
####         } else {
####             if {[mw_is_intf $pin_obj]} {
####                 disconnect_bd_intf_net $net $pin_obj
####             } else {
####                 disconnect_bd_net $net $pin_obj
####             }
####         }
####     }
#### }
#### proc mw_bd_set_project_defaults {} {
####     mw_project_set ipcore_clk_net [get_bd_nets sys_core_clk]
####     mw_project_set ipcore_rstn_net [get_bd_nets sys_core_resetn]
####     mw_project_set ipcore_rst_net [get_bd_nets sys_core_reset]
####     mw_project_set axi_cpu_interconnect [get_bd_cells axi_cpu_interconnect]
####     mw_project_set sys_cpu [mw_get_cpu]
####     mw_project_set sys_addr_cntrl_space [mw_get_sys_addr_cntrl_space]
#### }
#### proc mw_bd_save {} {
####     regenerate_bd_layout
####     save_bd_design
####     #removing validate_bd_design for issues with Vivado 2017.4 regarding
####     #unconnected AXI4 master connnection
####     #validate_bd_design
####     save_bd_design
#### }
## if { [llength [current_bd_design -quiet]] == 0 } {
##     set BDFILEPATH [get_files -quiet system.bd]
##     open_bd_design $BDFILEPATH
## }
## current_bd_design -quiet
Adding cell -- xilinx.com:ip:processing_system7:5.5 - sys_ps7
Adding cell -- xilinx.com:ip:axi_iic:2.0 - axi_iic_main
Adding cell -- xilinx.com:ip:xlconcat:2.1 - sys_concat_intc
Adding cell -- xilinx.com:ip:proc_sys_reset:5.0 - sys_rstgen
Adding cell -- analog.com:user:axi_ad9361:1.0 - axi_ad9361
Adding cell -- analog.com:user:util_tdd_sync:1.0 - util_ad9361_tdd_sync
Adding cell -- xilinx.com:ip:xlconcat:2.1 - util_ad9361_divclk_sel_concat
Adding cell -- xilinx.com:ip:util_reduced_logic:2.0 - util_ad9361_divclk_sel
Adding cell -- analog.com:user:util_clkdiv:1.0 - util_ad9361_divclk
Adding cell -- xilinx.com:ip:proc_sys_reset:5.0 - util_ad9361_divclk_reset
Adding cell -- analog.com:user:util_wfifo:1.0 - util_ad9361_adc_fifo
Adding cell -- analog.com:user:util_cpack:1.0 - util_ad9361_adc_pack
Adding cell -- analog.com:user:axi_dmac:1.0 - axi_ad9361_adc_dma
Adding cell -- analog.com:user:util_rfifo:1.0 - axi_ad9361_dac_fifo
Adding cell -- analog.com:user:util_upack:1.0 - util_ad9361_dac_upack
Adding cell -- analog.com:user:axi_dmac:1.0 - axi_ad9361_dac_dma
Adding cell -- xilinx.com:ip:xlconstant:1.1 - const_intr_concat_gnd
Adding cell -- mathworks.com:user:util_mw_dac_reg:1.0 - dac_latch
Adding cell -- mathworks.com:user:util_mw_bypass_user_logic:1.0 - bypass_tx
Adding cell -- mathworks.com:user:util_mw_bypass_user_logic:1.0 - bypass_rx
Adding cell -- mathworks.com:user:util_mw_gpio_mux:1.0 - gpio_mux_0
Adding cell -- mathworks.com:user:util_mw_clkconstr:1.0 - util_mw_clkconstr
Adding cell -- mathworks.com:user:util_mw_led_driver:1.0 - led_driver
Adding cell -- user.org:ip:ZynqBF_2t_ip:1.0 - ZynqBF_2t_ip_0
WARNING: [BD 41-1731] Type mismatch between connected pins: /sys_ps7/FCLK_CLK0(clk) and /led_driver/clk_ps7(undef)
WARNING: [BD 41-1731] Type mismatch between connected pins: /util_mw_clkconstr/clk_out(clk) and /led_driver/clk_rf(undef)
Adding cell -- xilinx.com:ip:axi_crossbar:2.1 - xbar
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_register_slice:2.1 - m01_regslice
Adding cell -- xilinx.com:ip:axi_clock_converter:2.1 - auto_cc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Adding cell -- xilinx.com:ip:axi_protocol_converter:2.1 - auto_pc
Successfully read diagram <system> from BD file </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd>
## source $mw_hdl_dir/projects/ad9361/common/mw_cleanup_io.tcl
### set dac_upack_name util_ad9361_dac_upack
### set dac_fifo_name axi_ad9361_dac_fifo
### set dac_latch_name dac_latch
### set bypass_tx_name bypass_tx
### set HWNUMCHAN [get_property CONFIG.NUM_OF_CHANNELS [get_bd_cells ${dac_fifo_name}]]
### mw_create_const gnd_ad9361_dac_data 16 0
### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
###     if { ![mw_is_connected axi_ad9361_dac_fifo/din_data_${ch}] } {
###         mw_connect_pin axi_ad9361_dac_fifo/din_data_${ch} const_gnd_ad9361_dac_data
###     }
### }
### if { ![mw_is_connected ${dac_latch_name}/dac_valid] } {
###     mw_connect_pin ${dac_latch_name}/dac_valid ${bypass_tx_name}/mux_valid_out_0
### }
### if { ![mw_is_connected ${bypass_tx_name}/dut_valid_in] } {
###     mw_connect_pin ${bypass_tx_name}/dut_valid_in ${dac_upack_name}/dac_valid_out_0
### }
### set nValid -1
### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
###     # Only one valid line per every two channels (I+Q)
###     if { [expr {$ch % 2} == 0 ] } {
###         incr nValid
###         if { ![mw_is_connected ${bypass_tx_name}/bypass_valid_in_${nValid}] } {
###             mw_connect_pin ${bypass_tx_name}/bypass_valid_in_${nValid} ${dac_upack_name}/dac_valid_out_${ch}
###         }
###     }
###     if { ![mw_is_connected ${dac_fifo_name}/din_valid_in_${ch}] } {
###         mw_connect_pin ${bypass_tx_name}/mux_valid_out_${nValid} ${dac_fifo_name}/din_valid_in_${ch}
###     }
###     if { ![mw_is_connected ${bypass_tx_name}/bypass_data_in_${ch}] } {
###         mw_connect_pin ${bypass_tx_name}/bypass_data_in_${ch} ${dac_upack_name}/dac_data_${ch}
###     }
### 	if { ![mw_is_connected ${bypass_tx_name}/dut_data_in_${ch}] } {
###         mw_connect_pin ${bypass_tx_name}/dut_data_in_${ch} ${dac_upack_name}/dac_data_${ch}
###     }
###     if { ![mw_is_connected ${dac_upack_name}/dac_enable_${ch}] } {
###         mw_connect_pin ${dac_upack_name}/dac_enable_${ch} ${dac_fifo_name}/din_enable_${ch}
###     }
### }
### set adc_pack_name util_ad9361_adc_pack
### set adc_fifo_name util_ad9361_adc_fifo
### set bypass_rx_name bypass_rx
### set HWNUMCHAN [get_property CONFIG.NUM_OF_CHANNELS [get_bd_cells ${adc_fifo_name}]]
### if { ![mw_is_connected ${bypass_rx_name}/dut_valid_in] } {
###     mw_connect_pin ${adc_fifo_name}/dout_valid_0 ${bypass_rx_name}/dut_valid_in 
### }
### if { ![mw_is_connected ${bypass_rx_name}/bypass_valid_in_0] } {
###     mw_connect_pin ${adc_fifo_name}/dout_valid_0 ${bypass_rx_name}/bypass_valid_in_0 
### }
### set nValid -1 
### for {set ch 0} {$ch < $HWNUMCHAN} {incr ch} {
###     # Only one valid line per every two channels (I+Q)
###     if { [expr {$ch % 2} == 0 ] } {
###         incr nValid
###         if { ![mw_is_connected ${bypass_rx_name}/bypass_valid_in_${nValid}] } {
###             mw_connect_pin ${adc_fifo_name}/dout_valid_${ch} ${bypass_rx_name}/bypass_valid_in_${nValid}
###         }
###     }
###     if { ![mw_is_connected ${adc_pack_name}/adc_valid_${ch}] } {
###         mw_connect_pin ${adc_pack_name}/adc_valid_${ch} ${bypass_rx_name}/mux_valid_out_${nValid}
###     }
###     if { ![mw_is_connected ${adc_pack_name}/adc_data_${ch}] } {
###         mw_connect_pin ${bypass_rx_name}/mux_data_out_${ch} ${adc_pack_name}/adc_data_${ch}
###     }
###     if { ![mw_is_connected ${adc_pack_name}/adc_enable_${ch}] } {
###         mw_connect_pin ${adc_fifo_name}/dout_enable_${ch} ${adc_pack_name}/adc_enable_${ch}
###     }
### 	if { ![mw_is_connected ${bypass_rx_name}/bypass_data_in_${ch}] } {
###         mw_connect_pin ${adc_fifo_name}/dout_data_${ch} ${bypass_rx_name}/bypass_data_in_${ch}
###     }
### 	if { ![mw_is_connected ${bypass_rx_name}/dut_data_in_${ch}] } {
###         mw_connect_pin ${adc_fifo_name}/dout_data_${ch} ${bypass_rx_name}/dut_data_in_${ch}
###     }
### }
### set MW_GPIO_BYPASS 4
### foreach gpio_mux [get_bd_cells -quiet gpio_mux*] {
###     set mux_name [get_property Name $gpio_mux]
###     set nports [get_property CONFIG.NUM_PORTS $gpio_mux]
###     for {set idx 0} {$idx < $nports} {incr idx} {
###         if { !([mw_is_connected ${mux_name}/port_${idx}_i] || 
###             [mw_is_connected ${mux_name}/port_${idx}_o]) } {
###             # Unused, set to default state
###             set_property CONFIG.PORT_${idx}_TYPE $MW_GPIO_BYPASS $gpio_mux
###         }
###     }
### }
### mw_cleanup_orphan_nets
Deleting orphan net /const_gnd_ad9361_dac_data
## source $mw_hdl_dir/projects/ad9361/common/mw_cleanup_bd_gpio.tcl
WARNING: [BD 5-236] No ports matched 'get_bd_ports GPLEDs'
### set LEDPort [get_bd_ports GPLEDs]
WARNING: [BD 5-236] No ports matched 'get_bd_ports DIPSwitches'
### set DIPPort [get_bd_ports DIPSwitches]
WARNING: [BD 5-236] No ports matched 'get_bd_ports PushButtons'
### set PBPort  [get_bd_ports PushButtons]
### set hasPBs  0
### set hasDIPs 0
### set hasLEDs 0
### if { $LEDPort ne ""} { set hasLEDs 1 }
### if { $DIPPort ne ""} { set hasDIPs 3 }
### if { $PBPort  ne ""} { set hasPBs  9 }
### if { $hasLEDs || $hasDIPs || $hasPBs } {
### 
###     set ioSum [expr {$hasLEDs + $hasDIPs + $hasPBs}]
###     if { $boardName == "zed" } {
###         set LED_OFFSET 19
###         set DIP_OFFSET 11
###         set PB_OFFSET  0
###         set LED_WIDTH  7
###         set DIP_WIDTH  8
###         set PB_WIDTH   5
###         if { $ioSum == 13 } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[10:5]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[10:5]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[10:5]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[10:5]\}));"
###         } elseif { $ioSum == 12 } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[25:19], gpio_t[10:5]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[25:19], gpio_o[10:5]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[25:19], gpio_i[10:5]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[25:19], gpio_bd[10:5]\}));"
###         } elseif { $ioSum == 10 } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[18:5]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[18:5]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[18:5]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[18:5]\}));"
###         } elseif { $ioSum == 9  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[25:5]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[25:5]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[25:5]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[25:5]\}));"
###         } elseif { $ioSum == 4  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[10:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[10:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[10:0]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[10:0]\}));"
###         } elseif { $ioSum == 3  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[25:19], gpio_t[10:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[25:19], gpio_o[10:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[25:19], gpio_i[10:0]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[25:19], gpio_bd[10:0]\}));"
###         } elseif { $ioSum == 1  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[50:49], gpio_t[46:27], gpio_t[18:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[50:49], gpio_o[46:27], gpio_o[18:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[50:49], gpio_i[46:27], gpio_i[18:0]}),"
###             set ioBufStr4 "              gpio_bd[31:27], gpio_bd[18:0]\}));"
###         }  
###     } elseif { $boardName == "zc706" } {
###         if { $project == "fmcomms2" } { 
###             set startBit 14 
###         } elseif { $project == "fmcomms5" } { 
###             set startBit 59 
###         }
###         set LED_OFFSET 7
###         set DIP_OFFSET 0
###         set PB_OFFSET  4
###         set LED_WIDTH  3
###         set DIP_WIDTH  4
###         set PB_WIDTH   3
###         if { $ioSum == 13 } {
###             set ioBufStr1 "    .dio_t (gpio_t[$startBit:11]),"
###             set ioBufStr2 "    .dio_i (gpio_o[$startBit:11]),"
###             set ioBufStr3 "    .dio_o (gpio_i[$startBit:11]),"
###             set ioBufStr4 "            gpio_bd[14:11]));"
###         } elseif { $ioSum == 12 } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[9:7]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[9:7]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[9:7]}),"
###             set ioBufStr4 "            gpio_bd[$14:11], gpio_bd[9:7]\}));"
###         } elseif { $ioSum == 10 } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[3:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[3:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[3:0]}),"
###             set ioBufStr4 "            gpio_bd[14:11], gpio_bd[3:0]\}));"
###         } elseif { $ioSum == 9  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[9:7], gpio_t[3:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[9:7], gpio_o[3:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[9:7], gpio_i[3:0]}),"
###             set ioBufStr4 "            gpio_bd[14:11], gpio_bd[9:7], gpio_bd[3:0]\}));"
###         } elseif { $ioSum == 4  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[6:4]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[6:4]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[6:4]}),"
###             set ioBufStr4 "            gpio_bd[14:11], gpio_bd[6:4]\}));"
###         } elseif { $ioSum == 3  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[9:4]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[9:4]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[9:4]}),"
###             set ioBufStr4 "            gpio_bd[14:11], gpio_bd[9:4]\}));"
###         } elseif { $ioSum == 1  } {
###             set ioBufStr1 "    .dio_t ({gpio_t[$startBit:11], gpio_t[6:0]}),"
###             set ioBufStr2 "    .dio_i ({gpio_o[$startBit:11], gpio_o[6:0]}),"
###             set ioBufStr3 "    .dio_o ({gpio_i[$startBit:11], gpio_i[6:0]}),"
###             set ioBufStr4 "            gpio_bd[14:11], gpio_bd[6:0]\}));"
###         }  
###     } elseif { $boardName == "ccfmc_lvds" } {
###         set LED_OFFSET 5
###         set DIP_OFFSET 8 
###         set PB_OFFSET  0
###         set LED_WIDTH  3
###         set DIP_WIDTH  4 
###         set PB_WIDTH   4
###         if { $ioSum == 13 } {
###             set ioBufStr1 "   .dio_t (gpio_t[20:12]),"
###             set ioBufStr2 "   .dio_i (gpio_o[20:12]),"
###             set ioBufStr3 "   .dio_o (gpio_i[20:12]),"
###             set ioBufStr4 "   .dio_p (gpio_bd[20:12]));"
###         } elseif { $ioSum == 12 } {
###             set ioBufStr1 "   .dio_t ({gpio_t[20:12], gpio_t[7:5]}),"
###             set ioBufStr2 "   .dio_i ({gpio_o[20:12], gpio_o[7:5]}),"
###             set ioBufStr3 "   .dio_o ({gpio_i[20:12], gpio_i[7:5]}),"
###             set ioBufStr4 "   .dio_p ({gpio_bd[20:12], gpio_bd[7:5]}));"
###         } elseif { $ioSum == 10 } {
###             set ioBufStr1 "   .dio_t (gpio_t[20:8]),"
###             set ioBufStr2 "   .dio_i (gpio_o[20:8]),"
###             set ioBufStr3 "   .dio_o (gpio_i[20:8]),"
###             set ioBufStr4 "   .dio_p (gpio_bd[20:8]));"
###         } elseif { $ioSum == 9  } {
###             set ioBufStr1 "   .dio_t (gpio_t[20:5]),"
###             set ioBufStr2 "   .dio_i (gpio_o[20:5]),"
###             set ioBufStr3 "   .dio_o (gpio_i[20:5]),"
###             set ioBufStr4 "   .dio_p (gpio_bd[20:5]));"
###         } elseif { $ioSum == 4  } {
###             set ioBufStr1 "   .dio_t ({gpio_t[20:12], gpio_t[3:0]}),"
###             set ioBufStr2 "   .dio_i ({gpio_o[20:12], gpio_o[3:0]}),"
###             set ioBufStr3 "   .dio_o ({gpio_i[20:12], gpio_i[3:0]}),"
###             set ioBufStr4 "   .dio_p ({gpio_bd[20:12], gpio_bd[3:0]}));"
###         } elseif { $ioSum == 3  } {
###             set ioBufStr1 "   .dio_t ({gpio_t[20:12], gpio_t[7:5], gpio_t[3:0]}),"
###             set ioBufStr2 "   .dio_i ({gpio_o[20:12], gpio_o[7:5], gpio_o[3:0]}),"
###             set ioBufStr3 "   .dio_o ({gpio_i[20:12], gpio_i[7:5], gpio_i[3:0]}),"
###             set ioBufStr4 "   .dio_p ({gpio_bd[20:12], gpio_bd[7:5], gpio_bd[3:0]}));"
###         } elseif { $ioSum == 1  } {
###             set ioBufStr1 "   .dio_t ({gpio_t[20:8], gpio_t[3:0]}),"
###             set ioBufStr2 "   .dio_i ({gpio_i[20:8], gpio_i[3:0]}),"
###             set ioBufStr3 "   .dio_o ({gpio_o[20:8], gpio_o[3:0]}),"
###             set ioBufStr4 "   .dio_p ({gpio_bd[20:8], gpio_bd[3:0]}));"
###         }  
###     }
###     
###     set dutConstrFile [ get_files -of [get_filesets {constrs_1}] ]
###     remove_files -fileset constrs_1 $dutConstrFile
### 
###     set firstLED $LED_OFFSET
###     set lastLED [ expr {$LED_OFFSET + $LED_WIDTH - 1} ]
###     set firstDIP $DIP_OFFSET
###     set lastDIP [ expr {$DIP_OFFSET + $DIP_WIDTH - 1} ]
###     set firstPB  $PB_OFFSET
###     set lastPB  [ expr {$PB_OFFSET + $PB_WIDTH - 1} ]
###     
###     set ledStr ""
###     set dipStr ""
###     set pbStr  ""
###     set dw 0
###     set minOff 0
###     set maxOff 0
###     # Create insertion string, and calculate required GPIO datawidth
###     if { $hasLEDs } { 
###         set ledStr "    .GPLEDs (gpio_bd[$lastLED:$firstLED]),\n" 
###         set dw [ expr { $dw + $LED_WIDTH } ]
###     }
###     if { $hasDIPs } { 
###         set dipStr "    .DIPSwitches (gpio_bd[$lastDIP:$firstDIP]),\n" 
###         set dw [ expr { $dw + $DIP_WIDTH } ]
###     }
###     if { $hasPBs } { 
###         set pbStr "    .PushButtons (gpio_bd[$lastPB:$firstPB]),\n"
###         set dw [ expr { $dw + $PB_WIDTH } ]
###     }
###     set insertStr $ledStr$dipStr$pbStr 
###  
###     # find system_top.v
###     set foundIOBuf 0
###     set sysTop [ get_files system_top.v ]
###     set topF [ open $sysTop r+ ]
###     set newTop [ open $sysTop.new w ]
###     while {[gets $topF line] >= 0} {
###         if { [string first "system_wrapper i_system_wrapper" $line] != -1 } {
###              puts $newTop $line 
###              puts $newTop $insertStr
###         } elseif { [string first "i_iobuf_bd" $line] != -1 } {
###              regexp {[0-9]+} $line oldDw
###              set newDW [ expr { $oldDw - $dw } ]
###              set newLine "   ad_iobuf #(.DATA_WIDTH($newDW)) i_iobuf_bd ("
###              puts $newTop $newLine
###              set foundIOBuf 1
###         } elseif { [string first ", gpio_t" $line] != -1 &&  $foundIOBuf == 1 } {
###             puts $newTop $ioBufStr1 
###         } elseif { [string first ", gpio_i" $line] != -1 &&  $foundIOBuf == 1 } {
###             puts $newTop $ioBufStr2 
###         } elseif { [string first ", gpio_o" $line] != -1 &&  $foundIOBuf == 1 } {
###             puts $newTop $ioBufStr3
###         } elseif { [string first "gpio_bd" $line] != -1 &&  $foundIOBuf == 1 } {
###             puts $newTop $ioBufStr4
###             set foundIOBuf 0
###         } else {
###             puts $newTop $line
###         }
###     }
###     close $newTop
###     close $topF
### 
###     file rename -force $sysTop $sysTop.old
###     file rename -force $sysTop.new $sysTop
### }
## validate_bd_design
WARNING: [#UNDEF] When using EMIO pins for SPI_0 tie SSIN High in the PL bitstream
WARNING: [#UNDEF] When using EMIO pins for SPI_1 tie SSIN High in the PL bitstream
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/delay_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK1 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/l_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361/s_axi_aclk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_tdd_sync/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_divclk/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_divclk/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_ad9361_divclk_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_fifo/din_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_fifo/dout_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_pack/adc_rst have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	POLARITY=ACTIVE_HIGH 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_adc_pack/adc_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361_dac_fifo/din_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /axi_ad9361_dac_fifo/dout_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_axi_ad9361_0_l_clk 
WARNING: [BD 41-927] Following properties on pin /util_ad9361_dac_upack/dac_clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /dac_latch/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_tx/IPCORE_CLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_tx/AXI4_Lite_ACLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /bypass_rx/IPCORE_CLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /bypass_rx/AXI4_Lite_ACLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_sys_ps7_0_FCLK_CLK0 
WARNING: [BD 41-927] Following properties on pin /util_mw_clkconstr/clk have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_ad9361_divclk_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /util_mw_clkconstr/clk_out have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /led_driver/rst have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	POLARITY=ACTIVE_HIGH 
WARNING: [BD 41-927] Following properties on pin /ZynqBF_2t_ip_0/IPCORE_CLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
WARNING: [BD 41-927] Following properties on pin /ZynqBF_2t_ip_0/AXI4_Lite_ACLK have been updated from connected ip. They may not be synchronized with cell properties. You can set property on pin directly to confirm the value and resolve the warning.
	CLK_DOMAIN=system_util_mw_clkconstr_0_clk_out 
## save_bd_design
Wrote  : </home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/system.bd> 
## source $mw_hdl_dir/projects/ad9361/common/gen_wrapper.tcl
### set BDFILEPATH [get_files -quiet system.bd]
### make_wrapper -files $BDFILEPATH -top
INFO: [BD 41-1662] The design 'system.bd' is already validated. Therefore parameter propagation will not be re-run.
VHDL Output written to : /home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/synth/system.v
VHDL Output written to : /home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/sim/system.v
VHDL Output written to : /home/jason/matlab/Projects/ZynqBF_2tx/hdl_prj/vivado_ip_prj/vivado_prj.srcs/sources_1/bd/system/hdl/system_wrapper.v
### regsub -all "system.bd" [get_files -quiet system.bd] "hdl/system_wrapper.v" TOPFILEPATH
### catch {
###         add_files -norecurse $TOPFILEPATH
###         update_compile_order -fileset sources_1
###         }
### regsub -all "system.bd" [get_files -quiet system.bd] "hdl/system_wrapper.vhd" TOPFILEPATH
### catch {
###         add_files -norecurse $TOPFILEPATH
###         update_compile_order -fileset sources_1
###         }
# close_project
# exit
INFO: [Common 17-206] Exiting Vivado at Mon Feb 11 10:26:35 2019...

Elapsed time is 17.6237 seconds.



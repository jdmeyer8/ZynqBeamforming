// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/util_mw_bypass_user_logic/util_mw_bypass_user_logic_src_util_mw_bypass_user_logic.v
// Created: 2018-08-08 16:25:33
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.5e-07
// Target subsystem base rate: 2.5e-07
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.5e-07
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// mux_data_out_0                ce_out        2.5e-07
// mux_data_out_1                ce_out        2.5e-07
// mux_valid_out_0               ce_out        2.5e-07
// mux_data_out_2                ce_out        2.5e-07
// mux_data_out_3                ce_out        2.5e-07
// mux_valid_out_1               ce_out        2.5e-07
// mux_data_out_4                ce_out        2.5e-07
// mux_data_out_5                ce_out        2.5e-07
// mux_valid_out_2               ce_out        2.5e-07
// mux_data_out_6                ce_out        2.5e-07
// mux_data_out_7                ce_out        2.5e-07
// mux_valid_out_3               ce_out        2.5e-07
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: util_mw_bypass_user_logic_src_util_mw_bypass_user_logic
// Source Path: util_mw_bypass_user_logic/util_mw_bypass_user_logic 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module util_mw_bypass_user_logic_src_util_mw_bypass_user_logic
          #(
           parameter DATA_WIDTH = 16,
           parameter NUM_CHAN=4) 
          (clk,
           reset,
           clk_enable,
           sel,
           bypass_data_in_0,
           bypass_data_in_1,
           bypass_valid_in_0,
           bypass_data_in_2,
           bypass_data_in_3,
           bypass_valid_in_1,
           bypass_data_in_4,
           bypass_data_in_5,
           bypass_valid_in_2,
           bypass_data_in_6,
           bypass_data_in_7,
           bypass_valid_in_3,
           dut_data_in_0,
           dut_data_in_1,
           dut_data_in_2,
           dut_data_in_3,
           dut_data_in_4,
           dut_data_in_5,
           dut_data_in_6,
           dut_data_in_7,
           dut_valid_in,
           ce_out,
           mux_data_out_0,
           mux_data_out_1,
           mux_valid_out_0,
           mux_data_out_2,
           mux_data_out_3,
           mux_valid_out_1,
           mux_data_out_4,
           mux_data_out_5,
           mux_valid_out_2,
           mux_data_out_6,
           mux_data_out_7,
           mux_valid_out_3);


  input   clk;
  input   reset;
  input   clk_enable;
  input   sel;
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_0;  // int16
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_1;  // int16
  input   bypass_valid_in_0;
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_2;  // int16
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_3;  // int16
  input   bypass_valid_in_1;
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_4;  // int16
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_5;  // int16
  input   bypass_valid_in_2;
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_6;  // int16
  input   signed [(DATA_WIDTH-1):0] bypass_data_in_7;  // int16
  input   bypass_valid_in_3;
  input   signed [(DATA_WIDTH-1):0] dut_data_in_0;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_1;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_2;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_3;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_4;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_5;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_6;  // int16
  input   signed [(DATA_WIDTH-1):0] dut_data_in_7;  // int16
  input   dut_valid_in;
  output  ce_out;
  output  signed [(DATA_WIDTH-1):0] mux_data_out_0;  // int16
  output  signed [(DATA_WIDTH-1):0] mux_data_out_1;  // int16
  output  mux_valid_out_0;
  output  signed [(DATA_WIDTH-1):0] mux_data_out_2;  // int16
  output  signed [(DATA_WIDTH-1):0] mux_data_out_3;  // int16
  output  mux_valid_out_1;
  output  signed [(DATA_WIDTH-1):0] mux_data_out_4;  // int16
  output  signed [(DATA_WIDTH-1):0] mux_data_out_5;  // int16
  output  mux_valid_out_2;
  output  signed [(DATA_WIDTH-1):0] mux_data_out_6;  // int16
  output  signed [(DATA_WIDTH-1):0] mux_data_out_7;  // int16
  output  mux_valid_out_3;


  wire enb;
  wire signed [(DATA_WIDTH-1):0] Switch4_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay_out1;  // int16
  wire signed [(DATA_WIDTH-1):0] Switch1_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay1_out1;  // int16
  wire Switch3_out1;
  reg  Delay8_out1;
  wire signed [(DATA_WIDTH-1):0] Switch2_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay2_out1;  // int16
  wire signed [(DATA_WIDTH-1):0] Switch5_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay3_out1;  // int16
  wire Switch10_out1;
  reg  Delay9_out1;
  wire signed [(DATA_WIDTH-1):0] Switch6_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay4_out1;  // int16
  wire signed [(DATA_WIDTH-1):0] Switch7_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay5_out1;  // int16
  wire Switch11_out1;
  reg  Delay10_out1;
  wire signed [(DATA_WIDTH-1):0] Switch8_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay6_out1;  // int16
  wire signed [(DATA_WIDTH-1):0] Switch9_out1;  // int16
  reg signed [(DATA_WIDTH-1):0] Delay7_out1;  // int16
  wire Switch12_out1;
  reg  Delay11_out1;


  assign Switch4_out1 = (sel == 1'b0 ? dut_data_in_0 :
              bypass_data_in_0);



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Switch4_out1;
        end
      end
    end



  assign mux_data_out_0 = Delay_out1;

  assign Switch1_out1 = (sel == 1'b0 ? dut_data_in_1 :
              bypass_data_in_1);



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Switch1_out1;
        end
      end
    end



  assign mux_data_out_1 = Delay1_out1;

  assign Switch3_out1 = (sel == 1'b0 ? dut_valid_in :
              bypass_valid_in_0);



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Switch3_out1;
        end
      end
    end



  assign mux_valid_out_0 = Delay8_out1;

  assign Switch2_out1 = (sel == 1'b0 ? dut_data_in_2 :
              bypass_data_in_2);



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Switch2_out1;
        end
      end
    end



  assign mux_data_out_2 = Delay2_out1;

  assign Switch5_out1 = (sel == 1'b0 ? dut_data_in_3 :
              bypass_data_in_3);



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Switch5_out1;
        end
      end
    end



  assign mux_data_out_3 = Delay3_out1;

  assign Switch10_out1 = (sel == 1'b0 ? dut_valid_in :
              bypass_valid_in_1);



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Switch10_out1;
        end
      end
    end



  assign mux_valid_out_1 = Delay9_out1;

  assign Switch6_out1 = (sel == 1'b0 ? dut_data_in_4 :
              bypass_data_in_4);



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Switch6_out1;
        end
      end
    end



  assign mux_data_out_4 = Delay4_out1;

  assign Switch7_out1 = (sel == 1'b0 ? dut_data_in_5 :
              bypass_data_in_5);



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Switch7_out1;
        end
      end
    end



  assign mux_data_out_5 = Delay5_out1;

  assign Switch11_out1 = (sel == 1'b0 ? dut_valid_in :
              bypass_valid_in_2);



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Switch11_out1;
        end
      end
    end



  assign mux_valid_out_2 = Delay10_out1;

  assign Switch8_out1 = (sel == 1'b0 ? dut_data_in_6 :
              bypass_data_in_6);



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Switch8_out1;
        end
      end
    end



  assign mux_data_out_6 = Delay6_out1;

  assign Switch9_out1 = (sel == 1'b0 ? dut_data_in_7 :
              bypass_data_in_7);



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Switch9_out1;
        end
      end
    end



  assign mux_data_out_7 = Delay7_out1;

  assign Switch12_out1 = (sel == 1'b0 ? dut_valid_in :
              bypass_valid_in_3);



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Switch12_out1;
        end
      end
    end



  assign mux_valid_out_3 = Delay11_out1;

  assign ce_out = clk_enable;

endmodule  // util_mw_bypass_user_logic_src_util_mw_bypass_user_logic


-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_correlator1.vhd
-- Created: 2019-02-08 23:33:51
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_correlator_wrapper
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/peakdetect/correlator_wrapper
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ZynqBF_2t_ip_src_ZynqBF_2tx_fpga_pkg.ALL;

ENTITY ZynqBF_2t_ip_src_correlator_wrapper IS
  GENERIC(
        CHANNEL                           :   integer := 1
        );
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        rx                                :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        valid                             :   IN    std_logic;
        en                                :   IN    std_logic;
        rst                               :   IN    std_logic;
        dout                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        dval                              :   OUT   std_logic;
        step                              :   OUT   std_logic
        );
END ZynqBF_2t_ip_src_correlator_wrapper;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_correlator_wrapper IS

  -- Component Declarations
  COMPONENT ZynqBF_2t_ip_src_data_in
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          addr                            :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          we                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_correlation_config
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          vin                             :   IN    std_logic;
          addr                            :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          shift                           :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          vout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_rx_ram_i
    PORT( clk                             :   IN    std_logic;
          ram_rst                         :   IN    std_logic;
	      enb                             :   IN    std_logic;
          i                               :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          wdata                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          waddr                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          -- we                              :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          we                              :   IN    std_logic;  -- ufix64
          raddr                           :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          shift                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          dout                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          probe                           :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_goldSeq1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          addr                            :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          gs_i                            :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En15 [64]
          gs_q                            :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En15 [64]
          );
  END COMPONENT;
  
  COMPONENT ZynqBF_2t_ip_src_goldSeq2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          addr                            :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          gs_i                            :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En15 [64]
          gs_q                            :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En15 [64]
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_shift_rx
    PORT( clk:                              in std_logic;
          reset:                            in std_logic;
          u                               :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En15 [64]
          shift                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          y                               :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En15 [64]
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_correlator_i
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rx                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          gs                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          start                           :   IN    std_logic;
          vin                             :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          vout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_correlator_en
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          done                            :   IN    std_logic;
          addri                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          start                           :   OUT   std_logic;
          en                              :   OUT   std_logic;
          gs_addr                         :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          rx_addr                         :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_sum_elements_i
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    vector_of_std_logic_vector32(0 TO 7);  -- sfix32_En16 [8]
          start                           :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          vout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ZynqBF_2t_ip_src_all_u
    PORT( u                               :   IN    std_logic_vector(0 TO 7);  -- boolean [8]
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ZynqBF_2t_ip_src_data_in
    USE ENTITY work.ZynqBF_2t_ip_src_data_in(rtl);

  FOR ALL : ZynqBF_2t_ip_src_correlation_config
    USE ENTITY work.ZynqBF_2t_ip_src_correlation_config(rtl);

  FOR ALL : ZynqBF_2t_ip_src_rx_ram_i
    USE ENTITY work.ZynqBF_2t_ip_src_rx_ram_i(rtl);

  FOR ALL : ZynqBF_2t_ip_src_goldSeq1
    USE ENTITY work.ZynqBF_2t_ip_src_goldSeq1(rtl);
    
  FOR ALL : ZynqBF_2t_ip_src_goldSeq2
    USE ENTITY work.ZynqBF_2t_ip_src_goldSeq2(rtl);

  FOR ALL : ZynqBF_2t_ip_src_shift_rx
    USE ENTITY work.ZynqBF_2t_ip_src_shift_rx(rtl);

  FOR ALL : ZynqBF_2t_ip_src_correlator_i
    USE ENTITY work.ZynqBF_2t_ip_src_correlator_i(rtl);

  FOR ALL : ZynqBF_2t_ip_src_correlator_en
    USE ENTITY work.ZynqBF_2t_ip_src_correlator_en(rtl);

  FOR ALL : ZynqBF_2t_ip_src_sum_elements_i
    USE ENTITY work.ZynqBF_2t_ip_src_sum_elements_i(rtl);

  FOR ALL : ZynqBF_2t_ip_src_all_u
    USE ENTITY work.ZynqBF_2t_ip_src_all_u(rtl);

  -- Signals
  SIGNAL Constant_out1                    : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL rx_i                             : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL waddr                            : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL we                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL we_unsigned                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL we_is_not0                       : std_logic;
  SIGNAL addr                             : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL shift                            : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL correlation_config_out3          : std_logic;
  SIGNAL shift_unsigned                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay4_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay4_out1_1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rx_addr                          : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL correlator_q_out2                : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL gs_addr                          : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL gs_data                          : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL gold_sequences_out2              : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL gs_i                             : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL gs_q                             : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL corr_ram_dout                    : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL shift_rx1_out1                   : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL corr_start                       : std_logic;
  SIGNAL corr_en                          : std_logic;
  SIGNAL correlator_q_out1                : vector_of_std_logic_vector32(0 TO 63);  -- ufix32 [64]
  SIGNAL correlator_q_out2_0              : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL correlator_i_out2                : std_logic_vector(0 TO 63);  -- boolean [64]
  SIGNAL mult_done                        : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Switch_out1_0_1                  : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL corr_ram_dout_1                  : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL y                                : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL correlator_i_out1                : vector_of_std_logic_vector32(0 TO 63);  -- ufix32 [64]
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL corr_vout                        : std_logic;
  SIGNAL sum_elements_i_out1              : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL sum_elements_i_out2              : std_logic_vector(0 TO 7);  -- boolean [8]
  SIGNAL sum_elements_i_out1_signed       : vector_of_signed32(0 TO 7);  -- sfix32_En16 [8]
  SIGNAL Sum_of_Elements1_out1            : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL Delay1_out1                      : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL sum_elements_q_out1              : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL sum_elements_q_out2              : std_logic_vector(0 TO 7);  -- boolean [8]
  SIGNAL sum_elements_q_out1_signed       : vector_of_signed32(0 TO 7);  -- sfix32_En16 [8]
  SIGNAL Sum_of_Elements2_out1            : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL Delay5_out1                      : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL Add_add_temp                     : signed(35 DOWNTO 0);  -- sfix36_En16
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL corr_vout_1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL y_1                              : std_logic;
  SIGNAL test                             : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL corr_fsm                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL corr_ram_dout_2                  : vector_of_signed16(0 TO 63);  -- sfix16_En15 [64]
  SIGNAL corr_ram_dout_3                  : vector_of_signed16(0 TO 63);  -- sfix16_En15 [64]

BEGIN
  u_data_in : ZynqBF_2t_ip_src_data_in
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              rst => rst,
              valid => valid,
              addr => waddr,  -- ufix9
              we => we  -- ufix64
              );

  u_correlation_config : ZynqBF_2t_ip_src_correlation_config
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              rst => rst,
              vin => we_is_not0,
              addr => addr,  -- ufix9
              shift => shift,  -- ufix6
              vout => correlation_config_out3
              );
              
              
  u_rx_ram_gen: for k4 in 0 to 63 generate
    u_rx_ram_i: ZynqBF_2t_ip_src_rx_ram_i
    PORT MAP(
      clk => clk,
      ram_rst => rst,
      enb => enb,
      i => std_logic_vector(to_unsigned(k4,6)),
      wdata => rx(0),
      waddr => waddr,
      we => we(k4),
      raddr => rx_addr,
      shift => std_logic_vector(Delay4_out1),
      dout => corr_ram_dout_1(k4),
      probe => open
    );
    
    u_rx_ram_q: ZynqBF_2t_ip_src_rx_ram_i
    PORT MAP(
      clk => clk,
      ram_rst => rst,
      enb => enb,
      i => std_logic_vector(to_unsigned(k4,6)),
      wdata => rx(1),
      waddr => waddr,
      we => we(k4),
      raddr => rx_addr,
      shift => std_logic_vector(Delay4_out1),
      dout => corr_ram_dout(k4),
      probe => open
    );
  end generate;

  
  gen_gs1 : if CHANNEL = 1 generate
    u_goldSeq1 : ZynqBF_2t_ip_src_goldSeq1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              addr => gs_addr,  -- ufix6
              gs_i => gs_i,  -- sfix16_En15 [64]
              gs_q => gs_q  -- sfix16_En15 [64]
              );
    end generate;
    
  gen_gs2 : if CHANNEL = 2 generate
    u_goldSeq2 : ZynqBF_2t_ip_src_goldSeq2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              addr => gs_addr,  -- ufix6
              gs_i => gs_i,  -- sfix16_En15 [64]
              gs_q => gs_q  -- sfix16_En15 [64]
              );
    end generate;

  u_shift_rx1 : ZynqBF_2t_ip_src_shift_rx
    PORT MAP( clk => clk,
              reset => reset,
              u => corr_ram_dout,  -- sfix16_En15 [64]
              shift => std_logic_vector(Delay4_out1_1),  -- ufix6
              y => shift_rx1_out1  -- sfix16_En15 [64]
              );

  u_correlator_en : ZynqBF_2t_ip_src_correlator_en
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => correlation_config_out3,
              done => Logical_Operator6_out1,
              addri => addr,  -- ufix9
              start => corr_start,
              en => corr_en,
              gs_addr => gs_addr,  -- ufix6
              rx_addr => rx_addr  -- ufix10
              );

  u_shift_rx : ZynqBF_2t_ip_src_shift_rx
    PORT MAP( clk => clk,
              reset => reset,
              u => corr_ram_dout_1,  -- sfix16_En15 [64]
              shift => std_logic_vector(Delay4_out1_1),  -- ufix6
              y => y  -- sfix16_En15 [64]
              );

  u_all_u : ZynqBF_2t_ip_src_all_u
    PORT MAP( u => sum_elements_i_out2,  -- boolean [8]
              y => y_1
              );

  u_all_u1 : ZynqBF_2t_ip_src_all_u
    PORT MAP( u => sum_elements_q_out2,  -- boolean [8]
              y => test
              );

  Constant_out1(0) <= to_unsigned(16#00#, 6);
  Constant_out1(1) <= to_unsigned(16#01#, 6);
  Constant_out1(2) <= to_unsigned(16#02#, 6);
  Constant_out1(3) <= to_unsigned(16#03#, 6);
  Constant_out1(4) <= to_unsigned(16#04#, 6);
  Constant_out1(5) <= to_unsigned(16#05#, 6);
  Constant_out1(6) <= to_unsigned(16#06#, 6);
  Constant_out1(7) <= to_unsigned(16#07#, 6);
  Constant_out1(8) <= to_unsigned(16#08#, 6);
  Constant_out1(9) <= to_unsigned(16#09#, 6);
  Constant_out1(10) <= to_unsigned(16#0A#, 6);
  Constant_out1(11) <= to_unsigned(16#0B#, 6);
  Constant_out1(12) <= to_unsigned(16#0C#, 6);
  Constant_out1(13) <= to_unsigned(16#0D#, 6);
  Constant_out1(14) <= to_unsigned(16#0E#, 6);
  Constant_out1(15) <= to_unsigned(16#0F#, 6);
  Constant_out1(16) <= to_unsigned(16#10#, 6);
  Constant_out1(17) <= to_unsigned(16#11#, 6);
  Constant_out1(18) <= to_unsigned(16#12#, 6);
  Constant_out1(19) <= to_unsigned(16#13#, 6);
  Constant_out1(20) <= to_unsigned(16#14#, 6);
  Constant_out1(21) <= to_unsigned(16#15#, 6);
  Constant_out1(22) <= to_unsigned(16#16#, 6);
  Constant_out1(23) <= to_unsigned(16#17#, 6);
  Constant_out1(24) <= to_unsigned(16#18#, 6);
  Constant_out1(25) <= to_unsigned(16#19#, 6);
  Constant_out1(26) <= to_unsigned(16#1A#, 6);
  Constant_out1(27) <= to_unsigned(16#1B#, 6);
  Constant_out1(28) <= to_unsigned(16#1C#, 6);
  Constant_out1(29) <= to_unsigned(16#1D#, 6);
  Constant_out1(30) <= to_unsigned(16#1E#, 6);
  Constant_out1(31) <= to_unsigned(16#1F#, 6);
  Constant_out1(32) <= to_unsigned(16#20#, 6);
  Constant_out1(33) <= to_unsigned(16#21#, 6);
  Constant_out1(34) <= to_unsigned(16#22#, 6);
  Constant_out1(35) <= to_unsigned(16#23#, 6);
  Constant_out1(36) <= to_unsigned(16#24#, 6);
  Constant_out1(37) <= to_unsigned(16#25#, 6);
  Constant_out1(38) <= to_unsigned(16#26#, 6);
  Constant_out1(39) <= to_unsigned(16#27#, 6);
  Constant_out1(40) <= to_unsigned(16#28#, 6);
  Constant_out1(41) <= to_unsigned(16#29#, 6);
  Constant_out1(42) <= to_unsigned(16#2A#, 6);
  Constant_out1(43) <= to_unsigned(16#2B#, 6);
  Constant_out1(44) <= to_unsigned(16#2C#, 6);
  Constant_out1(45) <= to_unsigned(16#2D#, 6);
  Constant_out1(46) <= to_unsigned(16#2E#, 6);
  Constant_out1(47) <= to_unsigned(16#2F#, 6);
  Constant_out1(48) <= to_unsigned(16#30#, 6);
  Constant_out1(49) <= to_unsigned(16#31#, 6);
  Constant_out1(50) <= to_unsigned(16#32#, 6);
  Constant_out1(51) <= to_unsigned(16#33#, 6);
  Constant_out1(52) <= to_unsigned(16#34#, 6);
  Constant_out1(53) <= to_unsigned(16#35#, 6);
  Constant_out1(54) <= to_unsigned(16#36#, 6);
  Constant_out1(55) <= to_unsigned(16#37#, 6);
  Constant_out1(56) <= to_unsigned(16#38#, 6);
  Constant_out1(57) <= to_unsigned(16#39#, 6);
  Constant_out1(58) <= to_unsigned(16#3A#, 6);
  Constant_out1(59) <= to_unsigned(16#3B#, 6);
  Constant_out1(60) <= to_unsigned(16#3C#, 6);
  Constant_out1(61) <= to_unsigned(16#3D#, 6);
  Constant_out1(62) <= to_unsigned(16#3E#, 6);
  Constant_out1(63) <= to_unsigned(16#3F#, 6);

  rx_i <= signed(rx(0));

  we_unsigned <= unsigned(we);

  
  we_is_not0 <= '1' WHEN we_unsigned /= to_unsigned(0, 64) ELSE
      '0';

  shift_unsigned <= unsigned(shift);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay4_out1 <= shift_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  GEN_LABEL3: FOR k3 IN 0 TO 63 GENERATE
    u_correlator_q : ZynqBF_2t_ip_src_correlator_i
      PORT MAP( clk => clk,
                reset => reset,
                enb => enb,
                rx => shift_rx1_out1(k3),  -- sfix16_En15
                gs => gs_q(k3),  -- sfix16_En15
                start => corr_start,
                vin => corr_en,
                dout => correlator_q_out1(k3),  -- sfix32_En16
                vout => correlator_q_out2(k3)
                );
  END GENERATE;


  Logical_Operator5_out1 <= '1' when correlator_q_out2 = x"FFFFFFFFFFFFFFFF" else '0';

  mult_done <= '1' when correlator_i_out2 = x"FFFFFFFFFFFFFFFF" else '0';

  Logical_Operator6_out1 <= mult_done AND Logical_Operator5_out1;


  GEN_LABEL2: FOR k2 IN 0 TO 63 GENERATE
    u_correlator_i : ZynqBF_2t_ip_src_correlator_i
      PORT MAP( clk => clk,
                reset => reset,
                enb => enb,
                rx => y(k2),  -- sfix16_En15
                gs => gs_i(k2),  -- sfix16_En15
                start => corr_start,
                vin => corr_en,
                dout => correlator_i_out1(k2),  -- sfix32_En16
                vout => correlator_i_out2(k2)
                );
  END GENERATE;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Logical_Operator6_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  corr_vout <= Delay2_reg(1);

  GEN_LABEL1: FOR k1 IN 0 TO 7 GENERATE
    u_sum_elements_i : ZynqBF_2t_ip_src_sum_elements_i
      PORT MAP( clk => clk,
                reset => reset,
                enb => enb,
                din => correlator_i_out1(8*k1 TO 8*(k1+1) - 1),  -- sfix32_En16 [8]
                start => corr_vout,
                dout => sum_elements_i_out1(k1),  -- sfix32_En16
                vout => sum_elements_i_out2(k1)
                );
  END GENERATE;

  outputgen1: FOR k1 IN 0 TO 7 GENERATE
    sum_elements_i_out1_signed(k1) <= signed(sum_elements_i_out1(k1));
  END GENERATE;

  Sum_of_Elements1_out1 <= (((((((resize(sum_elements_i_out1_signed(0), 35)) + (resize(sum_elements_i_out1_signed(1), 35))) + (resize(sum_elements_i_out1_signed(2), 35))) + (resize(sum_elements_i_out1_signed(3), 35))) + (resize(sum_elements_i_out1_signed(4), 35))) + (resize(sum_elements_i_out1_signed(5), 35))) + (resize(sum_elements_i_out1_signed(6), 35))) + (resize(sum_elements_i_out1_signed(7), 35));

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Sum_of_Elements1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  GEN_LABEL: FOR k IN 0 TO 7 GENERATE
    u_sum_elements_q : ZynqBF_2t_ip_src_sum_elements_i
      PORT MAP( clk => clk,
                reset => reset,
                enb => enb,
                din => correlator_q_out1(8*k TO 8*(k+1) - 1),  -- sfix32_En16 [8]
                start => corr_vout,
                dout => sum_elements_q_out1(k),  -- sfix32_En16
                vout => sum_elements_q_out2(k)
                );
  END GENERATE;

  outputgen: FOR k IN 0 TO 7 GENERATE
    sum_elements_q_out1_signed(k) <= signed(sum_elements_q_out1(k));
  END GENERATE;

  Sum_of_Elements2_out1 <= (((((((resize(sum_elements_q_out1_signed(0), 35)) + (resize(sum_elements_q_out1_signed(1), 35))) + (resize(sum_elements_q_out1_signed(2), 35))) + (resize(sum_elements_q_out1_signed(3), 35))) + (resize(sum_elements_q_out1_signed(4), 35))) + (resize(sum_elements_q_out1_signed(5), 35))) + (resize(sum_elements_q_out1_signed(6), 35))) + (resize(sum_elements_q_out1_signed(7), 35));

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Sum_of_Elements2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Add_add_temp <= (resize(Delay1_out1, 36)) + (resize(Delay5_out1, 36));
  Add_out1 <= Add_add_temp(31 DOWNTO 0);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        corr_vout_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        corr_vout_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  -- dout <= std_logic_vector(corr_vout_1);
  dout_reg_process: process(clk,reset)
  begin
    if clk'EVENT AND clk = '1' then
      if reset = '1' then
        dout <= x"00000000";
      elsif enb = '1' and Delay3_reg(1) = '1' then
        dout <= std_logic_vector(corr_vout_1);
      end if;
    end if;
  end process;
  

  Logical_Operator8_out1 <= y_1 AND test;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= Logical_Operator8_out1;
        Delay3_reg(1 TO 3) <= Delay3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  
  Compare_To_Constant3_out1 <= '1' WHEN corr_fsm = to_unsigned(16#01#, 8) ELSE
      '0';

  Logical_Operator10_out1 <= Compare_To_Constant3_out1 AND en;

  Logical_Operator9_out1 <= Compare_To_Constant2_out1 OR (Logical_Operator10_out1 OR Delay3_out1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        corr_fsm <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF Logical_Operator9_out1 = '1' THEN 
          IF corr_fsm >= to_unsigned(16#02#, 8) THEN 
            corr_fsm <= to_unsigned(16#00#, 8);
          ELSE 
            corr_fsm <= corr_fsm + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN corr_fsm = to_unsigned(16#02#, 8) ELSE
      '0';

  dval <= Delay3_out1;

  step <= Compare_To_Constant2_out1;

END rtl;


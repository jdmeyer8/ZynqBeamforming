-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_update_csi.vhd
-- Created: 2019-02-08 23:33:52
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_update_csi
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/ch_est/update_csi
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ZynqBF_2t_ip_src_update_csi IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in_i                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        in_q                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        pd1                               :   IN    std_logic;
        pd2                               :   IN    std_logic;
        en                                :   IN    std_logic;
        ch1_i                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        ch1_q                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        ch2_i                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        ch2_q                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END ZynqBF_2t_ip_src_update_csi;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_update_csi IS

  -- Signals
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL in_i_signed                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch1_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL in_q_signed                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch2_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch2_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Switch3_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch3_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch4_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch4_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  Logical_Operator_out1 <= en AND pd1;

  in_i_signed <= signed(in_i);

  
  Switch1_out1_1 <= Switch1_out1 WHEN Logical_Operator_out1 = '0' ELSE
      in_i_signed;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch1_out1 <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  ch1_i <= std_logic_vector(Switch1_out1);

  in_q_signed <= signed(in_q);

  
  Switch2_out1_1 <= Switch2_out1 WHEN Logical_Operator_out1 = '0' ELSE
      in_q_signed;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch2_out1 <= Switch2_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  ch1_q <= std_logic_vector(Switch2_out1);

  Logical_Operator1_out1 <= en AND pd2;

  
  Switch3_out1_1 <= Switch3_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      in_i_signed;

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch3_out1 <= Switch3_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  ch2_i <= std_logic_vector(Switch3_out1);

  
  Switch4_out1_1 <= Switch4_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      in_q_signed;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch4_out1 <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  ch2_q <= std_logic_vector(Switch4_out1);

END rtl;


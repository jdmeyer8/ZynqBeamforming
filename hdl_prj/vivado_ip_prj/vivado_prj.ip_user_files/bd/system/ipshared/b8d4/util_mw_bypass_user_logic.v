// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/util_mw_bypass_user_logic/util_mw_bypass_user_logic.v
// Created: 2018-08-08 16:25:38
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: util_mw_bypass_user_logic
// Source Path: util_mw_bypass_user_logic
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module util_mw_bypass_user_logic
          (IPCORE_CLK,
           IPCORE_RESETN,
           bypass_data_in_0,
           bypass_data_in_1,
           bypass_valid_in_0,
           bypass_data_in_2,
           bypass_data_in_3,
           bypass_valid_in_1,
           bypass_data_in_4,
           bypass_data_in_5,
           bypass_valid_in_2,
           bypass_data_in_6,
           bypass_data_in_7,
           bypass_valid_in_3,
           dut_data_in_0,
           dut_data_in_1,
           dut_data_in_2,
           dut_data_in_3,
           dut_data_in_4,
           dut_data_in_5,
           dut_data_in_6,
           dut_data_in_7,
           dut_valid_in,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           mux_data_out_0,
           mux_data_out_1,
           mux_valid_out_0,
           mux_data_out_2,
           mux_data_out_3,
           mux_valid_out_1,
           mux_data_out_4,
           mux_data_out_5,
           mux_valid_out_2,
           mux_data_out_6,
           mux_data_out_7,
           mux_valid_out_3,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID);

  parameter DATA_WIDTH = 16;
  parameter NUM_CHAN = 4;
  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   [(DATA_WIDTH-1):0] bypass_data_in_0;  // ufix16
  input   [(DATA_WIDTH-1):0] bypass_data_in_1;  // ufix16
  input   bypass_valid_in_0;  // ufix1
  input   [(DATA_WIDTH-1):0] bypass_data_in_2;  // ufix16
  input   [(DATA_WIDTH-1):0] bypass_data_in_3;  // ufix16
  input   bypass_valid_in_1;  // ufix1
  input   [(DATA_WIDTH-1):0] bypass_data_in_4;  // ufix16
  input   [(DATA_WIDTH-1):0] bypass_data_in_5;  // ufix16
  input   bypass_valid_in_2;  // ufix1
  input   [(DATA_WIDTH-1):0] bypass_data_in_6;  // ufix16
  input   [(DATA_WIDTH-1):0] bypass_data_in_7;  // ufix16
  input   bypass_valid_in_3;  // ufix1
  input   [(DATA_WIDTH-1):0] dut_data_in_0;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_1;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_2;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_3;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_4;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_5;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_6;  // ufix16
  input   [(DATA_WIDTH-1):0] dut_data_in_7;  // ufix16
  input   dut_valid_in;  // ufix1
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  [(DATA_WIDTH-1):0] mux_data_out_0;  // ufix16
  output  [(DATA_WIDTH-1):0] mux_data_out_1;  // ufix16
  output  mux_valid_out_0;  // ufix1
  output  [(DATA_WIDTH-1):0] mux_data_out_2;  // ufix16
  output  [(DATA_WIDTH-1):0] mux_data_out_3;  // ufix16
  output  mux_valid_out_1;  // ufix1
  output  [(DATA_WIDTH-1):0] mux_data_out_4;  // ufix16
  output  [(DATA_WIDTH-1):0] mux_data_out_5;  // ufix16
  output  mux_valid_out_2;  // ufix1
  output  [(DATA_WIDTH-1):0] mux_data_out_6;  // ufix16
  output  [(DATA_WIDTH-1):0] mux_data_out_7;  // ufix16
  output  mux_valid_out_3;  // ufix1
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1


  wire reset;
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire write_axi_enable;  // ufix1
  wire write_sel;  // ufix1
  wire ce_out_sig;  // ufix1
  wire signed [(DATA_WIDTH-1):0] mux_data_out_0_sig;  // sfix16
  wire signed [(DATA_WIDTH-1):0] mux_data_out_1_sig;  // sfix16
  wire mux_valid_out_0_sig;  // ufix1
  wire signed [(DATA_WIDTH-1):0] mux_data_out_2_sig;  // sfix16
  wire signed [(DATA_WIDTH-1):0] mux_data_out_3_sig;  // sfix16
  wire mux_valid_out_1_sig;  // ufix1
  wire signed [(DATA_WIDTH-1):0] mux_data_out_4_sig;  // sfix16
  wire signed [(DATA_WIDTH-1):0] mux_data_out_5_sig;  // sfix16
  wire mux_valid_out_2_sig;  // ufix1
  wire signed [(DATA_WIDTH-1):0] mux_data_out_6_sig;  // sfix16
  wire signed [(DATA_WIDTH-1):0] mux_data_out_7_sig;  // sfix16
  wire mux_valid_out_3_sig;  // ufix1


  assign ip_timestamp = 32'b01101011110001010010001011011001;



  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset = reset_cm | reset_internal;



  util_mw_bypass_user_logic_axi_lite u_util_mw_bypass_user_logic_axi_lite_inst (.reset(reset),
                                                                                .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                                                                .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                                                                .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                                                                .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                                                                .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                                                                .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                                                                .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                                                                .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                                                                .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                                                                .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                                                                .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                                                                .read_ip_timestamp(ip_timestamp),  // ufix32
                                                                                .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                                                                .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                                                                .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                                                                .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                                                                .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                                                                .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                                                                .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                                                                .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                                                                .write_axi_enable(write_axi_enable),  // ufix1
                                                                                .write_sel(write_sel),  // ufix1
                                                                                .reset_internal(reset_internal)  // ufix1
                                                                                );

  util_mw_bypass_user_logic_dut #(.DATA_WIDTH(DATA_WIDTH),.NUM_CHAN(NUM_CHAN)) u_util_mw_bypass_user_logic_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                                                      .reset(reset),
                                                                      .dut_enable(write_axi_enable),  // ufix1
                                                                      .sel(write_sel),  // ufix1
                                                                      .bypass_data_in_0(bypass_data_in_0),  // sfix16
                                                                      .bypass_data_in_1(bypass_data_in_1),  // sfix16
                                                                      .bypass_valid_in_0(bypass_valid_in_0),  // ufix1
                                                                      .bypass_data_in_2(bypass_data_in_2),  // sfix16
                                                                      .bypass_data_in_3(bypass_data_in_3),  // sfix16
                                                                      .bypass_valid_in_1(bypass_valid_in_1),  // ufix1
                                                                      .bypass_data_in_4(bypass_data_in_4),  // sfix16
                                                                      .bypass_data_in_5(bypass_data_in_5),  // sfix16
                                                                      .bypass_valid_in_2(bypass_valid_in_2),  // ufix1
                                                                      .bypass_data_in_6(bypass_data_in_6),  // sfix16
                                                                      .bypass_data_in_7(bypass_data_in_7),  // sfix16
                                                                      .bypass_valid_in_3(bypass_valid_in_3),  // ufix1
                                                                      .dut_data_in_0(dut_data_in_0),  // sfix16
                                                                      .dut_data_in_1(dut_data_in_1),  // sfix16
                                                                      .dut_data_in_2(dut_data_in_2),  // sfix16
                                                                      .dut_data_in_3(dut_data_in_3),  // sfix16
                                                                      .dut_data_in_4(dut_data_in_4),  // sfix16
                                                                      .dut_data_in_5(dut_data_in_5),  // sfix16
                                                                      .dut_data_in_6(dut_data_in_6),  // sfix16
                                                                      .dut_data_in_7(dut_data_in_7),  // sfix16
                                                                      .dut_valid_in(dut_valid_in),  // ufix1
                                                                      .ce_out(ce_out_sig),  // ufix1
                                                                      .mux_data_out_0(mux_data_out_0_sig),  // sfix16
                                                                      .mux_data_out_1(mux_data_out_1_sig),  // sfix16
                                                                      .mux_valid_out_0(mux_valid_out_0_sig),  // ufix1
                                                                      .mux_data_out_2(mux_data_out_2_sig),  // sfix16
                                                                      .mux_data_out_3(mux_data_out_3_sig),  // sfix16
                                                                      .mux_valid_out_1(mux_valid_out_1_sig),  // ufix1
                                                                      .mux_data_out_4(mux_data_out_4_sig),  // sfix16
                                                                      .mux_data_out_5(mux_data_out_5_sig),  // sfix16
                                                                      .mux_valid_out_2(mux_valid_out_2_sig),  // ufix1
                                                                      .mux_data_out_6(mux_data_out_6_sig),  // sfix16
                                                                      .mux_data_out_7(mux_data_out_7_sig),  // sfix16
                                                                      .mux_valid_out_3(mux_valid_out_3_sig)  // ufix1
                                                                      );

  assign mux_data_out_0 = mux_data_out_0_sig;

  assign mux_data_out_1 = mux_data_out_1_sig;

  assign mux_valid_out_0 = mux_valid_out_0_sig;

  assign mux_data_out_2 = mux_data_out_2_sig;

  assign mux_data_out_3 = mux_data_out_3_sig;

  assign mux_valid_out_1 = mux_valid_out_1_sig;

  assign mux_data_out_4 = mux_data_out_4_sig;

  assign mux_data_out_5 = mux_data_out_5_sig;

  assign mux_valid_out_2 = mux_valid_out_2_sig;

  assign mux_data_out_6 = mux_data_out_6_sig;

  assign mux_data_out_7 = mux_data_out_7_sig;

  assign mux_valid_out_3 = mux_valid_out_3_sig;

endmodule  // util_mw_bypass_user_logic


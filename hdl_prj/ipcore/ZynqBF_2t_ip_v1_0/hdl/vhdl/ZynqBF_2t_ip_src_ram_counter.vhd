-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_ram_counter.vhd
-- Created: 2019-02-08 23:33:51
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_ram_counter
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/ram_counter
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ZynqBF_2t_ip_src_ram_counter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        rst                               :   IN    std_logic;
        ram_we                            :   IN    std_logic;
        ram_re                            :   IN    std_logic;
        pd_en                             :   IN    std_logic;
        corr_en                           :   OUT   std_logic;
        pd_init                           :   OUT   std_logic
        );
END ZynqBF_2t_ip_src_ram_counter;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_ram_counter IS

  -- Signals
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL HDL_Counter_count_step           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL ram_counter                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL pd_init_count                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Delay7_out1                      : std_logic;

BEGIN
  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= rst;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= pd_en;
        Delay3_reg(1 TO 3) <= Delay3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(3);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= ram_re;
        Delay2_reg(1 TO 3) <= Delay2_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(3);

  Logical_Operator1_out1 <= Delay3_out1 AND Delay2_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= ram_we;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator_out1 <= Delay5_out1 XOR Delay1_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ram_counter <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF Delay4_out1 = '1' THEN 
          ram_counter <= to_unsigned(16#0000#, 16);
        ELSIF Logical_Operator_out1 = '1' THEN 
          ram_counter <= ram_counter + HDL_Counter_count_step;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;

  
  HDL_Counter_count_step <= to_unsigned(16#0001#, 16) WHEN Delay1_out1 = '1' ELSE
      to_unsigned(16#FFFF#, 16);

  
  Compare_To_Constant_out1 <= '1' WHEN ram_counter > to_unsigned(16#0000#, 16) ELSE
      '0';

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pd_init_count <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF Delay4_out1 = '1' THEN 
          pd_init_count <= to_unsigned(16#00#, 8);
        ELSIF Logical_Operator2_out1 = '1' THEN 
          IF pd_init_count >= to_unsigned(16#01#, 8) THEN 
            pd_init_count <= to_unsigned(16#00#, 8);
          ELSE 
            pd_init_count <= pd_init_count + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN pd_init_count = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator2_out1 <= Delay1_out1 AND Compare_To_Constant1_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  corr_en <= Delay6_out1;

  pd_init <= Delay7_out1;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZynqBF_2tx_fpga\ZynqBF_2t_ip_src_shift_rx.vhd
-- Created: 2019-02-08 23:33:51
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ZynqBF_2t_ip_src_shift_rx
-- Source Path: ZynqBF_2tx_fpga/channel_estimator/peakdetect_ch1/correlator1/shift_rx
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ZynqBF_2t_ip_src_ZynqBF_2tx_fpga_pkg.ALL;

ENTITY ZynqBF_2t_ip_src_shift_rx IS
  GENERIC( NDSP                           :   integer := 32;
           NSHIFT                         :   integer := 5
        );
  PORT( clk                               :   in std_logic;
        reset                             :   in std_logic;
        u                                 :   IN    vector_of_std_logic_vector16(0 TO (NDSP-1));  -- sfix16_En15 [64]
        shift                             :   IN    std_logic_vector((NSHIFT-1) DOWNTO 0);  -- ufix6
        y                                 :   OUT   vector_of_std_logic_vector16(0 TO (NDSP-1))  -- sfix16_En15 [64]
        );
END ZynqBF_2t_ip_src_shift_rx;


ARCHITECTURE rtl OF ZynqBF_2t_ip_src_shift_rx IS

  -- Signals
  SIGNAL u_signed                         : vector_of_signed16(0 TO (NDSP-1));  -- sfix16_En15 [64]
  SIGNAL shift_unsigned                   : unsigned((NSHIFT-1) DOWNTO 0);  -- ufix6
  SIGNAL y_tmp                            : vector_of_signed16(0 TO (NDSP-1));  -- sfix16_En15 [64]
  
  signal u_s0                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s1                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s2                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s3                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s4                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s5                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s6                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s7                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s8                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s9                             : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s10                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s11                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s12                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s13                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s14                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s15                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s16                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s17                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s18                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s19                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s20                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s21                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s22                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s23                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s24                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s25                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s26                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s27                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s28                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s29                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s30                            : vector_of_std_logic_vector16(0 to (NDSP-1));
  signal u_s31                            : vector_of_std_logic_vector16(0 to (NDSP-1));

BEGIN

    u_s0  <= u;
    u_s1  <= u( 1 to (NDSP-1)) & u(0);
    u_s2  <= u( 2 to (NDSP-1)) & u(0 to  1);
    u_s3  <= u( 3 to (NDSP-1)) & u(0 to  2);
    u_s4  <= u( 4 to (NDSP-1)) & u(0 to  3);
    u_s5  <= u( 5 to (NDSP-1)) & u(0 to  4);
    u_s6  <= u( 6 to (NDSP-1)) & u(0 to  5);
    u_s7  <= u( 7 to (NDSP-1)) & u(0 to  6);
    u_s8  <= u( 8 to (NDSP-1)) & u(0 to  7);
    u_s9  <= u( 9 to (NDSP-1)) & u(0 to  8);
    u_s10 <= u(10 to (NDSP-1)) & u(0 to  9);
    u_s11 <= u(11 to (NDSP-1)) & u(0 to 10);
    u_s12 <= u(12 to (NDSP-1)) & u(0 to 11);
    u_s13 <= u(13 to (NDSP-1)) & u(0 to 12);
    u_s14 <= u(14 to (NDSP-1)) & u(0 to 13);
    u_s15 <= u(15 to (NDSP-1)) & u(0 to 14);
    u_s16 <= u(16 to (NDSP-1)) & u(0 to 15);
    u_s17 <= u(17 to (NDSP-1)) & u(0 to 16);
    u_s18 <= u(18 to (NDSP-1)) & u(0 to 17);
    u_s19 <= u(19 to (NDSP-1)) & u(0 to 18);
    u_s20 <= u(20 to (NDSP-1)) & u(0 to 19);
    u_s21 <= u(21 to (NDSP-1)) & u(0 to 20);
    u_s22 <= u(22 to (NDSP-1)) & u(0 to 21);
    u_s23 <= u(23 to (NDSP-1)) & u(0 to 22);
    u_s24 <= u(24 to (NDSP-1)) & u(0 to 23);
    u_s25 <= u(25 to (NDSP-1)) & u(0 to 24);
    u_s26 <= u(26 to (NDSP-1)) & u(0 to 25);
    u_s27 <= u(27 to (NDSP-1)) & u(0 to 26);
    u_s28 <= u(28 to (NDSP-1)) & u(0 to 27);
    u_s29 <= u(29 to (NDSP-1)) & u(0 to 28);
    u_s30 <= u(30 to (NDSP-1)) & u(0 to 29);
    u_s31 <= u(31 to (NDSP-1)) & u(0 to 30);


shift_proc: process(clk,reset)
begin
  if clk'event and clk = '1' then
    if reset = '1' then
      for i in 0 to (NDSP-1) loop
          y(i) <= x"0000";
      end loop;
    else
      case shift is
        when "00000" => y <= u_s0;
        when "00001" => y <= u_s1;
        when "00010" => y <= u_s2;
        when "00011" => y <= u_s3;
        when "00100" => y <= u_s4;
        when "00101" => y <= u_s5;
        when "00110" => y <= u_s6;
        when "00111" => y <= u_s7;
        when "01000" => y <= u_s8;
        when "01001" => y <= u_s9;
        when "01010" => y <= u_s10;
        when "01011" => y <= u_s11;
        when "01100" => y <= u_s12;
        when "01101" => y <= u_s13;
        when "01110" => y <= u_s14;
        when "01111" => y <= u_s15;
        when "10000" => y <= u_s16;
        when "10001" => y <= u_s17;
        when "10010" => y <= u_s18;
        when "10011" => y <= u_s19;
        when "10100" => y <= u_s20;
        when "10101" => y <= u_s21;
        when "10110" => y <= u_s22;
        when "10111" => y <= u_s23;
        when "11000" => y <= u_s24;
        when "11001" => y <= u_s25;
        when "11010" => y <= u_s26;
        when "11011" => y <= u_s27;
        when "11100" => y <= u_s28;
        when "11101" => y <= u_s29;
        when "11110" => y <= u_s30;
        when "11111" => y <= u_s31;
        when others => y <= (others => x"0000");
      end case;
    end if;
  end if;
end process;

END rtl;

